
Calculator_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  000031fe  00003272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002aa8  00000000  00000000  000032a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f8f  00000000  00000000  00005d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00006cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00006e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00006f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00009ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a870  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000a9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000ac5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b42b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <main>
      7a:	0c 94 fd 18 	jmp	0x31fa	; 0x31fa <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 c6 18 	jmp	0x318c	; 0x318c <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ab e6       	ldi	r26, 0x6B	; 107
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 e2 18 	jmp	0x31c4	; 0x31c4 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 d2 18 	jmp	0x31a4	; 0x31a4 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 d2 18 	jmp	0x31a4	; 0x31a4 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 c6 18 	jmp	0x318c	; 0x318c <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8b e6       	ldi	r24, 0x6B	; 107
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 e2 18 	jmp	0x31c4	; 0x31c4 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 d2 18 	jmp	0x31a4	; 0x31a4 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 d2 18 	jmp	0x31a4	; 0x31a4 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 d2 18 	jmp	0x31a4	; 0x31a4 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 d6 18 	jmp	0x31ac	; 0x31ac <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 f2 18 	jmp	0x31e4	; 0x31e4 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <Local_u8IsDigit>:
//#include <stdio.h>
//#include <stdlib.h>
//#include <ctype.h>
//
u8 Local_u8IsDigit(u8 Copy_u8Digit)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <Local_u8IsDigit+0x6>
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Digit >= '0' && Copy_u8Digit <= '9')
     b42:	89 81       	ldd	r24, Y+1	; 0x01
     b44:	80 33       	cpi	r24, 0x30	; 48
     b46:	30 f0       	brcs	.+12     	; 0xb54 <Local_u8IsDigit+0x1e>
     b48:	89 81       	ldd	r24, Y+1	; 0x01
     b4a:	8a 33       	cpi	r24, 0x3A	; 58
     b4c:	18 f4       	brcc	.+6      	; 0xb54 <Local_u8IsDigit+0x1e>
	{
		return 1;
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	8a 83       	std	Y+2, r24	; 0x02
     b52:	01 c0       	rjmp	.+2      	; 0xb56 <Local_u8IsDigit+0x20>
	}
	else
	{
		return 0;
     b54:	1a 82       	std	Y+2, r1	; 0x02
     b56:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
     b58:	0f 90       	pop	r0
     b5a:	0f 90       	pop	r0
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <Local_u8IsOperand>:
u8 Local_u8IsOperand(u8 Copy_u8Operand)
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	00 d0       	rcall	.+0      	; 0xb68 <Local_u8IsOperand+0x6>
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
     b6c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Operand == '+' ||Copy_u8Operand == '-' || Copy_u8Operand == '/' || Copy_u8Operand == '*'  )
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	8b 32       	cpi	r24, 0x2B	; 43
     b72:	49 f0       	breq	.+18     	; 0xb86 <Local_u8IsOperand+0x24>
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	8d 32       	cpi	r24, 0x2D	; 45
     b78:	31 f0       	breq	.+12     	; 0xb86 <Local_u8IsOperand+0x24>
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	8f 32       	cpi	r24, 0x2F	; 47
     b7e:	19 f0       	breq	.+6      	; 0xb86 <Local_u8IsOperand+0x24>
     b80:	89 81       	ldd	r24, Y+1	; 0x01
     b82:	8a 32       	cpi	r24, 0x2A	; 42
     b84:	19 f4       	brne	.+6      	; 0xb8c <Local_u8IsOperand+0x2a>
	{
		return 1;
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	8a 83       	std	Y+2, r24	; 0x02
     b8a:	01 c0       	rjmp	.+2      	; 0xb8e <Local_u8IsOperand+0x2c>
	}
	else
	{
		return 0;
     b8c:	1a 82       	std	Y+2, r1	; 0x02
     b8e:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
     b90:	0f 90       	pop	r0
     b92:	0f 90       	pop	r0
     b94:	cf 91       	pop	r28
     b96:	df 91       	pop	r29
     b98:	08 95       	ret

00000b9a <DIO_enuInit>:




ES_t DIO_enuInit(void)
{
     b9a:	df 93       	push	r29
     b9c:	cf 93       	push	r28
     b9e:	0f 92       	push	r0
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	89 83       	std	Y+1, r24	; 0x01

	DDRA=Conc(PORTA_PIN7_DIR,PORTA_PIN6_DIR,PORTA_PIN5_DIR,PORTA_PIN4_DIR,PORTA_PIN3_DIR,PORTA_PIN2_DIR,PORTA_PIN1_DIR,PORTA_PIN0_DIR);
     ba8:	ea e3       	ldi	r30, 0x3A	; 58
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	8c e4       	ldi	r24, 0x4C	; 76
     bae:	80 83       	st	Z, r24

	DDRB=Conc(PORTB_PIN7_DIR,PORTB_PIN6_DIR,PORTB_PIN5_DIR,PORTB_PIN4_DIR,PORTB_PIN3_DIR,PORTB_PIN2_DIR,PORTB_PIN1_DIR,PORTB_PIN0_DIR);
     bb0:	e7 e3       	ldi	r30, 0x37	; 55
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	8c e4       	ldi	r24, 0x4C	; 76
     bb6:	80 83       	st	Z, r24

	DDRC=Conc(PORTC_PIN7_DIR,PORTC_PIN6_DIR,PORTC_PIN5_DIR,PORTC_PIN4_DIR,PORTC_PIN3_DIR,PORTC_PIN2_DIR,PORTC_PIN1_DIR,PORTC_PIN0_DIR);
     bb8:	e4 e3       	ldi	r30, 0x34	; 52
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	8c e4       	ldi	r24, 0x4C	; 76
     bbe:	80 83       	st	Z, r24

	DDRD=Conc(PORTD_PIN7_DIR,PORTD_PIN6_DIR,PORTD_PIN5_DIR,PORTD_PIN4_DIR,PORTD_PIN3_DIR,PORTD_PIN2_DIR,PORTD_PIN1_DIR,PORTD_PIN0_DIR);
     bc0:	e1 e3       	ldi	r30, 0x31	; 49
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	8c e4       	ldi	r24, 0x4C	; 76
     bc6:	80 83       	st	Z, r24

	PORTA=Conc(PORTA_PIN7_VAL,PORTA_PIN6_VAL,PORTA_PIN5_VAL,PORTA_PIN4_VAL,PORTA_PIN3_VAL,PORTA_PIN2_VAL,PORTA_PIN1_VAL,PORTA_PIN0_VAL);
     bc8:	eb e3       	ldi	r30, 0x3B	; 59
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	84 e7       	ldi	r24, 0x74	; 116
     bce:	80 83       	st	Z, r24

	PORTB=Conc(PORTB_PIN7_VAL,PORTB_PIN6_VAL,PORTB_PIN5_VAL,PORTB_PIN4_VAL,PORTB_PIN3_VAL,PORTB_PIN2_VAL,PORTB_PIN1_VAL,PORTB_PIN0_VAL);
     bd0:	e8 e3       	ldi	r30, 0x38	; 56
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	84 e7       	ldi	r24, 0x74	; 116
     bd6:	80 83       	st	Z, r24

	PORTC=Conc(PORTC_PIN7_VAL,PORTC_PIN6_VAL,PORTC_PIN5_VAL,PORTC_PIN4_VAL,PORTC_PIN3_VAL,PORTC_PIN2_VAL,PORTC_PIN1_VAL,PORTC_PIN0_VAL);
     bd8:	e5 e3       	ldi	r30, 0x35	; 53
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	84 e7       	ldi	r24, 0x74	; 116
     bde:	80 83       	st	Z, r24

	PORTD=Conc(PORTD_PIN7_VAL,PORTD_PIN6_VAL,PORTD_PIN5_VAL,PORTD_PIN4_VAL,PORTD_PIN3_VAL,PORTD_PIN2_VAL,PORTD_PIN1_VAL,PORTD_PIN0_VAL);
     be0:	e2 e3       	ldi	r30, 0x32	; 50
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	84 e7       	ldi	r24, 0x74	; 116
     be6:	80 83       	st	Z, r24

	Local_enuErrorState=ES_OK;
     be8:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
     bea:	89 81       	ldd	r24, Y+1	; 0x01
}
     bec:	0f 90       	pop	r0
     bee:	cf 91       	pop	r28
     bf0:	df 91       	pop	r29
     bf2:	08 95       	ret

00000bf4 <DIO_enuSet_PortValue>:

ES_t DIO_enuSet_PortValue(u8 copy_u8PortId,u8 copy_u8PortValue)//copy_u8PortValue-->HIGH-->LOW
{
     bf4:	df 93       	push	r29
     bf6:	cf 93       	push	r28
     bf8:	00 d0       	rcall	.+0      	; 0xbfa <DIO_enuSet_PortValue+0x6>
     bfa:	00 d0       	rcall	.+0      	; 0xbfc <DIO_enuSet_PortValue+0x8>
     bfc:	0f 92       	push	r0
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	8a 83       	std	Y+2, r24	; 0x02
     c04:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	89 83       	std	Y+1, r24	; 0x01

	if(copy_u8PortId<=DIO_PORTD)
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	a0 f5       	brcc	.+104    	; 0xc78 <DIO_enuSet_PortValue+0x84>
	{
		switch(copy_u8PortId)
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	3d 83       	std	Y+5, r19	; 0x05
     c18:	2c 83       	std	Y+4, r18	; 0x04
     c1a:	8c 81       	ldd	r24, Y+4	; 0x04
     c1c:	9d 81       	ldd	r25, Y+5	; 0x05
     c1e:	81 30       	cpi	r24, 0x01	; 1
     c20:	91 05       	cpc	r25, r1
     c22:	d1 f0       	breq	.+52     	; 0xc58 <DIO_enuSet_PortValue+0x64>
     c24:	2c 81       	ldd	r18, Y+4	; 0x04
     c26:	3d 81       	ldd	r19, Y+5	; 0x05
     c28:	22 30       	cpi	r18, 0x02	; 2
     c2a:	31 05       	cpc	r19, r1
     c2c:	2c f4       	brge	.+10     	; 0xc38 <DIO_enuSet_PortValue+0x44>
     c2e:	8c 81       	ldd	r24, Y+4	; 0x04
     c30:	9d 81       	ldd	r25, Y+5	; 0x05
     c32:	00 97       	sbiw	r24, 0x00	; 0
     c34:	61 f0       	breq	.+24     	; 0xc4e <DIO_enuSet_PortValue+0x5a>
     c36:	1e c0       	rjmp	.+60     	; 0xc74 <DIO_enuSet_PortValue+0x80>
     c38:	2c 81       	ldd	r18, Y+4	; 0x04
     c3a:	3d 81       	ldd	r19, Y+5	; 0x05
     c3c:	22 30       	cpi	r18, 0x02	; 2
     c3e:	31 05       	cpc	r19, r1
     c40:	81 f0       	breq	.+32     	; 0xc62 <DIO_enuSet_PortValue+0x6e>
     c42:	8c 81       	ldd	r24, Y+4	; 0x04
     c44:	9d 81       	ldd	r25, Y+5	; 0x05
     c46:	83 30       	cpi	r24, 0x03	; 3
     c48:	91 05       	cpc	r25, r1
     c4a:	81 f0       	breq	.+32     	; 0xc6c <DIO_enuSet_PortValue+0x78>
     c4c:	13 c0       	rjmp	.+38     	; 0xc74 <DIO_enuSet_PortValue+0x80>
		{
		case(DIO_PORTA):
					PORTA=copy_u8PortValue;
     c4e:	eb e3       	ldi	r30, 0x3B	; 59
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	8b 81       	ldd	r24, Y+3	; 0x03
     c54:	80 83       	st	Z, r24
     c56:	0e c0       	rjmp	.+28     	; 0xc74 <DIO_enuSet_PortValue+0x80>
		break;
		case(DIO_PORTB):
					PORTB=copy_u8PortValue;
     c58:	e8 e3       	ldi	r30, 0x38	; 56
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	80 83       	st	Z, r24
     c60:	09 c0       	rjmp	.+18     	; 0xc74 <DIO_enuSet_PortValue+0x80>
		break;
		case(DIO_PORTC):
					PORTC=copy_u8PortValue;
     c62:	e5 e3       	ldi	r30, 0x35	; 53
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	8b 81       	ldd	r24, Y+3	; 0x03
     c68:	80 83       	st	Z, r24
     c6a:	04 c0       	rjmp	.+8      	; 0xc74 <DIO_enuSet_PortValue+0x80>
		break;
		case(DIO_PORTD):
					PORTD=copy_u8PortValue;
     c6c:	e2 e3       	ldi	r30, 0x32	; 50
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	8b 81       	ldd	r24, Y+3	; 0x03
     c72:	80 83       	st	Z, r24
		break;
		}
		Local_enuErrorState=ES_OK;
     c74:	19 82       	std	Y+1, r1	; 0x01
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <DIO_enuSet_PortValue+0x88>

	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
     c78:	83 e0       	ldi	r24, 0x03	; 3
     c7a:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuErrorState;
     c7c:	89 81       	ldd	r24, Y+1	; 0x01
}
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	cf 91       	pop	r28
     c8a:	df 91       	pop	r29
     c8c:	08 95       	ret

00000c8e <DIO_enuSet_PortDirection>:


ES_t DIO_enuSet_PortDirection(u8 copy_u8PortId,u8 copy_u8PortValue)//copy_u8PortValue-->INPUT-->OUTPUT
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	00 d0       	rcall	.+0      	; 0xc94 <DIO_enuSet_PortDirection+0x6>
     c94:	00 d0       	rcall	.+0      	; 0xc96 <DIO_enuSet_PortDirection+0x8>
     c96:	0f 92       	push	r0
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	8a 83       	std	Y+2, r24	; 0x02
     c9e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	89 83       	std	Y+1, r24	; 0x01

	if(copy_u8PortId<=DIO_PORTD)
     ca4:	8a 81       	ldd	r24, Y+2	; 0x02
     ca6:	84 30       	cpi	r24, 0x04	; 4
     ca8:	a0 f5       	brcc	.+104    	; 0xd12 <DIO_enuSet_PortDirection+0x84>
	{
		switch(copy_u8PortId)
     caa:	8a 81       	ldd	r24, Y+2	; 0x02
     cac:	28 2f       	mov	r18, r24
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	3d 83       	std	Y+5, r19	; 0x05
     cb2:	2c 83       	std	Y+4, r18	; 0x04
     cb4:	8c 81       	ldd	r24, Y+4	; 0x04
     cb6:	9d 81       	ldd	r25, Y+5	; 0x05
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	91 05       	cpc	r25, r1
     cbc:	d1 f0       	breq	.+52     	; 0xcf2 <DIO_enuSet_PortDirection+0x64>
     cbe:	2c 81       	ldd	r18, Y+4	; 0x04
     cc0:	3d 81       	ldd	r19, Y+5	; 0x05
     cc2:	22 30       	cpi	r18, 0x02	; 2
     cc4:	31 05       	cpc	r19, r1
     cc6:	2c f4       	brge	.+10     	; 0xcd2 <DIO_enuSet_PortDirection+0x44>
     cc8:	8c 81       	ldd	r24, Y+4	; 0x04
     cca:	9d 81       	ldd	r25, Y+5	; 0x05
     ccc:	00 97       	sbiw	r24, 0x00	; 0
     cce:	61 f0       	breq	.+24     	; 0xce8 <DIO_enuSet_PortDirection+0x5a>
     cd0:	1e c0       	rjmp	.+60     	; 0xd0e <DIO_enuSet_PortDirection+0x80>
     cd2:	2c 81       	ldd	r18, Y+4	; 0x04
     cd4:	3d 81       	ldd	r19, Y+5	; 0x05
     cd6:	22 30       	cpi	r18, 0x02	; 2
     cd8:	31 05       	cpc	r19, r1
     cda:	81 f0       	breq	.+32     	; 0xcfc <DIO_enuSet_PortDirection+0x6e>
     cdc:	8c 81       	ldd	r24, Y+4	; 0x04
     cde:	9d 81       	ldd	r25, Y+5	; 0x05
     ce0:	83 30       	cpi	r24, 0x03	; 3
     ce2:	91 05       	cpc	r25, r1
     ce4:	81 f0       	breq	.+32     	; 0xd06 <DIO_enuSet_PortDirection+0x78>
     ce6:	13 c0       	rjmp	.+38     	; 0xd0e <DIO_enuSet_PortDirection+0x80>
		{
		case(DIO_PORTA):
					DDRA=copy_u8PortValue;
     ce8:	ea e3       	ldi	r30, 0x3A	; 58
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	80 83       	st	Z, r24
     cf0:	0e c0       	rjmp	.+28     	; 0xd0e <DIO_enuSet_PortDirection+0x80>
		break;
		case(DIO_PORTB):
					DDRB=copy_u8PortValue;
     cf2:	e7 e3       	ldi	r30, 0x37	; 55
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	80 83       	st	Z, r24
     cfa:	09 c0       	rjmp	.+18     	; 0xd0e <DIO_enuSet_PortDirection+0x80>
		break;
		case(DIO_PORTC):
					DDRC=copy_u8PortValue;
     cfc:	e4 e3       	ldi	r30, 0x34	; 52
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	8b 81       	ldd	r24, Y+3	; 0x03
     d02:	80 83       	st	Z, r24
     d04:	04 c0       	rjmp	.+8      	; 0xd0e <DIO_enuSet_PortDirection+0x80>
		break;
		case(DIO_PORTD):
					DDRD=copy_u8PortValue;
     d06:	e1 e3       	ldi	r30, 0x31	; 49
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	80 83       	st	Z, r24
		break;
		}
		Local_enuErrorState=ES_OK;
     d0e:	19 82       	std	Y+1, r1	; 0x01
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <DIO_enuSet_PortDirection+0x88>
	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
     d12:	83 e0       	ldi	r24, 0x03	; 3
     d14:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     d16:	89 81       	ldd	r24, Y+1	; 0x01
}
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	0f 90       	pop	r0
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	cf 91       	pop	r28
     d24:	df 91       	pop	r29
     d26:	08 95       	ret

00000d28 <DIO_enuget_PortValue>:


ES_t DIO_enuget_PortValue(u8 copy_u8PortId,u8 *copy_pu8PortValue)
{
     d28:	df 93       	push	r29
     d2a:	cf 93       	push	r28
     d2c:	00 d0       	rcall	.+0      	; 0xd2e <DIO_enuget_PortValue+0x6>
     d2e:	00 d0       	rcall	.+0      	; 0xd30 <DIO_enuget_PortValue+0x8>
     d30:	00 d0       	rcall	.+0      	; 0xd32 <DIO_enuget_PortValue+0xa>
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
     d36:	8a 83       	std	Y+2, r24	; 0x02
     d38:	7c 83       	std	Y+4, r23	; 0x04
     d3a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	89 83       	std	Y+1, r24	; 0x01
	if(copy_pu8PortValue!=NULL )
     d40:	8b 81       	ldd	r24, Y+3	; 0x03
     d42:	9c 81       	ldd	r25, Y+4	; 0x04
     d44:	00 97       	sbiw	r24, 0x00	; 0
     d46:	09 f4       	brne	.+2      	; 0xd4a <DIO_enuget_PortValue+0x22>
     d48:	42 c0       	rjmp	.+132    	; 0xdce <DIO_enuget_PortValue+0xa6>
	{
		if(copy_u8PortId<=DIO_PORTD)
     d4a:	8a 81       	ldd	r24, Y+2	; 0x02
     d4c:	84 30       	cpi	r24, 0x04	; 4
     d4e:	e0 f5       	brcc	.+120    	; 0xdc8 <DIO_enuget_PortValue+0xa0>
		{
			switch(copy_u8PortId)
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	28 2f       	mov	r18, r24
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	3e 83       	std	Y+6, r19	; 0x06
     d58:	2d 83       	std	Y+5, r18	; 0x05
     d5a:	8d 81       	ldd	r24, Y+5	; 0x05
     d5c:	9e 81       	ldd	r25, Y+6	; 0x06
     d5e:	81 30       	cpi	r24, 0x01	; 1
     d60:	91 05       	cpc	r25, r1
     d62:	e1 f0       	breq	.+56     	; 0xd9c <DIO_enuget_PortValue+0x74>
     d64:	2d 81       	ldd	r18, Y+5	; 0x05
     d66:	3e 81       	ldd	r19, Y+6	; 0x06
     d68:	22 30       	cpi	r18, 0x02	; 2
     d6a:	31 05       	cpc	r19, r1
     d6c:	2c f4       	brge	.+10     	; 0xd78 <DIO_enuget_PortValue+0x50>
     d6e:	8d 81       	ldd	r24, Y+5	; 0x05
     d70:	9e 81       	ldd	r25, Y+6	; 0x06
     d72:	00 97       	sbiw	r24, 0x00	; 0
     d74:	61 f0       	breq	.+24     	; 0xd8e <DIO_enuget_PortValue+0x66>
     d76:	26 c0       	rjmp	.+76     	; 0xdc4 <DIO_enuget_PortValue+0x9c>
     d78:	2d 81       	ldd	r18, Y+5	; 0x05
     d7a:	3e 81       	ldd	r19, Y+6	; 0x06
     d7c:	22 30       	cpi	r18, 0x02	; 2
     d7e:	31 05       	cpc	r19, r1
     d80:	a1 f0       	breq	.+40     	; 0xdaa <DIO_enuget_PortValue+0x82>
     d82:	8d 81       	ldd	r24, Y+5	; 0x05
     d84:	9e 81       	ldd	r25, Y+6	; 0x06
     d86:	83 30       	cpi	r24, 0x03	; 3
     d88:	91 05       	cpc	r25, r1
     d8a:	b1 f0       	breq	.+44     	; 0xdb8 <DIO_enuget_PortValue+0x90>
     d8c:	1b c0       	rjmp	.+54     	; 0xdc4 <DIO_enuget_PortValue+0x9c>
			{
			case(DIO_PORTA):
							*copy_pu8PortValue=PINA;
     d8e:	e9 e3       	ldi	r30, 0x39	; 57
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	eb 81       	ldd	r30, Y+3	; 0x03
     d96:	fc 81       	ldd	r31, Y+4	; 0x04
     d98:	80 83       	st	Z, r24
     d9a:	14 c0       	rjmp	.+40     	; 0xdc4 <DIO_enuget_PortValue+0x9c>
			break;
			case(DIO_PORTB):
							*copy_pu8PortValue=PINB;
     d9c:	e6 e3       	ldi	r30, 0x36	; 54
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	eb 81       	ldd	r30, Y+3	; 0x03
     da4:	fc 81       	ldd	r31, Y+4	; 0x04
     da6:	80 83       	st	Z, r24
     da8:	0d c0       	rjmp	.+26     	; 0xdc4 <DIO_enuget_PortValue+0x9c>
			break;
			case(DIO_PORTC):
							*copy_pu8PortValue=PINC;
     daa:	e3 e3       	ldi	r30, 0x33	; 51
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	eb 81       	ldd	r30, Y+3	; 0x03
     db2:	fc 81       	ldd	r31, Y+4	; 0x04
     db4:	80 83       	st	Z, r24
     db6:	06 c0       	rjmp	.+12     	; 0xdc4 <DIO_enuget_PortValue+0x9c>
			break;
			case(DIO_PORTD):
							*copy_pu8PortValue=PIND;
     db8:	e0 e3       	ldi	r30, 0x30	; 48
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	eb 81       	ldd	r30, Y+3	; 0x03
     dc0:	fc 81       	ldd	r31, Y+4	; 0x04
     dc2:	80 83       	st	Z, r24
			break;
			}
			Local_enuErrorState=ES_OK;
     dc4:	19 82       	std	Y+1, r1	; 0x01
     dc6:	05 c0       	rjmp	.+10     	; 0xdd2 <DIO_enuget_PortValue+0xaa>

		}
		else
		{
			Local_enuErrorState=ES_OUT_OF_RANGE;
     dc8:	83 e0       	ldi	r24, 0x03	; 3
     dca:	89 83       	std	Y+1, r24	; 0x01
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <DIO_enuget_PortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
     dce:	82 e0       	ldi	r24, 0x02	; 2
     dd0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
}
     dd4:	26 96       	adiw	r28, 0x06	; 6
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	f8 94       	cli
     dda:	de bf       	out	0x3e, r29	; 62
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	cd bf       	out	0x3d, r28	; 61
     de0:	cf 91       	pop	r28
     de2:	df 91       	pop	r29
     de4:	08 95       	ret

00000de6 <DIO_enuToggle_PortValue>:


ES_t DIO_enuToggle_PortValue(u8 copy_u8PortId)
{
     de6:	df 93       	push	r29
     de8:	cf 93       	push	r28
     dea:	00 d0       	rcall	.+0      	; 0xdec <DIO_enuToggle_PortValue+0x6>
     dec:	00 d0       	rcall	.+0      	; 0xdee <DIO_enuToggle_PortValue+0x8>
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8PortId<=DIO_PORTD)
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	08 f0       	brcs	.+2      	; 0xe00 <DIO_enuToggle_PortValue+0x1a>
     dfe:	40 c0       	rjmp	.+128    	; 0xe80 <DIO_enuToggle_PortValue+0x9a>
	{
		switch(copy_u8PortId)
     e00:	8a 81       	ldd	r24, Y+2	; 0x02
     e02:	28 2f       	mov	r18, r24
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	3c 83       	std	Y+4, r19	; 0x04
     e08:	2b 83       	std	Y+3, r18	; 0x03
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
     e0c:	9c 81       	ldd	r25, Y+4	; 0x04
     e0e:	81 30       	cpi	r24, 0x01	; 1
     e10:	91 05       	cpc	r25, r1
     e12:	e9 f0       	breq	.+58     	; 0xe4e <DIO_enuToggle_PortValue+0x68>
     e14:	2b 81       	ldd	r18, Y+3	; 0x03
     e16:	3c 81       	ldd	r19, Y+4	; 0x04
     e18:	22 30       	cpi	r18, 0x02	; 2
     e1a:	31 05       	cpc	r19, r1
     e1c:	2c f4       	brge	.+10     	; 0xe28 <DIO_enuToggle_PortValue+0x42>
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	9c 81       	ldd	r25, Y+4	; 0x04
     e22:	00 97       	sbiw	r24, 0x00	; 0
     e24:	61 f0       	breq	.+24     	; 0xe3e <DIO_enuToggle_PortValue+0x58>
     e26:	2a c0       	rjmp	.+84     	; 0xe7c <DIO_enuToggle_PortValue+0x96>
     e28:	2b 81       	ldd	r18, Y+3	; 0x03
     e2a:	3c 81       	ldd	r19, Y+4	; 0x04
     e2c:	22 30       	cpi	r18, 0x02	; 2
     e2e:	31 05       	cpc	r19, r1
     e30:	b1 f0       	breq	.+44     	; 0xe5e <DIO_enuToggle_PortValue+0x78>
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	9c 81       	ldd	r25, Y+4	; 0x04
     e36:	83 30       	cpi	r24, 0x03	; 3
     e38:	91 05       	cpc	r25, r1
     e3a:	c9 f0       	breq	.+50     	; 0xe6e <DIO_enuToggle_PortValue+0x88>
     e3c:	1f c0       	rjmp	.+62     	; 0xe7c <DIO_enuToggle_PortValue+0x96>
		{
		case(DIO_PORTA):
						PORTA=~PORTA;
     e3e:	ab e3       	ldi	r26, 0x3B	; 59
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	eb e3       	ldi	r30, 0x3B	; 59
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	80 95       	com	r24
     e4a:	8c 93       	st	X, r24
     e4c:	17 c0       	rjmp	.+46     	; 0xe7c <DIO_enuToggle_PortValue+0x96>
		break;
		case(DIO_PORTB):
						PORTB=~PORTB;
     e4e:	a8 e3       	ldi	r26, 0x38	; 56
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e8 e3       	ldi	r30, 0x38	; 56
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	80 95       	com	r24
     e5a:	8c 93       	st	X, r24
     e5c:	0f c0       	rjmp	.+30     	; 0xe7c <DIO_enuToggle_PortValue+0x96>
		break;
		case(DIO_PORTC):
						PORTC=~PORTC;
     e5e:	a5 e3       	ldi	r26, 0x35	; 53
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e5 e3       	ldi	r30, 0x35	; 53
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	80 95       	com	r24
     e6a:	8c 93       	st	X, r24
     e6c:	07 c0       	rjmp	.+14     	; 0xe7c <DIO_enuToggle_PortValue+0x96>
		break;
		case(DIO_PORTD):
						PORTD=~PORTD;
     e6e:	a2 e3       	ldi	r26, 0x32	; 50
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e2 e3       	ldi	r30, 0x32	; 50
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	80 95       	com	r24
     e7a:	8c 93       	st	X, r24
		break;
		}
		Local_enuErrorState=ES_OK;
     e7c:	19 82       	std	Y+1, r1	; 0x01
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_enuToggle_PortValue+0x9e>
	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
     e80:	83 e0       	ldi	r24, 0x03	; 3
     e82:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
     e84:	89 81       	ldd	r24, Y+1	; 0x01
}
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	08 95       	ret

00000e94 <DIO_enuSet_PinValue>:



ES_t DIO_enuSet_PinValue(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8PinValue)

{
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	00 d0       	rcall	.+0      	; 0xe9a <DIO_enuSet_PinValue+0x6>
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <DIO_enuSet_PinValue+0x8>
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <DIO_enuSet_PinValue+0xa>
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
     ea2:	8a 83       	std	Y+2, r24	; 0x02
     ea4:	6b 83       	std	Y+3, r22	; 0x03
     ea6:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	89 83       	std	Y+1, r24	; 0x01

	if(copy_u8PortId <= DIO_PORTD && copy_u8PinId <= DIO_PIN7 && copy_u8PinValue <= OUTPUT)
     eac:	8a 81       	ldd	r24, Y+2	; 0x02
     eae:	84 30       	cpi	r24, 0x04	; 4
     eb0:	08 f0       	brcs	.+2      	; 0xeb4 <DIO_enuSet_PinValue+0x20>
     eb2:	d0 c0       	rjmp	.+416    	; 0x1054 <DIO_enuSet_PinValue+0x1c0>
     eb4:	8b 81       	ldd	r24, Y+3	; 0x03
     eb6:	88 30       	cpi	r24, 0x08	; 8
     eb8:	08 f0       	brcs	.+2      	; 0xebc <DIO_enuSet_PinValue+0x28>
     eba:	cc c0       	rjmp	.+408    	; 0x1054 <DIO_enuSet_PinValue+0x1c0>
     ebc:	8c 81       	ldd	r24, Y+4	; 0x04
     ebe:	82 30       	cpi	r24, 0x02	; 2
     ec0:	08 f0       	brcs	.+2      	; 0xec4 <DIO_enuSet_PinValue+0x30>
     ec2:	c8 c0       	rjmp	.+400    	; 0x1054 <DIO_enuSet_PinValue+0x1c0>
	{
		switch(copy_u8PortId)
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	3e 83       	std	Y+6, r19	; 0x06
     ecc:	2d 83       	std	Y+5, r18	; 0x05
     ece:	6d 81       	ldd	r22, Y+5	; 0x05
     ed0:	7e 81       	ldd	r23, Y+6	; 0x06
     ed2:	61 30       	cpi	r22, 0x01	; 1
     ed4:	71 05       	cpc	r23, r1
     ed6:	09 f4       	brne	.+2      	; 0xeda <DIO_enuSet_PinValue+0x46>
     ed8:	41 c0       	rjmp	.+130    	; 0xf5c <DIO_enuSet_PinValue+0xc8>
     eda:	8d 81       	ldd	r24, Y+5	; 0x05
     edc:	9e 81       	ldd	r25, Y+6	; 0x06
     ede:	82 30       	cpi	r24, 0x02	; 2
     ee0:	91 05       	cpc	r25, r1
     ee2:	34 f4       	brge	.+12     	; 0xef0 <DIO_enuSet_PinValue+0x5c>
     ee4:	2d 81       	ldd	r18, Y+5	; 0x05
     ee6:	3e 81       	ldd	r19, Y+6	; 0x06
     ee8:	21 15       	cp	r18, r1
     eea:	31 05       	cpc	r19, r1
     eec:	71 f0       	breq	.+28     	; 0xf0a <DIO_enuSet_PinValue+0x76>
     eee:	b0 c0       	rjmp	.+352    	; 0x1050 <DIO_enuSet_PinValue+0x1bc>
     ef0:	6d 81       	ldd	r22, Y+5	; 0x05
     ef2:	7e 81       	ldd	r23, Y+6	; 0x06
     ef4:	62 30       	cpi	r22, 0x02	; 2
     ef6:	71 05       	cpc	r23, r1
     ef8:	09 f4       	brne	.+2      	; 0xefc <DIO_enuSet_PinValue+0x68>
     efa:	59 c0       	rjmp	.+178    	; 0xfae <DIO_enuSet_PinValue+0x11a>
     efc:	8d 81       	ldd	r24, Y+5	; 0x05
     efe:	9e 81       	ldd	r25, Y+6	; 0x06
     f00:	83 30       	cpi	r24, 0x03	; 3
     f02:	91 05       	cpc	r25, r1
     f04:	09 f4       	brne	.+2      	; 0xf08 <DIO_enuSet_PinValue+0x74>
     f06:	7c c0       	rjmp	.+248    	; 0x1000 <DIO_enuSet_PinValue+0x16c>
     f08:	a3 c0       	rjmp	.+326    	; 0x1050 <DIO_enuSet_PinValue+0x1bc>
		{
		case(DIO_PORTA):
					PORTA&=~(DIO_BIT_MUSK<<copy_u8PinId);
     f0a:	ab e3       	ldi	r26, 0x3B	; 59
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	eb e3       	ldi	r30, 0x3B	; 59
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	48 2f       	mov	r20, r24
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <DIO_enuSet_PinValue+0x92>
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	2a 95       	dec	r18
     f28:	e2 f7       	brpl	.-8      	; 0xf22 <DIO_enuSet_PinValue+0x8e>
     f2a:	80 95       	com	r24
     f2c:	84 23       	and	r24, r20
     f2e:	8c 93       	st	X, r24
		PORTA|=(copy_u8PinValue<<copy_u8PinId);
     f30:	ab e3       	ldi	r26, 0x3B	; 59
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	eb e3       	ldi	r30, 0x3B	; 59
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	48 2f       	mov	r20, r24
     f3c:	8c 81       	ldd	r24, Y+4	; 0x04
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	88 2f       	mov	r24, r24
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	b9 01       	movw	r22, r18
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <DIO_enuSet_PinValue+0xbc>
     f4c:	66 0f       	add	r22, r22
     f4e:	77 1f       	adc	r23, r23
     f50:	8a 95       	dec	r24
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <DIO_enuSet_PinValue+0xb8>
     f54:	cb 01       	movw	r24, r22
     f56:	84 2b       	or	r24, r20
     f58:	8c 93       	st	X, r24
     f5a:	7a c0       	rjmp	.+244    	; 0x1050 <DIO_enuSet_PinValue+0x1bc>
		break;
		case(DIO_PORTB):
					PORTB&=~(DIO_BIT_MUSK<<copy_u8PinId);
     f5c:	a8 e3       	ldi	r26, 0x38	; 56
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e8 e3       	ldi	r30, 0x38	; 56
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	48 2f       	mov	r20, r24
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <DIO_enuSet_PinValue+0xe4>
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	2a 95       	dec	r18
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <DIO_enuSet_PinValue+0xe0>
     f7c:	80 95       	com	r24
     f7e:	84 23       	and	r24, r20
     f80:	8c 93       	st	X, r24
		PORTB|=(copy_u8PinValue<<copy_u8PinId);
     f82:	a8 e3       	ldi	r26, 0x38	; 56
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e8 e3       	ldi	r30, 0x38	; 56
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	48 2f       	mov	r20, r24
     f8e:	8c 81       	ldd	r24, Y+4	; 0x04
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	88 2f       	mov	r24, r24
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	b9 01       	movw	r22, r18
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <DIO_enuSet_PinValue+0x10e>
     f9e:	66 0f       	add	r22, r22
     fa0:	77 1f       	adc	r23, r23
     fa2:	8a 95       	dec	r24
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <DIO_enuSet_PinValue+0x10a>
     fa6:	cb 01       	movw	r24, r22
     fa8:	84 2b       	or	r24, r20
     faa:	8c 93       	st	X, r24
     fac:	51 c0       	rjmp	.+162    	; 0x1050 <DIO_enuSet_PinValue+0x1bc>
		break;
		case(DIO_PORTC):
					PORTC&=~(DIO_BIT_MUSK<<copy_u8PinId);
     fae:	a5 e3       	ldi	r26, 0x35	; 53
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e5 e3       	ldi	r30, 0x35	; 53
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	48 2f       	mov	r20, r24
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <DIO_enuSet_PinValue+0x136>
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	2a 95       	dec	r18
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <DIO_enuSet_PinValue+0x132>
     fce:	80 95       	com	r24
     fd0:	84 23       	and	r24, r20
     fd2:	8c 93       	st	X, r24
		PORTC|=(copy_u8PinValue<<copy_u8PinId);
     fd4:	a5 e3       	ldi	r26, 0x35	; 53
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e5 e3       	ldi	r30, 0x35	; 53
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	48 2f       	mov	r20, r24
     fe0:	8c 81       	ldd	r24, Y+4	; 0x04
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	88 2f       	mov	r24, r24
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	b9 01       	movw	r22, r18
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <DIO_enuSet_PinValue+0x160>
     ff0:	66 0f       	add	r22, r22
     ff2:	77 1f       	adc	r23, r23
     ff4:	8a 95       	dec	r24
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <DIO_enuSet_PinValue+0x15c>
     ff8:	cb 01       	movw	r24, r22
     ffa:	84 2b       	or	r24, r20
     ffc:	8c 93       	st	X, r24
     ffe:	28 c0       	rjmp	.+80     	; 0x1050 <DIO_enuSet_PinValue+0x1bc>
		break;
		case(DIO_PORTD):
					PORTD&=~(DIO_BIT_MUSK<<copy_u8PinId);
    1000:	a2 e3       	ldi	r26, 0x32	; 50
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e2 e3       	ldi	r30, 0x32	; 50
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 c0       	rjmp	.+4      	; 0x101c <DIO_enuSet_PinValue+0x188>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	2a 95       	dec	r18
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <DIO_enuSet_PinValue+0x184>
    1020:	80 95       	com	r24
    1022:	84 23       	and	r24, r20
    1024:	8c 93       	st	X, r24
		PORTD|=(copy_u8PinValue<<copy_u8PinId);
    1026:	a2 e3       	ldi	r26, 0x32	; 50
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e2 e3       	ldi	r30, 0x32	; 50
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8c 81       	ldd	r24, Y+4	; 0x04
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	88 2f       	mov	r24, r24
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	b9 01       	movw	r22, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <DIO_enuSet_PinValue+0x1b2>
    1042:	66 0f       	add	r22, r22
    1044:	77 1f       	adc	r23, r23
    1046:	8a 95       	dec	r24
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <DIO_enuSet_PinValue+0x1ae>
    104a:	cb 01       	movw	r24, r22
    104c:	84 2b       	or	r24, r20
    104e:	8c 93       	st	X, r24
		break;
		}
		Local_enuErrorState=ES_OK;
    1050:	19 82       	std	Y+1, r1	; 0x01
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <DIO_enuSet_PinValue+0x1c4>
	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
    1054:	83 e0       	ldi	r24, 0x03	; 3
    1056:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    1058:	89 81       	ldd	r24, Y+1	; 0x01
}
    105a:	26 96       	adiw	r28, 0x06	; 6
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
    1066:	cf 91       	pop	r28
    1068:	df 91       	pop	r29
    106a:	08 95       	ret

0000106c <DIO_enuSet_PinDirection>:

ES_t DIO_enuSet_PinDirection(u8 copy_u8PortId,u8 copy_u8PinId,u8 copy_u8PinValue)

{
    106c:	df 93       	push	r29
    106e:	cf 93       	push	r28
    1070:	00 d0       	rcall	.+0      	; 0x1072 <DIO_enuSet_PinDirection+0x6>
    1072:	00 d0       	rcall	.+0      	; 0x1074 <DIO_enuSet_PinDirection+0x8>
    1074:	00 d0       	rcall	.+0      	; 0x1076 <DIO_enuSet_PinDirection+0xa>
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
    107a:	8a 83       	std	Y+2, r24	; 0x02
    107c:	6b 83       	std	Y+3, r22	; 0x03
    107e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8PortId <= DIO_PORTD && copy_u8PinId <= DIO_PIN7 && copy_u8PinValue <= OUTPUT)
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	84 30       	cpi	r24, 0x04	; 4
    1088:	08 f0       	brcs	.+2      	; 0x108c <DIO_enuSet_PinDirection+0x20>
    108a:	d0 c0       	rjmp	.+416    	; 0x122c <DIO_enuSet_PinDirection+0x1c0>
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	88 30       	cpi	r24, 0x08	; 8
    1090:	08 f0       	brcs	.+2      	; 0x1094 <DIO_enuSet_PinDirection+0x28>
    1092:	cc c0       	rjmp	.+408    	; 0x122c <DIO_enuSet_PinDirection+0x1c0>
    1094:	8c 81       	ldd	r24, Y+4	; 0x04
    1096:	82 30       	cpi	r24, 0x02	; 2
    1098:	08 f0       	brcs	.+2      	; 0x109c <DIO_enuSet_PinDirection+0x30>
    109a:	c8 c0       	rjmp	.+400    	; 0x122c <DIO_enuSet_PinDirection+0x1c0>
	{
		switch(copy_u8PortId)
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	3e 83       	std	Y+6, r19	; 0x06
    10a4:	2d 83       	std	Y+5, r18	; 0x05
    10a6:	6d 81       	ldd	r22, Y+5	; 0x05
    10a8:	7e 81       	ldd	r23, Y+6	; 0x06
    10aa:	61 30       	cpi	r22, 0x01	; 1
    10ac:	71 05       	cpc	r23, r1
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <DIO_enuSet_PinDirection+0x46>
    10b0:	41 c0       	rjmp	.+130    	; 0x1134 <DIO_enuSet_PinDirection+0xc8>
    10b2:	8d 81       	ldd	r24, Y+5	; 0x05
    10b4:	9e 81       	ldd	r25, Y+6	; 0x06
    10b6:	82 30       	cpi	r24, 0x02	; 2
    10b8:	91 05       	cpc	r25, r1
    10ba:	34 f4       	brge	.+12     	; 0x10c8 <DIO_enuSet_PinDirection+0x5c>
    10bc:	2d 81       	ldd	r18, Y+5	; 0x05
    10be:	3e 81       	ldd	r19, Y+6	; 0x06
    10c0:	21 15       	cp	r18, r1
    10c2:	31 05       	cpc	r19, r1
    10c4:	71 f0       	breq	.+28     	; 0x10e2 <DIO_enuSet_PinDirection+0x76>
    10c6:	b0 c0       	rjmp	.+352    	; 0x1228 <DIO_enuSet_PinDirection+0x1bc>
    10c8:	6d 81       	ldd	r22, Y+5	; 0x05
    10ca:	7e 81       	ldd	r23, Y+6	; 0x06
    10cc:	62 30       	cpi	r22, 0x02	; 2
    10ce:	71 05       	cpc	r23, r1
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <DIO_enuSet_PinDirection+0x68>
    10d2:	59 c0       	rjmp	.+178    	; 0x1186 <DIO_enuSet_PinDirection+0x11a>
    10d4:	8d 81       	ldd	r24, Y+5	; 0x05
    10d6:	9e 81       	ldd	r25, Y+6	; 0x06
    10d8:	83 30       	cpi	r24, 0x03	; 3
    10da:	91 05       	cpc	r25, r1
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <DIO_enuSet_PinDirection+0x74>
    10de:	7c c0       	rjmp	.+248    	; 0x11d8 <DIO_enuSet_PinDirection+0x16c>
    10e0:	a3 c0       	rjmp	.+326    	; 0x1228 <DIO_enuSet_PinDirection+0x1bc>
		{
		case(DIO_PORTA):
						DDRA&=~(DIO_BIT_MUSK<<copy_u8PinId);
    10e2:	aa e3       	ldi	r26, 0x3A	; 58
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	ea e3       	ldi	r30, 0x3A	; 58
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <DIO_enuSet_PinDirection+0x92>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	2a 95       	dec	r18
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <DIO_enuSet_PinDirection+0x8e>
    1102:	80 95       	com	r24
    1104:	84 23       	and	r24, r20
    1106:	8c 93       	st	X, r24
		DDRA|=(copy_u8PinValue<<copy_u8PinId);
    1108:	aa e3       	ldi	r26, 0x3A	; 58
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	ea e3       	ldi	r30, 0x3A	; 58
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	48 2f       	mov	r20, r24
    1114:	8c 81       	ldd	r24, Y+4	; 0x04
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	88 2f       	mov	r24, r24
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	b9 01       	movw	r22, r18
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <DIO_enuSet_PinDirection+0xbc>
    1124:	66 0f       	add	r22, r22
    1126:	77 1f       	adc	r23, r23
    1128:	8a 95       	dec	r24
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <DIO_enuSet_PinDirection+0xb8>
    112c:	cb 01       	movw	r24, r22
    112e:	84 2b       	or	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	7a c0       	rjmp	.+244    	; 0x1228 <DIO_enuSet_PinDirection+0x1bc>
		break;
		case(DIO_PORTB):
						DDRB&=~(DIO_BIT_MUSK<<copy_u8PinId);
    1134:	a7 e3       	ldi	r26, 0x37	; 55
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e7 e3       	ldi	r30, 0x37	; 55
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <DIO_enuSet_PinDirection+0xe4>
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	2a 95       	dec	r18
    1152:	e2 f7       	brpl	.-8      	; 0x114c <DIO_enuSet_PinDirection+0xe0>
    1154:	80 95       	com	r24
    1156:	84 23       	and	r24, r20
    1158:	8c 93       	st	X, r24
		DDRB|=(copy_u8PinValue<<copy_u8PinId);
    115a:	a7 e3       	ldi	r26, 0x37	; 55
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e7 e3       	ldi	r30, 0x37	; 55
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	48 2f       	mov	r20, r24
    1166:	8c 81       	ldd	r24, Y+4	; 0x04
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	88 2f       	mov	r24, r24
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	b9 01       	movw	r22, r18
    1174:	02 c0       	rjmp	.+4      	; 0x117a <DIO_enuSet_PinDirection+0x10e>
    1176:	66 0f       	add	r22, r22
    1178:	77 1f       	adc	r23, r23
    117a:	8a 95       	dec	r24
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <DIO_enuSet_PinDirection+0x10a>
    117e:	cb 01       	movw	r24, r22
    1180:	84 2b       	or	r24, r20
    1182:	8c 93       	st	X, r24
    1184:	51 c0       	rjmp	.+162    	; 0x1228 <DIO_enuSet_PinDirection+0x1bc>
		break;
		case(DIO_PORTC):
						DDRC&=~(DIO_BIT_MUSK<<copy_u8PinId);
    1186:	a4 e3       	ldi	r26, 0x34	; 52
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e4 e3       	ldi	r30, 0x34	; 52
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <DIO_enuSet_PinDirection+0x136>
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	2a 95       	dec	r18
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <DIO_enuSet_PinDirection+0x132>
    11a6:	80 95       	com	r24
    11a8:	84 23       	and	r24, r20
    11aa:	8c 93       	st	X, r24
		DDRC|=(copy_u8PinValue<<copy_u8PinId);
    11ac:	a4 e3       	ldi	r26, 0x34	; 52
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e4 e3       	ldi	r30, 0x34	; 52
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	48 2f       	mov	r20, r24
    11b8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	88 2f       	mov	r24, r24
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	b9 01       	movw	r22, r18
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <DIO_enuSet_PinDirection+0x160>
    11c8:	66 0f       	add	r22, r22
    11ca:	77 1f       	adc	r23, r23
    11cc:	8a 95       	dec	r24
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <DIO_enuSet_PinDirection+0x15c>
    11d0:	cb 01       	movw	r24, r22
    11d2:	84 2b       	or	r24, r20
    11d4:	8c 93       	st	X, r24
    11d6:	28 c0       	rjmp	.+80     	; 0x1228 <DIO_enuSet_PinDirection+0x1bc>
		break;
		case(DIO_PORTD):
						DDRD&=~(DIO_BIT_MUSK<<copy_u8PinId);
    11d8:	a1 e3       	ldi	r26, 0x31	; 49
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e1 e3       	ldi	r30, 0x31	; 49
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	48 2f       	mov	r20, r24
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <DIO_enuSet_PinDirection+0x188>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	2a 95       	dec	r18
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <DIO_enuSet_PinDirection+0x184>
    11f8:	80 95       	com	r24
    11fa:	84 23       	and	r24, r20
    11fc:	8c 93       	st	X, r24
		DDRD|=(copy_u8PinValue<<copy_u8PinId);
    11fe:	a1 e3       	ldi	r26, 0x31	; 49
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e1 e3       	ldi	r30, 0x31	; 49
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	48 2f       	mov	r20, r24
    120a:	8c 81       	ldd	r24, Y+4	; 0x04
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	88 2f       	mov	r24, r24
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	b9 01       	movw	r22, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <DIO_enuSet_PinDirection+0x1b2>
    121a:	66 0f       	add	r22, r22
    121c:	77 1f       	adc	r23, r23
    121e:	8a 95       	dec	r24
    1220:	e2 f7       	brpl	.-8      	; 0x121a <DIO_enuSet_PinDirection+0x1ae>
    1222:	cb 01       	movw	r24, r22
    1224:	84 2b       	or	r24, r20
    1226:	8c 93       	st	X, r24
		break;
		}
		Local_enuErrorState=ES_OK;
    1228:	19 82       	std	Y+1, r1	; 0x01
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <DIO_enuSet_PinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
    122c:	83 e0       	ldi	r24, 0x03	; 3
    122e:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    1230:	89 81       	ldd	r24, Y+1	; 0x01
}
    1232:	26 96       	adiw	r28, 0x06	; 6
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <DIO_enuget_PinValue>:

ES_t DIO_enuget_PinValue(u8 copy_u8PortId,u8 copy_u8PinId,u8 *copy_pu8PinValue)

{
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	27 97       	sbiw	r28, 0x07	; 7
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	8a 83       	std	Y+2, r24	; 0x02
    125a:	6b 83       	std	Y+3, r22	; 0x03
    125c:	5d 83       	std	Y+5, r21	; 0x05
    125e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	89 83       	std	Y+1, r24	; 0x01
	if(copy_pu8PinValue!=NULL){
    1264:	8c 81       	ldd	r24, Y+4	; 0x04
    1266:	9d 81       	ldd	r25, Y+5	; 0x05
    1268:	00 97       	sbiw	r24, 0x00	; 0
    126a:	09 f4       	brne	.+2      	; 0x126e <DIO_enuget_PinValue+0x2a>
    126c:	7d c0       	rjmp	.+250    	; 0x1368 <DIO_enuget_PinValue+0x124>
		if(copy_u8PortId <= DIO_PORTD && copy_u8PinId <= DIO_PIN7 )
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	84 30       	cpi	r24, 0x04	; 4
    1272:	08 f0       	brcs	.+2      	; 0x1276 <DIO_enuget_PinValue+0x32>
    1274:	76 c0       	rjmp	.+236    	; 0x1362 <DIO_enuget_PinValue+0x11e>
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	88 30       	cpi	r24, 0x08	; 8
    127a:	08 f0       	brcs	.+2      	; 0x127e <DIO_enuget_PinValue+0x3a>
    127c:	72 c0       	rjmp	.+228    	; 0x1362 <DIO_enuget_PinValue+0x11e>
		{
			switch(copy_u8PortId)
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	3f 83       	std	Y+7, r19	; 0x07
    1286:	2e 83       	std	Y+6, r18	; 0x06
    1288:	4e 81       	ldd	r20, Y+6	; 0x06
    128a:	5f 81       	ldd	r21, Y+7	; 0x07
    128c:	41 30       	cpi	r20, 0x01	; 1
    128e:	51 05       	cpc	r21, r1
    1290:	59 f1       	breq	.+86     	; 0x12e8 <DIO_enuget_PinValue+0xa4>
    1292:	8e 81       	ldd	r24, Y+6	; 0x06
    1294:	9f 81       	ldd	r25, Y+7	; 0x07
    1296:	82 30       	cpi	r24, 0x02	; 2
    1298:	91 05       	cpc	r25, r1
    129a:	34 f4       	brge	.+12     	; 0x12a8 <DIO_enuget_PinValue+0x64>
    129c:	2e 81       	ldd	r18, Y+6	; 0x06
    129e:	3f 81       	ldd	r19, Y+7	; 0x07
    12a0:	21 15       	cp	r18, r1
    12a2:	31 05       	cpc	r19, r1
    12a4:	69 f0       	breq	.+26     	; 0x12c0 <DIO_enuget_PinValue+0x7c>
    12a6:	5b c0       	rjmp	.+182    	; 0x135e <DIO_enuget_PinValue+0x11a>
    12a8:	4e 81       	ldd	r20, Y+6	; 0x06
    12aa:	5f 81       	ldd	r21, Y+7	; 0x07
    12ac:	42 30       	cpi	r20, 0x02	; 2
    12ae:	51 05       	cpc	r21, r1
    12b0:	79 f1       	breq	.+94     	; 0x1310 <DIO_enuget_PinValue+0xcc>
    12b2:	8e 81       	ldd	r24, Y+6	; 0x06
    12b4:	9f 81       	ldd	r25, Y+7	; 0x07
    12b6:	83 30       	cpi	r24, 0x03	; 3
    12b8:	91 05       	cpc	r25, r1
    12ba:	09 f4       	brne	.+2      	; 0x12be <DIO_enuget_PinValue+0x7a>
    12bc:	3d c0       	rjmp	.+122    	; 0x1338 <DIO_enuget_PinValue+0xf4>
    12be:	4f c0       	rjmp	.+158    	; 0x135e <DIO_enuget_PinValue+0x11a>
			{
			case(DIO_PORTA):
					*copy_pu8PinValue=((PINA>>copy_u8PinId)&DIO_BIT_MUSK);
    12c0:	e9 e3       	ldi	r30, 0x39	; 57
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	88 2f       	mov	r24, r24
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	a9 01       	movw	r20, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <DIO_enuget_PinValue+0x94>
    12d4:	55 95       	asr	r21
    12d6:	47 95       	ror	r20
    12d8:	8a 95       	dec	r24
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <DIO_enuget_PinValue+0x90>
    12dc:	ca 01       	movw	r24, r20
    12de:	81 70       	andi	r24, 0x01	; 1
    12e0:	ec 81       	ldd	r30, Y+4	; 0x04
    12e2:	fd 81       	ldd	r31, Y+5	; 0x05
    12e4:	80 83       	st	Z, r24
    12e6:	3b c0       	rjmp	.+118    	; 0x135e <DIO_enuget_PinValue+0x11a>
			break;
			case(DIO_PORTB):
					*copy_pu8PinValue=((PINB>>copy_u8PinId)&DIO_BIT_MUSK);
    12e8:	e6 e3       	ldi	r30, 0x36	; 54
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	88 2f       	mov	r24, r24
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	a9 01       	movw	r20, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <DIO_enuget_PinValue+0xbc>
    12fc:	55 95       	asr	r21
    12fe:	47 95       	ror	r20
    1300:	8a 95       	dec	r24
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <DIO_enuget_PinValue+0xb8>
    1304:	ca 01       	movw	r24, r20
    1306:	81 70       	andi	r24, 0x01	; 1
    1308:	ec 81       	ldd	r30, Y+4	; 0x04
    130a:	fd 81       	ldd	r31, Y+5	; 0x05
    130c:	80 83       	st	Z, r24
    130e:	27 c0       	rjmp	.+78     	; 0x135e <DIO_enuget_PinValue+0x11a>
			break;
			case(DIO_PORTC):
					*copy_pu8PinValue=((PINC>>copy_u8PinId)&DIO_BIT_MUSK);
    1310:	e3 e3       	ldi	r30, 0x33	; 51
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	88 2f       	mov	r24, r24
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	a9 01       	movw	r20, r18
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <DIO_enuget_PinValue+0xe4>
    1324:	55 95       	asr	r21
    1326:	47 95       	ror	r20
    1328:	8a 95       	dec	r24
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <DIO_enuget_PinValue+0xe0>
    132c:	ca 01       	movw	r24, r20
    132e:	81 70       	andi	r24, 0x01	; 1
    1330:	ec 81       	ldd	r30, Y+4	; 0x04
    1332:	fd 81       	ldd	r31, Y+5	; 0x05
    1334:	80 83       	st	Z, r24
    1336:	13 c0       	rjmp	.+38     	; 0x135e <DIO_enuget_PinValue+0x11a>
			break;
			case(DIO_PORTD):
					*copy_pu8PinValue=((PIND>>copy_u8PinId)&DIO_BIT_MUSK);
    1338:	e0 e3       	ldi	r30, 0x30	; 48
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	88 2f       	mov	r24, r24
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	a9 01       	movw	r20, r18
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <DIO_enuget_PinValue+0x10c>
    134c:	55 95       	asr	r21
    134e:	47 95       	ror	r20
    1350:	8a 95       	dec	r24
    1352:	e2 f7       	brpl	.-8      	; 0x134c <DIO_enuget_PinValue+0x108>
    1354:	ca 01       	movw	r24, r20
    1356:	81 70       	andi	r24, 0x01	; 1
    1358:	ec 81       	ldd	r30, Y+4	; 0x04
    135a:	fd 81       	ldd	r31, Y+5	; 0x05
    135c:	80 83       	st	Z, r24
			break;
			}
			Local_enuErrorState=ES_OK;
    135e:	19 82       	std	Y+1, r1	; 0x01
    1360:	05 c0       	rjmp	.+10     	; 0x136c <DIO_enuget_PinValue+0x128>
		}
		else
		{
			Local_enuErrorState=ES_OUT_OF_RANGE;
    1362:	83 e0       	ldi	r24, 0x03	; 3
    1364:	89 83       	std	Y+1, r24	; 0x01
    1366:	02 c0       	rjmp	.+4      	; 0x136c <DIO_enuget_PinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    1368:	82 e0       	ldi	r24, 0x02	; 2
    136a:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    136c:	89 81       	ldd	r24, Y+1	; 0x01
}
    136e:	27 96       	adiw	r28, 0x07	; 7
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	f8 94       	cli
    1374:	de bf       	out	0x3e, r29	; 62
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	cd bf       	out	0x3d, r28	; 61
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	08 95       	ret

00001380 <DIO_enuToggle_PinValue>:
ES_t DIO_enuToggle_PinValue(u8 copy_u8PortId,u8 copy_u8PinId)
{
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	00 d0       	rcall	.+0      	; 0x1386 <DIO_enuToggle_PinValue+0x6>
    1386:	00 d0       	rcall	.+0      	; 0x1388 <DIO_enuToggle_PinValue+0x8>
    1388:	0f 92       	push	r0
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	8a 83       	std	Y+2, r24	; 0x02
    1390:	6b 83       	std	Y+3, r22	; 0x03

	ES_t Local_enuErrorState = ES_NOK;
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8PortId <= DIO_PORTD && copy_u8PinId <= DIO_PIN7 )
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	84 30       	cpi	r24, 0x04	; 4
    139a:	08 f0       	brcs	.+2      	; 0x139e <DIO_enuToggle_PinValue+0x1e>
    139c:	74 c0       	rjmp	.+232    	; 0x1486 <DIO_enuToggle_PinValue+0x106>
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	88 30       	cpi	r24, 0x08	; 8
    13a2:	08 f0       	brcs	.+2      	; 0x13a6 <DIO_enuToggle_PinValue+0x26>
    13a4:	70 c0       	rjmp	.+224    	; 0x1486 <DIO_enuToggle_PinValue+0x106>
	{
		switch(copy_u8PortId)
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	3d 83       	std	Y+5, r19	; 0x05
    13ae:	2c 83       	std	Y+4, r18	; 0x04
    13b0:	8c 81       	ldd	r24, Y+4	; 0x04
    13b2:	9d 81       	ldd	r25, Y+5	; 0x05
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	91 05       	cpc	r25, r1
    13b8:	49 f1       	breq	.+82     	; 0x140c <DIO_enuToggle_PinValue+0x8c>
    13ba:	2c 81       	ldd	r18, Y+4	; 0x04
    13bc:	3d 81       	ldd	r19, Y+5	; 0x05
    13be:	22 30       	cpi	r18, 0x02	; 2
    13c0:	31 05       	cpc	r19, r1
    13c2:	2c f4       	brge	.+10     	; 0x13ce <DIO_enuToggle_PinValue+0x4e>
    13c4:	8c 81       	ldd	r24, Y+4	; 0x04
    13c6:	9d 81       	ldd	r25, Y+5	; 0x05
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	61 f0       	breq	.+24     	; 0x13e4 <DIO_enuToggle_PinValue+0x64>
    13cc:	5a c0       	rjmp	.+180    	; 0x1482 <DIO_enuToggle_PinValue+0x102>
    13ce:	2c 81       	ldd	r18, Y+4	; 0x04
    13d0:	3d 81       	ldd	r19, Y+5	; 0x05
    13d2:	22 30       	cpi	r18, 0x02	; 2
    13d4:	31 05       	cpc	r19, r1
    13d6:	71 f1       	breq	.+92     	; 0x1434 <DIO_enuToggle_PinValue+0xb4>
    13d8:	8c 81       	ldd	r24, Y+4	; 0x04
    13da:	9d 81       	ldd	r25, Y+5	; 0x05
    13dc:	83 30       	cpi	r24, 0x03	; 3
    13de:	91 05       	cpc	r25, r1
    13e0:	e9 f1       	breq	.+122    	; 0x145c <DIO_enuToggle_PinValue+0xdc>
    13e2:	4f c0       	rjmp	.+158    	; 0x1482 <DIO_enuToggle_PinValue+0x102>
		{
		case(DIO_PORTA):
				  PORTA^=(DIO_BIT_MUSK<<copy_u8PinId);
    13e4:	ab e3       	ldi	r26, 0x3B	; 59
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	eb e3       	ldi	r30, 0x3B	; 59
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	48 2f       	mov	r20, r24
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	02 2e       	mov	r0, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <DIO_enuToggle_PinValue+0x82>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	0a 94       	dec	r0
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <DIO_enuToggle_PinValue+0x7e>
    1406:	84 27       	eor	r24, r20
    1408:	8c 93       	st	X, r24
    140a:	3b c0       	rjmp	.+118    	; 0x1482 <DIO_enuToggle_PinValue+0x102>
		break;
		case(DIO_PORTB):
				 PORTB^=(DIO_BIT_MUSK<<copy_u8PinId);
    140c:	a8 e3       	ldi	r26, 0x38	; 56
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e8 e3       	ldi	r30, 0x38	; 56
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <DIO_enuToggle_PinValue+0xaa>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <DIO_enuToggle_PinValue+0xa6>
    142e:	84 27       	eor	r24, r20
    1430:	8c 93       	st	X, r24
    1432:	27 c0       	rjmp	.+78     	; 0x1482 <DIO_enuToggle_PinValue+0x102>
		break;
		case(DIO_PORTC):
				 PORTC^=(DIO_BIT_MUSK<<copy_u8PinId);
    1434:	a5 e3       	ldi	r26, 0x35	; 53
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e5 e3       	ldi	r30, 0x35	; 53
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	48 2f       	mov	r20, r24
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 2e       	mov	r0, r18
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <DIO_enuToggle_PinValue+0xd2>
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	0a 94       	dec	r0
    1454:	e2 f7       	brpl	.-8      	; 0x144e <DIO_enuToggle_PinValue+0xce>
    1456:	84 27       	eor	r24, r20
    1458:	8c 93       	st	X, r24
    145a:	13 c0       	rjmp	.+38     	; 0x1482 <DIO_enuToggle_PinValue+0x102>
		break;
		case(DIO_PORTD):
				 PORTD^=(DIO_BIT_MUSK<<copy_u8PinId);
    145c:	a2 e3       	ldi	r26, 0x32	; 50
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e2 e3       	ldi	r30, 0x32	; 50
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	48 2f       	mov	r20, r24
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	02 2e       	mov	r0, r18
    1474:	02 c0       	rjmp	.+4      	; 0x147a <DIO_enuToggle_PinValue+0xfa>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	0a 94       	dec	r0
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <DIO_enuToggle_PinValue+0xf6>
    147e:	84 27       	eor	r24, r20
    1480:	8c 93       	st	X, r24
		break;
		}
		Local_enuErrorState=ES_OK;
    1482:	19 82       	std	Y+1, r1	; 0x01
    1484:	02 c0       	rjmp	.+4      	; 0x148a <DIO_enuToggle_PinValue+0x10a>
	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
    1486:	83 e0       	ldi	r24, 0x03	; 3
    1488:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    148a:	89 81       	ldd	r24, Y+1	; 0x01
}
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	08 95       	ret

0000149c <Keypad_enuInit>:
#include "stdTypes.h"
#include "DIO_int.h"
#include "Keypad_config.h"
#include "Keypad_priv.h"
ES_t Keypad_enuInit(void)
{
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	0f 92       	push	r0
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSet_PinDirection(KPD_R1_PORT,KPD_R1_PIN, DIO_u8INPUT);
    14aa:	82 e0       	ldi	r24, 0x02	; 2
    14ac:	60 e0       	ldi	r22, 0x00	; 0
    14ae:	40 e0       	ldi	r20, 0x00	; 0
    14b0:	0e 94 36 08 	call	0x106c	; 0x106c <DIO_enuSet_PinDirection>
	DIO_enuSet_PinDirection(KPD_R2_PORT,KPD_R2_PIN, DIO_u8INPUT);
    14b4:	82 e0       	ldi	r24, 0x02	; 2
    14b6:	61 e0       	ldi	r22, 0x01	; 1
    14b8:	40 e0       	ldi	r20, 0x00	; 0
    14ba:	0e 94 36 08 	call	0x106c	; 0x106c <DIO_enuSet_PinDirection>
	DIO_enuSet_PinDirection(KPD_R3_PORT,KPD_R3_PIN, DIO_u8INPUT);
    14be:	82 e0       	ldi	r24, 0x02	; 2
    14c0:	62 e0       	ldi	r22, 0x02	; 2
    14c2:	40 e0       	ldi	r20, 0x00	; 0
    14c4:	0e 94 36 08 	call	0x106c	; 0x106c <DIO_enuSet_PinDirection>
	DIO_enuSet_PinDirection(KPD_R4_PORT,KPD_R4_PIN, DIO_u8INPUT);
    14c8:	82 e0       	ldi	r24, 0x02	; 2
    14ca:	63 e0       	ldi	r22, 0x03	; 3
    14cc:	40 e0       	ldi	r20, 0x00	; 0
    14ce:	0e 94 36 08 	call	0x106c	; 0x106c <DIO_enuSet_PinDirection>

	DIO_enuSet_PinDirection(KPD_C1_PORT,KPD_C1_PIN, DIO_u8OUTPUT);
    14d2:	83 e0       	ldi	r24, 0x03	; 3
    14d4:	60 e0       	ldi	r22, 0x00	; 0
    14d6:	41 e0       	ldi	r20, 0x01	; 1
    14d8:	0e 94 36 08 	call	0x106c	; 0x106c <DIO_enuSet_PinDirection>
	DIO_enuSet_PinDirection(KPD_C2_PORT,KPD_C2_PIN, DIO_u8OUTPUT);
    14dc:	83 e0       	ldi	r24, 0x03	; 3
    14de:	61 e0       	ldi	r22, 0x01	; 1
    14e0:	41 e0       	ldi	r20, 0x01	; 1
    14e2:	0e 94 36 08 	call	0x106c	; 0x106c <DIO_enuSet_PinDirection>
	DIO_enuSet_PinDirection(KPD_C3_PORT,KPD_C3_PIN, DIO_u8OUTPUT);
    14e6:	83 e0       	ldi	r24, 0x03	; 3
    14e8:	62 e0       	ldi	r22, 0x02	; 2
    14ea:	41 e0       	ldi	r20, 0x01	; 1
    14ec:	0e 94 36 08 	call	0x106c	; 0x106c <DIO_enuSet_PinDirection>
	DIO_enuSet_PinDirection(KPD_C4_PORT,KPD_C4_PIN, DIO_u8OUTPUT);
    14f0:	83 e0       	ldi	r24, 0x03	; 3
    14f2:	63 e0       	ldi	r22, 0x03	; 3
    14f4:	41 e0       	ldi	r20, 0x01	; 1
    14f6:	0e 94 36 08 	call	0x106c	; 0x106c <DIO_enuSet_PinDirection>

	DIO_enuSet_PinValue(KPD_R1_PORT,KPD_R1_PIN, DIO_u8PULLUP);
    14fa:	82 e0       	ldi	r24, 0x02	; 2
    14fc:	60 e0       	ldi	r22, 0x00	; 0
    14fe:	41 e0       	ldi	r20, 0x01	; 1
    1500:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(KPD_R2_PORT,KPD_R2_PIN, DIO_u8PULLUP);
    1504:	82 e0       	ldi	r24, 0x02	; 2
    1506:	61 e0       	ldi	r22, 0x01	; 1
    1508:	41 e0       	ldi	r20, 0x01	; 1
    150a:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(KPD_R3_PORT,KPD_R3_PIN, DIO_u8PULLUP);
    150e:	82 e0       	ldi	r24, 0x02	; 2
    1510:	62 e0       	ldi	r22, 0x02	; 2
    1512:	41 e0       	ldi	r20, 0x01	; 1
    1514:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(KPD_R4_PORT,KPD_R4_PIN, DIO_u8PULLUP);
    1518:	82 e0       	ldi	r24, 0x02	; 2
    151a:	63 e0       	ldi	r22, 0x03	; 3
    151c:	41 e0       	ldi	r20, 0x01	; 1
    151e:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>

	DIO_enuSet_PinValue(KPD_C1_PORT,KPD_C1_PIN, DIO_u8HIGH);
    1522:	83 e0       	ldi	r24, 0x03	; 3
    1524:	60 e0       	ldi	r22, 0x00	; 0
    1526:	41 e0       	ldi	r20, 0x01	; 1
    1528:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(KPD_C2_PORT,KPD_C2_PIN, DIO_u8HIGH);
    152c:	83 e0       	ldi	r24, 0x03	; 3
    152e:	61 e0       	ldi	r22, 0x01	; 1
    1530:	41 e0       	ldi	r20, 0x01	; 1
    1532:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(KPD_C3_PORT,KPD_C3_PIN, DIO_u8HIGH);
    1536:	83 e0       	ldi	r24, 0x03	; 3
    1538:	62 e0       	ldi	r22, 0x02	; 2
    153a:	41 e0       	ldi	r20, 0x01	; 1
    153c:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(KPD_C4_PORT,KPD_C4_PIN, DIO_u8HIGH);
    1540:	83 e0       	ldi	r24, 0x03	; 3
    1542:	63 e0       	ldi	r22, 0x03	; 3
    1544:	41 e0       	ldi	r20, 0x01	; 1
    1546:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>

	Local_enuErrorState=ES_OK;
    154a:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    154c:	89 81       	ldd	r24, Y+1	; 0x01
}
    154e:	0f 90       	pop	r0
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <Keypad_enuGetPressedKey>:


ES_t Keypad_enuGetPressedKey(u8 *Copy_u8pKPD_PrssedKey)
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	65 97       	sbiw	r28, 0x15	; 21
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	f8 94       	cli
    1564:	de bf       	out	0x3e, r29	; 62
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	cd bf       	out	0x3d, r28	; 61
    156a:	9c 8b       	std	Y+20, r25	; 0x14
    156c:	8b 8b       	std	Y+19, r24	; 0x13
	ES_t Local_enuErrorState=ES_NOK;
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	89 8b       	std	Y+17, r24	; 0x11
	if(Copy_u8pKPD_PrssedKey != NULL)
    1572:	8b 89       	ldd	r24, Y+19	; 0x13
    1574:	9c 89       	ldd	r25, Y+20	; 0x14
    1576:	00 97       	sbiw	r24, 0x00	; 0
    1578:	09 f4       	brne	.+2      	; 0x157c <Keypad_enuGetPressedKey+0x26>
    157a:	16 c1       	rjmp	.+556    	; 0x17a8 <Keypad_enuGetPressedKey+0x252>
		static u8 Local_u8StKPDRowArr_Port[Row_Num]=  {KPD_R1_PORT,KPD_R2_PORT,KPD_R3_PORT,KPD_R4_PORT};

		static u8 Local_u8StKPDColumArr_Pin[Col_Num]={KPD_C1_PIN,KPD_C2_PIN,KPD_C3_PIN,KPD_C4_PIN};
		static u8 Local_u8StKPDRowArr_Pin[Row_Num]=  {KPD_R1_PIN,KPD_R2_PIN,KPD_R3_PIN,KPD_R4_PIN};

		u8 Local_u8ColItre=0;
    157c:	18 8a       	std	Y+16, r1	; 0x10
		u8 Local_u8RowIter=0;
    157e:	1f 86       	std	Y+15, r1	; 0x0f
		u8 Local_u8PinState;
		*Copy_u8pKPD_PrssedKey=KPD_NotPress;
    1580:	eb 89       	ldd	r30, Y+19	; 0x13
    1582:	fc 89       	ldd	r31, Y+20	; 0x14
    1584:	8f ef       	ldi	r24, 0xFF	; 255
    1586:	80 83       	st	Z, r24



		for(Local_u8ColItre=0; Local_u8ColItre<Col_Num ; Local_u8ColItre++)
    1588:	18 8a       	std	Y+16, r1	; 0x10
    158a:	09 c1       	rjmp	.+530    	; 0x179e <Keypad_enuGetPressedKey+0x248>
		{
			DIO_enuSet_PinValue(Local_u8StKPDColumArr_Port[Local_u8ColItre],Local_u8StKPDColumArr_Pin[Local_u8ColItre],DIO_u8LOW);
    158c:	88 89       	ldd	r24, Y+16	; 0x10
    158e:	88 2f       	mov	r24, r24
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	fc 01       	movw	r30, r24
    1594:	e1 58       	subi	r30, 0x81	; 129
    1596:	ff 4f       	sbci	r31, 0xFF	; 255
    1598:	20 81       	ld	r18, Z
    159a:	88 89       	ldd	r24, Y+16	; 0x10
    159c:	88 2f       	mov	r24, r24
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	fc 01       	movw	r30, r24
    15a2:	e9 58       	subi	r30, 0x89	; 137
    15a4:	ff 4f       	sbci	r31, 0xFF	; 255
    15a6:	90 81       	ld	r25, Z
    15a8:	82 2f       	mov	r24, r18
    15aa:	69 2f       	mov	r22, r25
    15ac:	40 e0       	ldi	r20, 0x00	; 0
    15ae:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>

			for(Local_u8RowIter=0 ; Local_u8RowIter <Row_Num ; Local_u8RowIter++)
    15b2:	1f 86       	std	Y+15, r1	; 0x0f
    15b4:	da c0       	rjmp	.+436    	; 0x176a <Keypad_enuGetPressedKey+0x214>
			{
				DIO_enuget_PinValue(Local_u8StKPDRowArr_Port[Local_u8RowIter] ,Local_u8StKPDRowArr_Pin[Local_u8RowIter], &Local_u8PinState);
    15b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    15b8:	88 2f       	mov	r24, r24
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	fc 01       	movw	r30, r24
    15be:	e5 58       	subi	r30, 0x85	; 133
    15c0:	ff 4f       	sbci	r31, 0xFF	; 255
    15c2:	40 81       	ld	r20, Z
    15c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    15c6:	88 2f       	mov	r24, r24
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	fc 01       	movw	r30, r24
    15cc:	ed 58       	subi	r30, 0x8D	; 141
    15ce:	ff 4f       	sbci	r31, 0xFF	; 255
    15d0:	90 81       	ld	r25, Z
    15d2:	9e 01       	movw	r18, r28
    15d4:	2e 5e       	subi	r18, 0xEE	; 238
    15d6:	3f 4f       	sbci	r19, 0xFF	; 255
    15d8:	84 2f       	mov	r24, r20
    15da:	69 2f       	mov	r22, r25
    15dc:	a9 01       	movw	r20, r18
    15de:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_enuget_PinValue>
				if(!Local_u8PinState)
    15e2:	8a 89       	ldd	r24, Y+18	; 0x12
    15e4:	88 23       	and	r24, r24
    15e6:	09 f0       	breq	.+2      	; 0x15ea <Keypad_enuGetPressedKey+0x94>
    15e8:	bd c0       	rjmp	.+378    	; 0x1764 <Keypad_enuGetPressedKey+0x20e>
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	a0 e2       	ldi	r26, 0x20	; 32
    15f0:	b1 e4       	ldi	r27, 0x41	; 65
    15f2:	8b 87       	std	Y+11, r24	; 0x0b
    15f4:	9c 87       	std	Y+12, r25	; 0x0c
    15f6:	ad 87       	std	Y+13, r26	; 0x0d
    15f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    15fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    15fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1600:	9e 85       	ldd	r25, Y+14	; 0x0e
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	4a e7       	ldi	r20, 0x7A	; 122
    1608:	53 e4       	ldi	r21, 0x43	; 67
    160a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    160e:	dc 01       	movw	r26, r24
    1610:	cb 01       	movw	r24, r22
    1612:	8f 83       	std	Y+7, r24	; 0x07
    1614:	98 87       	std	Y+8, r25	; 0x08
    1616:	a9 87       	std	Y+9, r26	; 0x09
    1618:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    161a:	6f 81       	ldd	r22, Y+7	; 0x07
    161c:	78 85       	ldd	r23, Y+8	; 0x08
    161e:	89 85       	ldd	r24, Y+9	; 0x09
    1620:	9a 85       	ldd	r25, Y+10	; 0x0a
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	40 e8       	ldi	r20, 0x80	; 128
    1628:	5f e3       	ldi	r21, 0x3F	; 63
    162a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    162e:	88 23       	and	r24, r24
    1630:	2c f4       	brge	.+10     	; 0x163c <Keypad_enuGetPressedKey+0xe6>
		__ticks = 1;
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	9e 83       	std	Y+6, r25	; 0x06
    1638:	8d 83       	std	Y+5, r24	; 0x05
    163a:	3f c0       	rjmp	.+126    	; 0x16ba <Keypad_enuGetPressedKey+0x164>
	else if (__tmp > 65535)
    163c:	6f 81       	ldd	r22, Y+7	; 0x07
    163e:	78 85       	ldd	r23, Y+8	; 0x08
    1640:	89 85       	ldd	r24, Y+9	; 0x09
    1642:	9a 85       	ldd	r25, Y+10	; 0x0a
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	3f ef       	ldi	r19, 0xFF	; 255
    1648:	4f e7       	ldi	r20, 0x7F	; 127
    164a:	57 e4       	ldi	r21, 0x47	; 71
    164c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1650:	18 16       	cp	r1, r24
    1652:	4c f5       	brge	.+82     	; 0x16a6 <Keypad_enuGetPressedKey+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1654:	6b 85       	ldd	r22, Y+11	; 0x0b
    1656:	7c 85       	ldd	r23, Y+12	; 0x0c
    1658:	8d 85       	ldd	r24, Y+13	; 0x0d
    165a:	9e 85       	ldd	r25, Y+14	; 0x0e
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	40 e2       	ldi	r20, 0x20	; 32
    1662:	51 e4       	ldi	r21, 0x41	; 65
    1664:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	bc 01       	movw	r22, r24
    166e:	cd 01       	movw	r24, r26
    1670:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	9e 83       	std	Y+6, r25	; 0x06
    167a:	8d 83       	std	Y+5, r24	; 0x05
    167c:	0f c0       	rjmp	.+30     	; 0x169c <Keypad_enuGetPressedKey+0x146>
    167e:	89 e1       	ldi	r24, 0x19	; 25
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	9c 83       	std	Y+4, r25	; 0x04
    1684:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	9c 81       	ldd	r25, Y+4	; 0x04
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	f1 f7       	brne	.-4      	; 0x168a <Keypad_enuGetPressedKey+0x134>
    168e:	9c 83       	std	Y+4, r25	; 0x04
    1690:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1692:	8d 81       	ldd	r24, Y+5	; 0x05
    1694:	9e 81       	ldd	r25, Y+6	; 0x06
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	9e 83       	std	Y+6, r25	; 0x06
    169a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    169c:	8d 81       	ldd	r24, Y+5	; 0x05
    169e:	9e 81       	ldd	r25, Y+6	; 0x06
    16a0:	00 97       	sbiw	r24, 0x00	; 0
    16a2:	69 f7       	brne	.-38     	; 0x167e <Keypad_enuGetPressedKey+0x128>
    16a4:	14 c0       	rjmp	.+40     	; 0x16ce <Keypad_enuGetPressedKey+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a6:	6f 81       	ldd	r22, Y+7	; 0x07
    16a8:	78 85       	ldd	r23, Y+8	; 0x08
    16aa:	89 85       	ldd	r24, Y+9	; 0x09
    16ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	9e 83       	std	Y+6, r25	; 0x06
    16b8:	8d 83       	std	Y+5, r24	; 0x05
    16ba:	8d 81       	ldd	r24, Y+5	; 0x05
    16bc:	9e 81       	ldd	r25, Y+6	; 0x06
    16be:	9a 83       	std	Y+2, r25	; 0x02
    16c0:	89 83       	std	Y+1, r24	; 0x01
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	9a 81       	ldd	r25, Y+2	; 0x02
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	f1 f7       	brne	.-4      	; 0x16c6 <Keypad_enuGetPressedKey+0x170>
    16ca:	9a 83       	std	Y+2, r25	; 0x02
    16cc:	89 83       	std	Y+1, r24	; 0x01
				{
					_delay_ms(10);
					DIO_enuget_PinValue(Local_u8StKPDRowArr_Port[Local_u8RowIter] ,Local_u8StKPDRowArr_Pin[Local_u8RowIter], &Local_u8PinState);
    16ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    16d0:	88 2f       	mov	r24, r24
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	fc 01       	movw	r30, r24
    16d6:	e5 58       	subi	r30, 0x85	; 133
    16d8:	ff 4f       	sbci	r31, 0xFF	; 255
    16da:	40 81       	ld	r20, Z
    16dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    16de:	88 2f       	mov	r24, r24
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	fc 01       	movw	r30, r24
    16e4:	ed 58       	subi	r30, 0x8D	; 141
    16e6:	ff 4f       	sbci	r31, 0xFF	; 255
    16e8:	90 81       	ld	r25, Z
    16ea:	9e 01       	movw	r18, r28
    16ec:	2e 5e       	subi	r18, 0xEE	; 238
    16ee:	3f 4f       	sbci	r19, 0xFF	; 255
    16f0:	84 2f       	mov	r24, r20
    16f2:	69 2f       	mov	r22, r25
    16f4:	a9 01       	movw	r20, r18
    16f6:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_enuget_PinValue>
					if(!Local_u8PinState)
    16fa:	8a 89       	ldd	r24, Y+18	; 0x12
    16fc:	88 23       	and	r24, r24
    16fe:	91 f5       	brne	.+100    	; 0x1764 <Keypad_enuGetPressedKey+0x20e>
    1700:	16 c0       	rjmp	.+44     	; 0x172e <Keypad_enuGetPressedKey+0x1d8>
					{
						while(! Local_u8PinState)
						{
							DIO_enuget_PinValue(Local_u8StKPDRowArr_Port[Local_u8RowIter] ,Local_u8StKPDRowArr_Pin[Local_u8RowIter], &Local_u8PinState);
    1702:	8f 85       	ldd	r24, Y+15	; 0x0f
    1704:	88 2f       	mov	r24, r24
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	fc 01       	movw	r30, r24
    170a:	e5 58       	subi	r30, 0x85	; 133
    170c:	ff 4f       	sbci	r31, 0xFF	; 255
    170e:	40 81       	ld	r20, Z
    1710:	8f 85       	ldd	r24, Y+15	; 0x0f
    1712:	88 2f       	mov	r24, r24
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	fc 01       	movw	r30, r24
    1718:	ed 58       	subi	r30, 0x8D	; 141
    171a:	ff 4f       	sbci	r31, 0xFF	; 255
    171c:	90 81       	ld	r25, Z
    171e:	9e 01       	movw	r18, r28
    1720:	2e 5e       	subi	r18, 0xEE	; 238
    1722:	3f 4f       	sbci	r19, 0xFF	; 255
    1724:	84 2f       	mov	r24, r20
    1726:	69 2f       	mov	r22, r25
    1728:	a9 01       	movw	r20, r18
    172a:	0e 94 22 09 	call	0x1244	; 0x1244 <DIO_enuget_PinValue>
				{
					_delay_ms(10);
					DIO_enuget_PinValue(Local_u8StKPDRowArr_Port[Local_u8RowIter] ,Local_u8StKPDRowArr_Pin[Local_u8RowIter], &Local_u8PinState);
					if(!Local_u8PinState)
					{
						while(! Local_u8PinState)
    172e:	8a 89       	ldd	r24, Y+18	; 0x12
    1730:	88 23       	and	r24, r24
    1732:	39 f3       	breq	.-50     	; 0x1702 <Keypad_enuGetPressedKey+0x1ac>
						{
							DIO_enuget_PinValue(Local_u8StKPDRowArr_Port[Local_u8RowIter] ,Local_u8StKPDRowArr_Pin[Local_u8RowIter], &Local_u8PinState);
						}

						*Copy_u8pKPD_PrssedKey=Local_u8StKPDArr[Local_u8RowIter][Local_u8ColItre];
    1734:	8f 85       	ldd	r24, Y+15	; 0x0f
    1736:	48 2f       	mov	r20, r24
    1738:	50 e0       	ldi	r21, 0x00	; 0
    173a:	88 89       	ldd	r24, Y+16	; 0x10
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	ca 01       	movw	r24, r20
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	82 0f       	add	r24, r18
    174c:	93 1f       	adc	r25, r19
    174e:	fc 01       	movw	r30, r24
    1750:	ed 57       	subi	r30, 0x7D	; 125
    1752:	ff 4f       	sbci	r31, 0xFF	; 255
    1754:	80 81       	ld	r24, Z
    1756:	eb 89       	ldd	r30, Y+19	; 0x13
    1758:	fc 89       	ldd	r31, Y+20	; 0x14
    175a:	80 83       	st	Z, r24
						return Local_enuErrorState=ES_OK;
    175c:	19 8a       	std	Y+17, r1	; 0x11
    175e:	89 89       	ldd	r24, Y+17	; 0x11
    1760:	8d 8b       	std	Y+21, r24	; 0x15
    1762:	26 c0       	rjmp	.+76     	; 0x17b0 <Keypad_enuGetPressedKey+0x25a>

		for(Local_u8ColItre=0; Local_u8ColItre<Col_Num ; Local_u8ColItre++)
		{
			DIO_enuSet_PinValue(Local_u8StKPDColumArr_Port[Local_u8ColItre],Local_u8StKPDColumArr_Pin[Local_u8ColItre],DIO_u8LOW);

			for(Local_u8RowIter=0 ; Local_u8RowIter <Row_Num ; Local_u8RowIter++)
    1764:	8f 85       	ldd	r24, Y+15	; 0x0f
    1766:	8f 5f       	subi	r24, 0xFF	; 255
    1768:	8f 87       	std	Y+15, r24	; 0x0f
    176a:	8f 85       	ldd	r24, Y+15	; 0x0f
    176c:	84 30       	cpi	r24, 0x04	; 4
    176e:	08 f4       	brcc	.+2      	; 0x1772 <Keypad_enuGetPressedKey+0x21c>
    1770:	22 cf       	rjmp	.-444    	; 0x15b6 <Keypad_enuGetPressedKey+0x60>
					}

				}

			}
			DIO_enuSet_PinValue(Local_u8StKPDColumArr_Port[Local_u8ColItre],Local_u8StKPDColumArr_Pin[Local_u8ColItre],DIO_u8HIGH);
    1772:	88 89       	ldd	r24, Y+16	; 0x10
    1774:	88 2f       	mov	r24, r24
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	fc 01       	movw	r30, r24
    177a:	e1 58       	subi	r30, 0x81	; 129
    177c:	ff 4f       	sbci	r31, 0xFF	; 255
    177e:	20 81       	ld	r18, Z
    1780:	88 89       	ldd	r24, Y+16	; 0x10
    1782:	88 2f       	mov	r24, r24
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	fc 01       	movw	r30, r24
    1788:	e9 58       	subi	r30, 0x89	; 137
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	90 81       	ld	r25, Z
    178e:	82 2f       	mov	r24, r18
    1790:	69 2f       	mov	r22, r25
    1792:	41 e0       	ldi	r20, 0x01	; 1
    1794:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
		u8 Local_u8PinState;
		*Copy_u8pKPD_PrssedKey=KPD_NotPress;



		for(Local_u8ColItre=0; Local_u8ColItre<Col_Num ; Local_u8ColItre++)
    1798:	88 89       	ldd	r24, Y+16	; 0x10
    179a:	8f 5f       	subi	r24, 0xFF	; 255
    179c:	88 8b       	std	Y+16, r24	; 0x10
    179e:	88 89       	ldd	r24, Y+16	; 0x10
    17a0:	84 30       	cpi	r24, 0x04	; 4
    17a2:	08 f4       	brcc	.+2      	; 0x17a6 <Keypad_enuGetPressedKey+0x250>
    17a4:	f3 ce       	rjmp	.-538    	; 0x158c <Keypad_enuGetPressedKey+0x36>
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <Keypad_enuGetPressedKey+0x256>

		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    17a8:	82 e0       	ldi	r24, 0x02	; 2
    17aa:	89 8b       	std	Y+17, r24	; 0x11
	}


	return Local_enuErrorState;
    17ac:	89 89       	ldd	r24, Y+17	; 0x11
    17ae:	8d 8b       	std	Y+21, r24	; 0x15
    17b0:	8d 89       	ldd	r24, Y+21	; 0x15
}
    17b2:	65 96       	adiw	r28, 0x15	; 21
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	f8 94       	cli
    17b8:	de bf       	out	0x3e, r29	; 62
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	cd bf       	out	0x3d, r28	; 61
    17be:	cf 91       	pop	r28
    17c0:	df 91       	pop	r29
    17c2:	08 95       	ret

000017c4 <LCD_enuInit>:

#include "util/delay.h"


ES_t LCD_enuInit(void)
{
    17c4:	0f 93       	push	r16
    17c6:	1f 93       	push	r17
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	c5 55       	subi	r28, 0x55	; 85
    17d2:	d0 40       	sbci	r29, 0x00	; 0
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	de bf       	out	0x3e, r29	; 62
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_errorState=ES_NOK;
    17de:	fe 01       	movw	r30, r28
    17e0:	eb 5a       	subi	r30, 0xAB	; 171
    17e2:	ff 4f       	sbci	r31, 0xFF	; 255
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	80 83       	st	Z, r24
    17e8:	fe 01       	movw	r30, r28
    17ea:	ef 5a       	subi	r30, 0xAF	; 175
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	ac e0       	ldi	r26, 0x0C	; 12
    17f4:	b2 e4       	ldi	r27, 0x42	; 66
    17f6:	80 83       	st	Z, r24
    17f8:	91 83       	std	Z+1, r25	; 0x01
    17fa:	a2 83       	std	Z+2, r26	; 0x02
    17fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17fe:	8e 01       	movw	r16, r28
    1800:	03 5b       	subi	r16, 0xB3	; 179
    1802:	1f 4f       	sbci	r17, 0xFF	; 255
    1804:	fe 01       	movw	r30, r28
    1806:	ef 5a       	subi	r30, 0xAF	; 175
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	60 81       	ld	r22, Z
    180c:	71 81       	ldd	r23, Z+1	; 0x01
    180e:	82 81       	ldd	r24, Z+2	; 0x02
    1810:	93 81       	ldd	r25, Z+3	; 0x03
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	4a e7       	ldi	r20, 0x7A	; 122
    1818:	53 e4       	ldi	r21, 0x43	; 67
    181a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	f8 01       	movw	r30, r16
    1824:	80 83       	st	Z, r24
    1826:	91 83       	std	Z+1, r25	; 0x01
    1828:	a2 83       	std	Z+2, r26	; 0x02
    182a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    182c:	fe 01       	movw	r30, r28
    182e:	e3 5b       	subi	r30, 0xB3	; 179
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	60 81       	ld	r22, Z
    1834:	71 81       	ldd	r23, Z+1	; 0x01
    1836:	82 81       	ldd	r24, Z+2	; 0x02
    1838:	93 81       	ldd	r25, Z+3	; 0x03
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	40 e8       	ldi	r20, 0x80	; 128
    1840:	5f e3       	ldi	r21, 0x3F	; 63
    1842:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1846:	88 23       	and	r24, r24
    1848:	44 f4       	brge	.+16     	; 0x185a <LCD_enuInit+0x96>
		__ticks = 1;
    184a:	fe 01       	movw	r30, r28
    184c:	e5 5b       	subi	r30, 0xB5	; 181
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	91 83       	std	Z+1, r25	; 0x01
    1856:	80 83       	st	Z, r24
    1858:	64 c0       	rjmp	.+200    	; 0x1922 <LCD_enuInit+0x15e>
	else if (__tmp > 65535)
    185a:	fe 01       	movw	r30, r28
    185c:	e3 5b       	subi	r30, 0xB3	; 179
    185e:	ff 4f       	sbci	r31, 0xFF	; 255
    1860:	60 81       	ld	r22, Z
    1862:	71 81       	ldd	r23, Z+1	; 0x01
    1864:	82 81       	ldd	r24, Z+2	; 0x02
    1866:	93 81       	ldd	r25, Z+3	; 0x03
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	3f ef       	ldi	r19, 0xFF	; 255
    186c:	4f e7       	ldi	r20, 0x7F	; 127
    186e:	57 e4       	ldi	r21, 0x47	; 71
    1870:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1874:	18 16       	cp	r1, r24
    1876:	0c f0       	brlt	.+2      	; 0x187a <LCD_enuInit+0xb6>
    1878:	43 c0       	rjmp	.+134    	; 0x1900 <LCD_enuInit+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    187a:	fe 01       	movw	r30, r28
    187c:	ef 5a       	subi	r30, 0xAF	; 175
    187e:	ff 4f       	sbci	r31, 0xFF	; 255
    1880:	60 81       	ld	r22, Z
    1882:	71 81       	ldd	r23, Z+1	; 0x01
    1884:	82 81       	ldd	r24, Z+2	; 0x02
    1886:	93 81       	ldd	r25, Z+3	; 0x03
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	40 e2       	ldi	r20, 0x20	; 32
    188e:	51 e4       	ldi	r21, 0x41	; 65
    1890:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	8e 01       	movw	r16, r28
    189a:	05 5b       	subi	r16, 0xB5	; 181
    189c:	1f 4f       	sbci	r17, 0xFF	; 255
    189e:	bc 01       	movw	r22, r24
    18a0:	cd 01       	movw	r24, r26
    18a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	f8 01       	movw	r30, r16
    18ac:	91 83       	std	Z+1, r25	; 0x01
    18ae:	80 83       	st	Z, r24
    18b0:	1f c0       	rjmp	.+62     	; 0x18f0 <LCD_enuInit+0x12c>
    18b2:	fe 01       	movw	r30, r28
    18b4:	e7 5b       	subi	r30, 0xB7	; 183
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
    18b8:	89 e1       	ldi	r24, 0x19	; 25
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	91 83       	std	Z+1, r25	; 0x01
    18be:	80 83       	st	Z, r24
    18c0:	fe 01       	movw	r30, r28
    18c2:	e7 5b       	subi	r30, 0xB7	; 183
    18c4:	ff 4f       	sbci	r31, 0xFF	; 255
    18c6:	80 81       	ld	r24, Z
    18c8:	91 81       	ldd	r25, Z+1	; 0x01
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	f1 f7       	brne	.-4      	; 0x18ca <LCD_enuInit+0x106>
    18ce:	fe 01       	movw	r30, r28
    18d0:	e7 5b       	subi	r30, 0xB7	; 183
    18d2:	ff 4f       	sbci	r31, 0xFF	; 255
    18d4:	91 83       	std	Z+1, r25	; 0x01
    18d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d8:	de 01       	movw	r26, r28
    18da:	a5 5b       	subi	r26, 0xB5	; 181
    18dc:	bf 4f       	sbci	r27, 0xFF	; 255
    18de:	fe 01       	movw	r30, r28
    18e0:	e5 5b       	subi	r30, 0xB5	; 181
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	80 81       	ld	r24, Z
    18e6:	91 81       	ldd	r25, Z+1	; 0x01
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	11 96       	adiw	r26, 0x01	; 1
    18ec:	9c 93       	st	X, r25
    18ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f0:	fe 01       	movw	r30, r28
    18f2:	e5 5b       	subi	r30, 0xB5	; 181
    18f4:	ff 4f       	sbci	r31, 0xFF	; 255
    18f6:	80 81       	ld	r24, Z
    18f8:	91 81       	ldd	r25, Z+1	; 0x01
    18fa:	00 97       	sbiw	r24, 0x00	; 0
    18fc:	d1 f6       	brne	.-76     	; 0x18b2 <LCD_enuInit+0xee>
    18fe:	27 c0       	rjmp	.+78     	; 0x194e <LCD_enuInit+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1900:	8e 01       	movw	r16, r28
    1902:	05 5b       	subi	r16, 0xB5	; 181
    1904:	1f 4f       	sbci	r17, 0xFF	; 255
    1906:	fe 01       	movw	r30, r28
    1908:	e3 5b       	subi	r30, 0xB3	; 179
    190a:	ff 4f       	sbci	r31, 0xFF	; 255
    190c:	60 81       	ld	r22, Z
    190e:	71 81       	ldd	r23, Z+1	; 0x01
    1910:	82 81       	ldd	r24, Z+2	; 0x02
    1912:	93 81       	ldd	r25, Z+3	; 0x03
    1914:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	f8 01       	movw	r30, r16
    191e:	91 83       	std	Z+1, r25	; 0x01
    1920:	80 83       	st	Z, r24
    1922:	de 01       	movw	r26, r28
    1924:	a9 5b       	subi	r26, 0xB9	; 185
    1926:	bf 4f       	sbci	r27, 0xFF	; 255
    1928:	fe 01       	movw	r30, r28
    192a:	e5 5b       	subi	r30, 0xB5	; 181
    192c:	ff 4f       	sbci	r31, 0xFF	; 255
    192e:	80 81       	ld	r24, Z
    1930:	91 81       	ldd	r25, Z+1	; 0x01
    1932:	8d 93       	st	X+, r24
    1934:	9c 93       	st	X, r25
    1936:	fe 01       	movw	r30, r28
    1938:	e9 5b       	subi	r30, 0xB9	; 185
    193a:	ff 4f       	sbci	r31, 0xFF	; 255
    193c:	80 81       	ld	r24, Z
    193e:	91 81       	ldd	r25, Z+1	; 0x01
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	f1 f7       	brne	.-4      	; 0x1940 <LCD_enuInit+0x17c>
    1944:	fe 01       	movw	r30, r28
    1946:	e9 5b       	subi	r30, 0xB9	; 185
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	91 83       	std	Z+1, r25	; 0x01
    194c:	80 83       	st	Z, r24
	/*wait for more than 30 ms to rise voltage up to 4.5 volt*/
	_delay_ms(35);

	DIO_enuSet_PinDirection(RS_PORT , RS_PIN ,DIO_u8OUTPUT);
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	60 e0       	ldi	r22, 0x00	; 0
    1952:	41 e0       	ldi	r20, 0x01	; 1
    1954:	0e 94 36 08 	call	0x106c	; 0x106c <DIO_enuSet_PinDirection>

	DIO_enuSet_PinDirection(RW_PORT , RW_PIN ,DIO_u8OUTPUT);
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	65 e0       	ldi	r22, 0x05	; 5
    195c:	41 e0       	ldi	r20, 0x01	; 1
    195e:	0e 94 36 08 	call	0x106c	; 0x106c <DIO_enuSet_PinDirection>

	DIO_enuSet_PinDirection(EN_PORT , EN_PIN ,DIO_u8OUTPUT);
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	67 e0       	ldi	r22, 0x07	; 7
    1966:	41 e0       	ldi	r20, 0x01	; 1
    1968:	0e 94 36 08 	call	0x106c	; 0x106c <DIO_enuSet_PinDirection>

	DIO_enuSet_PinDirection(D7_PORT , D7_PIN ,DIO_u8OUTPUT);
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	60 e0       	ldi	r22, 0x00	; 0
    1970:	41 e0       	ldi	r20, 0x01	; 1
    1972:	0e 94 36 08 	call	0x106c	; 0x106c <DIO_enuSet_PinDirection>
	DIO_enuSet_PinDirection(D6_PORT , D6_PIN ,DIO_u8OUTPUT);
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	63 e0       	ldi	r22, 0x03	; 3
    197a:	41 e0       	ldi	r20, 0x01	; 1
    197c:	0e 94 36 08 	call	0x106c	; 0x106c <DIO_enuSet_PinDirection>
	DIO_enuSet_PinDirection(D5_PORT , D5_PIN ,DIO_u8OUTPUT);
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	61 e0       	ldi	r22, 0x01	; 1
    1984:	41 e0       	ldi	r20, 0x01	; 1
    1986:	0e 94 36 08 	call	0x106c	; 0x106c <DIO_enuSet_PinDirection>
	DIO_enuSet_PinDirection(D4_PORT , D4_PIN ,DIO_u8OUTPUT);
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	62 e0       	ldi	r22, 0x02	; 2
    198e:	41 e0       	ldi	r20, 0x01	; 1
    1990:	0e 94 36 08 	call	0x106c	; 0x106c <DIO_enuSet_PinDirection>
    1994:	fe 01       	movw	r30, r28
    1996:	ed 5b       	subi	r30, 0xBD	; 189
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	ac e0       	ldi	r26, 0x0C	; 12
    19a0:	b2 e4       	ldi	r27, 0x42	; 66
    19a2:	80 83       	st	Z, r24
    19a4:	91 83       	std	Z+1, r25	; 0x01
    19a6:	a2 83       	std	Z+2, r26	; 0x02
    19a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19aa:	8e 01       	movw	r16, r28
    19ac:	01 5c       	subi	r16, 0xC1	; 193
    19ae:	1f 4f       	sbci	r17, 0xFF	; 255
    19b0:	fe 01       	movw	r30, r28
    19b2:	ed 5b       	subi	r30, 0xBD	; 189
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	60 81       	ld	r22, Z
    19b8:	71 81       	ldd	r23, Z+1	; 0x01
    19ba:	82 81       	ldd	r24, Z+2	; 0x02
    19bc:	93 81       	ldd	r25, Z+3	; 0x03
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	4a e7       	ldi	r20, 0x7A	; 122
    19c4:	53 e4       	ldi	r21, 0x43	; 67
    19c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	f8 01       	movw	r30, r16
    19d0:	80 83       	st	Z, r24
    19d2:	91 83       	std	Z+1, r25	; 0x01
    19d4:	a2 83       	std	Z+2, r26	; 0x02
    19d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19d8:	fe 01       	movw	r30, r28
    19da:	ff 96       	adiw	r30, 0x3f	; 63
    19dc:	60 81       	ld	r22, Z
    19de:	71 81       	ldd	r23, Z+1	; 0x01
    19e0:	82 81       	ldd	r24, Z+2	; 0x02
    19e2:	93 81       	ldd	r25, Z+3	; 0x03
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	40 e8       	ldi	r20, 0x80	; 128
    19ea:	5f e3       	ldi	r21, 0x3F	; 63
    19ec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19f0:	88 23       	and	r24, r24
    19f2:	2c f4       	brge	.+10     	; 0x19fe <LCD_enuInit+0x23a>
		__ticks = 1;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	9e af       	std	Y+62, r25	; 0x3e
    19fa:	8d af       	std	Y+61, r24	; 0x3d
    19fc:	46 c0       	rjmp	.+140    	; 0x1a8a <LCD_enuInit+0x2c6>
	else if (__tmp > 65535)
    19fe:	fe 01       	movw	r30, r28
    1a00:	ff 96       	adiw	r30, 0x3f	; 63
    1a02:	60 81       	ld	r22, Z
    1a04:	71 81       	ldd	r23, Z+1	; 0x01
    1a06:	82 81       	ldd	r24, Z+2	; 0x02
    1a08:	93 81       	ldd	r25, Z+3	; 0x03
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	3f ef       	ldi	r19, 0xFF	; 255
    1a0e:	4f e7       	ldi	r20, 0x7F	; 127
    1a10:	57 e4       	ldi	r21, 0x47	; 71
    1a12:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a16:	18 16       	cp	r1, r24
    1a18:	64 f5       	brge	.+88     	; 0x1a72 <LCD_enuInit+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1a:	fe 01       	movw	r30, r28
    1a1c:	ed 5b       	subi	r30, 0xBD	; 189
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	60 81       	ld	r22, Z
    1a22:	71 81       	ldd	r23, Z+1	; 0x01
    1a24:	82 81       	ldd	r24, Z+2	; 0x02
    1a26:	93 81       	ldd	r25, Z+3	; 0x03
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	40 e2       	ldi	r20, 0x20	; 32
    1a2e:	51 e4       	ldi	r21, 0x41	; 65
    1a30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	bc 01       	movw	r22, r24
    1a3a:	cd 01       	movw	r24, r26
    1a3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	9e af       	std	Y+62, r25	; 0x3e
    1a46:	8d af       	std	Y+61, r24	; 0x3d
    1a48:	0f c0       	rjmp	.+30     	; 0x1a68 <LCD_enuInit+0x2a4>
    1a4a:	89 e1       	ldi	r24, 0x19	; 25
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	9c af       	std	Y+60, r25	; 0x3c
    1a50:	8b af       	std	Y+59, r24	; 0x3b
    1a52:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a54:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	f1 f7       	brne	.-4      	; 0x1a56 <LCD_enuInit+0x292>
    1a5a:	9c af       	std	Y+60, r25	; 0x3c
    1a5c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a60:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	9e af       	std	Y+62, r25	; 0x3e
    1a66:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a68:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a6a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a6c:	00 97       	sbiw	r24, 0x00	; 0
    1a6e:	69 f7       	brne	.-38     	; 0x1a4a <LCD_enuInit+0x286>
    1a70:	16 c0       	rjmp	.+44     	; 0x1a9e <LCD_enuInit+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a72:	fe 01       	movw	r30, r28
    1a74:	ff 96       	adiw	r30, 0x3f	; 63
    1a76:	60 81       	ld	r22, Z
    1a78:	71 81       	ldd	r23, Z+1	; 0x01
    1a7a:	82 81       	ldd	r24, Z+2	; 0x02
    1a7c:	93 81       	ldd	r25, Z+3	; 0x03
    1a7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	9e af       	std	Y+62, r25	; 0x3e
    1a88:	8d af       	std	Y+61, r24	; 0x3d
    1a8a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a8c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a8e:	9a af       	std	Y+58, r25	; 0x3a
    1a90:	89 af       	std	Y+57, r24	; 0x39
    1a92:	89 ad       	ldd	r24, Y+57	; 0x39
    1a94:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	f1 f7       	brne	.-4      	; 0x1a96 <LCD_enuInit+0x2d2>
    1a9a:	9a af       	std	Y+58, r25	; 0x3a
    1a9c:	89 af       	std	Y+57, r24	; 0x39
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	ac e0       	ldi	r26, 0x0C	; 12
    1aa4:	b2 e4       	ldi	r27, 0x42	; 66
    1aa6:	8d ab       	std	Y+53, r24	; 0x35
    1aa8:	9e ab       	std	Y+54, r25	; 0x36
    1aaa:	af ab       	std	Y+55, r26	; 0x37
    1aac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aae:	6d a9       	ldd	r22, Y+53	; 0x35
    1ab0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ab2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ab4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	4a e7       	ldi	r20, 0x7A	; 122
    1abc:	53 e4       	ldi	r21, 0x43	; 67
    1abe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	89 ab       	std	Y+49, r24	; 0x31
    1ac8:	9a ab       	std	Y+50, r25	; 0x32
    1aca:	ab ab       	std	Y+51, r26	; 0x33
    1acc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ace:	69 a9       	ldd	r22, Y+49	; 0x31
    1ad0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ad2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ad4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	40 e8       	ldi	r20, 0x80	; 128
    1adc:	5f e3       	ldi	r21, 0x3F	; 63
    1ade:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ae2:	88 23       	and	r24, r24
    1ae4:	2c f4       	brge	.+10     	; 0x1af0 <LCD_enuInit+0x32c>
		__ticks = 1;
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	98 ab       	std	Y+48, r25	; 0x30
    1aec:	8f a7       	std	Y+47, r24	; 0x2f
    1aee:	3f c0       	rjmp	.+126    	; 0x1b6e <LCD_enuInit+0x3aa>
	else if (__tmp > 65535)
    1af0:	69 a9       	ldd	r22, Y+49	; 0x31
    1af2:	7a a9       	ldd	r23, Y+50	; 0x32
    1af4:	8b a9       	ldd	r24, Y+51	; 0x33
    1af6:	9c a9       	ldd	r25, Y+52	; 0x34
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	3f ef       	ldi	r19, 0xFF	; 255
    1afc:	4f e7       	ldi	r20, 0x7F	; 127
    1afe:	57 e4       	ldi	r21, 0x47	; 71
    1b00:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b04:	18 16       	cp	r1, r24
    1b06:	4c f5       	brge	.+82     	; 0x1b5a <LCD_enuInit+0x396>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b08:	6d a9       	ldd	r22, Y+53	; 0x35
    1b0a:	7e a9       	ldd	r23, Y+54	; 0x36
    1b0c:	8f a9       	ldd	r24, Y+55	; 0x37
    1b0e:	98 ad       	ldd	r25, Y+56	; 0x38
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	40 e2       	ldi	r20, 0x20	; 32
    1b16:	51 e4       	ldi	r21, 0x41	; 65
    1b18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	bc 01       	movw	r22, r24
    1b22:	cd 01       	movw	r24, r26
    1b24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	98 ab       	std	Y+48, r25	; 0x30
    1b2e:	8f a7       	std	Y+47, r24	; 0x2f
    1b30:	0f c0       	rjmp	.+30     	; 0x1b50 <LCD_enuInit+0x38c>
    1b32:	89 e1       	ldi	r24, 0x19	; 25
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	9e a7       	std	Y+46, r25	; 0x2e
    1b38:	8d a7       	std	Y+45, r24	; 0x2d
    1b3a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b3c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	f1 f7       	brne	.-4      	; 0x1b3e <LCD_enuInit+0x37a>
    1b42:	9e a7       	std	Y+46, r25	; 0x2e
    1b44:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b48:	98 a9       	ldd	r25, Y+48	; 0x30
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	98 ab       	std	Y+48, r25	; 0x30
    1b4e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b50:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b52:	98 a9       	ldd	r25, Y+48	; 0x30
    1b54:	00 97       	sbiw	r24, 0x00	; 0
    1b56:	69 f7       	brne	.-38     	; 0x1b32 <LCD_enuInit+0x36e>
    1b58:	14 c0       	rjmp	.+40     	; 0x1b82 <LCD_enuInit+0x3be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b5c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b5e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b60:	9c a9       	ldd	r25, Y+52	; 0x34
    1b62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	98 ab       	std	Y+48, r25	; 0x30
    1b6c:	8f a7       	std	Y+47, r24	; 0x2f
    1b6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b70:	98 a9       	ldd	r25, Y+48	; 0x30
    1b72:	9c a7       	std	Y+44, r25	; 0x2c
    1b74:	8b a7       	std	Y+43, r24	; 0x2b
    1b76:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b78:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
    1b7c:	f1 f7       	brne	.-4      	; 0x1b7a <LCD_enuInit+0x3b6>
    1b7e:	9c a7       	std	Y+44, r25	; 0x2c
    1b80:	8b a7       	std	Y+43, r24	; 0x2b
	LCD_invidSendCommond(Fun_Set_8b);

#elif LCD_MODE == FOUR_BIT
	_delay_ms(35);
	/*for function set --> 4 mode 2 line 5*8*/
	LCD_invidSendCommond(Fun_Set_4b );
    1b82:	88 e2       	ldi	r24, 0x28	; 40
    1b84:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_invidSendCommond>
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	a0 e8       	ldi	r26, 0x80	; 128
    1b8e:	bf e3       	ldi	r27, 0x3F	; 63
    1b90:	8f a3       	std	Y+39, r24	; 0x27
    1b92:	98 a7       	std	Y+40, r25	; 0x28
    1b94:	a9 a7       	std	Y+41, r26	; 0x29
    1b96:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b98:	6f a1       	ldd	r22, Y+39	; 0x27
    1b9a:	78 a5       	ldd	r23, Y+40	; 0x28
    1b9c:	89 a5       	ldd	r24, Y+41	; 0x29
    1b9e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	4a e7       	ldi	r20, 0x7A	; 122
    1ba6:	53 e4       	ldi	r21, 0x43	; 67
    1ba8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	8b a3       	std	Y+35, r24	; 0x23
    1bb2:	9c a3       	std	Y+36, r25	; 0x24
    1bb4:	ad a3       	std	Y+37, r26	; 0x25
    1bb6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bb8:	6b a1       	ldd	r22, Y+35	; 0x23
    1bba:	7c a1       	ldd	r23, Y+36	; 0x24
    1bbc:	8d a1       	ldd	r24, Y+37	; 0x25
    1bbe:	9e a1       	ldd	r25, Y+38	; 0x26
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	40 e8       	ldi	r20, 0x80	; 128
    1bc6:	5f e3       	ldi	r21, 0x3F	; 63
    1bc8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bcc:	88 23       	and	r24, r24
    1bce:	2c f4       	brge	.+10     	; 0x1bda <LCD_enuInit+0x416>
		__ticks = 1;
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	9a a3       	std	Y+34, r25	; 0x22
    1bd6:	89 a3       	std	Y+33, r24	; 0x21
    1bd8:	3f c0       	rjmp	.+126    	; 0x1c58 <LCD_enuInit+0x494>
	else if (__tmp > 65535)
    1bda:	6b a1       	ldd	r22, Y+35	; 0x23
    1bdc:	7c a1       	ldd	r23, Y+36	; 0x24
    1bde:	8d a1       	ldd	r24, Y+37	; 0x25
    1be0:	9e a1       	ldd	r25, Y+38	; 0x26
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	3f ef       	ldi	r19, 0xFF	; 255
    1be6:	4f e7       	ldi	r20, 0x7F	; 127
    1be8:	57 e4       	ldi	r21, 0x47	; 71
    1bea:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bee:	18 16       	cp	r1, r24
    1bf0:	4c f5       	brge	.+82     	; 0x1c44 <LCD_enuInit+0x480>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf2:	6f a1       	ldd	r22, Y+39	; 0x27
    1bf4:	78 a5       	ldd	r23, Y+40	; 0x28
    1bf6:	89 a5       	ldd	r24, Y+41	; 0x29
    1bf8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	40 e2       	ldi	r20, 0x20	; 32
    1c00:	51 e4       	ldi	r21, 0x41	; 65
    1c02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	bc 01       	movw	r22, r24
    1c0c:	cd 01       	movw	r24, r26
    1c0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	9a a3       	std	Y+34, r25	; 0x22
    1c18:	89 a3       	std	Y+33, r24	; 0x21
    1c1a:	0f c0       	rjmp	.+30     	; 0x1c3a <LCD_enuInit+0x476>
    1c1c:	89 e1       	ldi	r24, 0x19	; 25
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	98 a3       	std	Y+32, r25	; 0x20
    1c22:	8f 8f       	std	Y+31, r24	; 0x1f
    1c24:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c26:	98 a1       	ldd	r25, Y+32	; 0x20
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	f1 f7       	brne	.-4      	; 0x1c28 <LCD_enuInit+0x464>
    1c2c:	98 a3       	std	Y+32, r25	; 0x20
    1c2e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c30:	89 a1       	ldd	r24, Y+33	; 0x21
    1c32:	9a a1       	ldd	r25, Y+34	; 0x22
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	9a a3       	std	Y+34, r25	; 0x22
    1c38:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c3a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c3c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c3e:	00 97       	sbiw	r24, 0x00	; 0
    1c40:	69 f7       	brne	.-38     	; 0x1c1c <LCD_enuInit+0x458>
    1c42:	14 c0       	rjmp	.+40     	; 0x1c6c <LCD_enuInit+0x4a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c44:	6b a1       	ldd	r22, Y+35	; 0x23
    1c46:	7c a1       	ldd	r23, Y+36	; 0x24
    1c48:	8d a1       	ldd	r24, Y+37	; 0x25
    1c4a:	9e a1       	ldd	r25, Y+38	; 0x26
    1c4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	9a a3       	std	Y+34, r25	; 0x22
    1c56:	89 a3       	std	Y+33, r24	; 0x21
    1c58:	89 a1       	ldd	r24, Y+33	; 0x21
    1c5a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c5c:	9e 8f       	std	Y+30, r25	; 0x1e
    1c5e:	8d 8f       	std	Y+29, r24	; 0x1d
    1c60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c64:	01 97       	sbiw	r24, 0x01	; 1
    1c66:	f1 f7       	brne	.-4      	; 0x1c64 <LCD_enuInit+0x4a0>
    1c68:	9e 8f       	std	Y+30, r25	; 0x1e
    1c6a:	8d 8f       	std	Y+29, r24	; 0x1d
#else
#error "Error Invalid LCD Mode"
#endif
	_delay_ms(1);
	/*Display on off control*/
	LCD_invidSendCommond(Display_On);
    1c6c:	8f e0       	ldi	r24, 0x0F	; 15
    1c6e:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_invidSendCommond>
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	a0 e8       	ldi	r26, 0x80	; 128
    1c78:	bf e3       	ldi	r27, 0x3F	; 63
    1c7a:	89 8f       	std	Y+25, r24	; 0x19
    1c7c:	9a 8f       	std	Y+26, r25	; 0x1a
    1c7e:	ab 8f       	std	Y+27, r26	; 0x1b
    1c80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c82:	69 8d       	ldd	r22, Y+25	; 0x19
    1c84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	4a e7       	ldi	r20, 0x7A	; 122
    1c90:	53 e4       	ldi	r21, 0x43	; 67
    1c92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	8d 8b       	std	Y+21, r24	; 0x15
    1c9c:	9e 8b       	std	Y+22, r25	; 0x16
    1c9e:	af 8b       	std	Y+23, r26	; 0x17
    1ca0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ca2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ca4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ca6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ca8:	98 8d       	ldd	r25, Y+24	; 0x18
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	40 e8       	ldi	r20, 0x80	; 128
    1cb0:	5f e3       	ldi	r21, 0x3F	; 63
    1cb2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cb6:	88 23       	and	r24, r24
    1cb8:	2c f4       	brge	.+10     	; 0x1cc4 <LCD_enuInit+0x500>
		__ticks = 1;
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	9c 8b       	std	Y+20, r25	; 0x14
    1cc0:	8b 8b       	std	Y+19, r24	; 0x13
    1cc2:	3f c0       	rjmp	.+126    	; 0x1d42 <LCD_enuInit+0x57e>
	else if (__tmp > 65535)
    1cc4:	6d 89       	ldd	r22, Y+21	; 0x15
    1cc6:	7e 89       	ldd	r23, Y+22	; 0x16
    1cc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cca:	98 8d       	ldd	r25, Y+24	; 0x18
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	3f ef       	ldi	r19, 0xFF	; 255
    1cd0:	4f e7       	ldi	r20, 0x7F	; 127
    1cd2:	57 e4       	ldi	r21, 0x47	; 71
    1cd4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cd8:	18 16       	cp	r1, r24
    1cda:	4c f5       	brge	.+82     	; 0x1d2e <LCD_enuInit+0x56a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cdc:	69 8d       	ldd	r22, Y+25	; 0x19
    1cde:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ce0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ce2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	40 e2       	ldi	r20, 0x20	; 32
    1cea:	51 e4       	ldi	r21, 0x41	; 65
    1cec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	bc 01       	movw	r22, r24
    1cf6:	cd 01       	movw	r24, r26
    1cf8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	9c 8b       	std	Y+20, r25	; 0x14
    1d02:	8b 8b       	std	Y+19, r24	; 0x13
    1d04:	0f c0       	rjmp	.+30     	; 0x1d24 <LCD_enuInit+0x560>
    1d06:	89 e1       	ldi	r24, 0x19	; 25
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	9a 8b       	std	Y+18, r25	; 0x12
    1d0c:	89 8b       	std	Y+17, r24	; 0x11
    1d0e:	89 89       	ldd	r24, Y+17	; 0x11
    1d10:	9a 89       	ldd	r25, Y+18	; 0x12
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	f1 f7       	brne	.-4      	; 0x1d12 <LCD_enuInit+0x54e>
    1d16:	9a 8b       	std	Y+18, r25	; 0x12
    1d18:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	9c 8b       	std	Y+20, r25	; 0x14
    1d22:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d24:	8b 89       	ldd	r24, Y+19	; 0x13
    1d26:	9c 89       	ldd	r25, Y+20	; 0x14
    1d28:	00 97       	sbiw	r24, 0x00	; 0
    1d2a:	69 f7       	brne	.-38     	; 0x1d06 <LCD_enuInit+0x542>
    1d2c:	14 c0       	rjmp	.+40     	; 0x1d56 <LCD_enuInit+0x592>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d30:	7e 89       	ldd	r23, Y+22	; 0x16
    1d32:	8f 89       	ldd	r24, Y+23	; 0x17
    1d34:	98 8d       	ldd	r25, Y+24	; 0x18
    1d36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	9c 8b       	std	Y+20, r25	; 0x14
    1d40:	8b 8b       	std	Y+19, r24	; 0x13
    1d42:	8b 89       	ldd	r24, Y+19	; 0x13
    1d44:	9c 89       	ldd	r25, Y+20	; 0x14
    1d46:	98 8b       	std	Y+16, r25	; 0x10
    1d48:	8f 87       	std	Y+15, r24	; 0x0f
    1d4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d4c:	98 89       	ldd	r25, Y+16	; 0x10
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	f1 f7       	brne	.-4      	; 0x1d4e <LCD_enuInit+0x58a>
    1d52:	98 8b       	std	Y+16, r25	; 0x10
    1d54:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*Clear Display */
	LCD_invidSendCommond(Clear_Display);
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_invidSendCommond>
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	a0 e0       	ldi	r26, 0x00	; 0
    1d62:	b0 e4       	ldi	r27, 0x40	; 64
    1d64:	8b 87       	std	Y+11, r24	; 0x0b
    1d66:	9c 87       	std	Y+12, r25	; 0x0c
    1d68:	ad 87       	std	Y+13, r26	; 0x0d
    1d6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	4a e7       	ldi	r20, 0x7A	; 122
    1d7a:	53 e4       	ldi	r21, 0x43	; 67
    1d7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	8f 83       	std	Y+7, r24	; 0x07
    1d86:	98 87       	std	Y+8, r25	; 0x08
    1d88:	a9 87       	std	Y+9, r26	; 0x09
    1d8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d8e:	78 85       	ldd	r23, Y+8	; 0x08
    1d90:	89 85       	ldd	r24, Y+9	; 0x09
    1d92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e8       	ldi	r20, 0x80	; 128
    1d9a:	5f e3       	ldi	r21, 0x3F	; 63
    1d9c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1da0:	88 23       	and	r24, r24
    1da2:	2c f4       	brge	.+10     	; 0x1dae <LCD_enuInit+0x5ea>
		__ticks = 1;
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	9e 83       	std	Y+6, r25	; 0x06
    1daa:	8d 83       	std	Y+5, r24	; 0x05
    1dac:	3f c0       	rjmp	.+126    	; 0x1e2c <LCD_enuInit+0x668>
	else if (__tmp > 65535)
    1dae:	6f 81       	ldd	r22, Y+7	; 0x07
    1db0:	78 85       	ldd	r23, Y+8	; 0x08
    1db2:	89 85       	ldd	r24, Y+9	; 0x09
    1db4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	3f ef       	ldi	r19, 0xFF	; 255
    1dba:	4f e7       	ldi	r20, 0x7F	; 127
    1dbc:	57 e4       	ldi	r21, 0x47	; 71
    1dbe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1dc2:	18 16       	cp	r1, r24
    1dc4:	4c f5       	brge	.+82     	; 0x1e18 <LCD_enuInit+0x654>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	40 e2       	ldi	r20, 0x20	; 32
    1dd4:	51 e4       	ldi	r21, 0x41	; 65
    1dd6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	bc 01       	movw	r22, r24
    1de0:	cd 01       	movw	r24, r26
    1de2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	9e 83       	std	Y+6, r25	; 0x06
    1dec:	8d 83       	std	Y+5, r24	; 0x05
    1dee:	0f c0       	rjmp	.+30     	; 0x1e0e <LCD_enuInit+0x64a>
    1df0:	89 e1       	ldi	r24, 0x19	; 25
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	9c 83       	std	Y+4, r25	; 0x04
    1df6:	8b 83       	std	Y+3, r24	; 0x03
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	f1 f7       	brne	.-4      	; 0x1dfc <LCD_enuInit+0x638>
    1e00:	9c 83       	std	Y+4, r25	; 0x04
    1e02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e04:	8d 81       	ldd	r24, Y+5	; 0x05
    1e06:	9e 81       	ldd	r25, Y+6	; 0x06
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	9e 83       	std	Y+6, r25	; 0x06
    1e0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e10:	9e 81       	ldd	r25, Y+6	; 0x06
    1e12:	00 97       	sbiw	r24, 0x00	; 0
    1e14:	69 f7       	brne	.-38     	; 0x1df0 <LCD_enuInit+0x62c>
    1e16:	14 c0       	rjmp	.+40     	; 0x1e40 <LCD_enuInit+0x67c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e18:	6f 81       	ldd	r22, Y+7	; 0x07
    1e1a:	78 85       	ldd	r23, Y+8	; 0x08
    1e1c:	89 85       	ldd	r24, Y+9	; 0x09
    1e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	9e 83       	std	Y+6, r25	; 0x06
    1e2a:	8d 83       	std	Y+5, r24	; 0x05
    1e2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e30:	9a 83       	std	Y+2, r25	; 0x02
    1e32:	89 83       	std	Y+1, r24	; 0x01
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	9a 81       	ldd	r25, Y+2	; 0x02
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	f1 f7       	brne	.-4      	; 0x1e38 <LCD_enuInit+0x674>
    1e3c:	9a 83       	std	Y+2, r25	; 0x02
    1e3e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Entry mode --> increase cursor -- no shift */
	LCD_invidSendCommond(Entry_Mode);
    1e40:	86 e0       	ldi	r24, 0x06	; 6
    1e42:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_invidSendCommond>
	Local_errorState=ES_OK;
    1e46:	fe 01       	movw	r30, r28
    1e48:	eb 5a       	subi	r30, 0xAB	; 171
    1e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4c:	10 82       	st	Z, r1
	return Local_errorState;
    1e4e:	fe 01       	movw	r30, r28
    1e50:	eb 5a       	subi	r30, 0xAB	; 171
    1e52:	ff 4f       	sbci	r31, 0xFF	; 255
    1e54:	80 81       	ld	r24, Z
}
    1e56:	cb 5a       	subi	r28, 0xAB	; 171
    1e58:	df 4f       	sbci	r29, 0xFF	; 255
    1e5a:	0f b6       	in	r0, 0x3f	; 63
    1e5c:	f8 94       	cli
    1e5e:	de bf       	out	0x3e, r29	; 62
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	cd bf       	out	0x3d, r28	; 61
    1e64:	cf 91       	pop	r28
    1e66:	df 91       	pop	r29
    1e68:	1f 91       	pop	r17
    1e6a:	0f 91       	pop	r16
    1e6c:	08 95       	ret

00001e6e <LCD_voidLatch>:

static void LCD_voidLatch(u8 Copy_u8Data )
{
    1e6e:	0f 93       	push	r16
    1e70:	1f 93       	push	r17
    1e72:	df 93       	push	r29
    1e74:	cf 93       	push	r28
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	c5 55       	subi	r28, 0x55	; 85
    1e7c:	d0 40       	sbci	r29, 0x00	; 0
    1e7e:	0f b6       	in	r0, 0x3f	; 63
    1e80:	f8 94       	cli
    1e82:	de bf       	out	0x3e, r29	; 62
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	cd bf       	out	0x3d, r28	; 61
    1e88:	fe 01       	movw	r30, r28
    1e8a:	eb 5a       	subi	r30, 0xAB	; 171
    1e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8e:	80 83       	st	Z, r24


	/* Set RW pin low for write*/

	DIO_enuSet_PinValue(RW_PORT , RW_PIN ,DIO_u8LOW);
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	65 e0       	ldi	r22, 0x05	; 5
    1e94:	40 e0       	ldi	r20, 0x00	; 0
    1e96:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
	/*to start the pulse of send command or data*/
	DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8LOW);
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	67 e0       	ldi	r22, 0x07	; 7
    1e9e:	40 e0       	ldi	r20, 0x00	; 0
    1ea0:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>

	DIO_enuSet_PinValue(D7_PORT , D7_PIN ,(((Copy_u8Data>>D_D7)&GetMusk)));
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	eb 5a       	subi	r30, 0xAB	; 171
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	80 81       	ld	r24, Z
    1eac:	98 2f       	mov	r25, r24
    1eae:	99 1f       	adc	r25, r25
    1eb0:	99 27       	eor	r25, r25
    1eb2:	99 1f       	adc	r25, r25
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	60 e0       	ldi	r22, 0x00	; 0
    1eb8:	49 2f       	mov	r20, r25
    1eba:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(D6_PORT , D6_PIN ,(((Copy_u8Data>>D_D6)&GetMusk))) ;
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	eb 5a       	subi	r30, 0xAB	; 171
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	80 81       	ld	r24, Z
    1ec6:	82 95       	swap	r24
    1ec8:	86 95       	lsr	r24
    1eca:	86 95       	lsr	r24
    1ecc:	83 70       	andi	r24, 0x03	; 3
    1ece:	98 2f       	mov	r25, r24
    1ed0:	91 70       	andi	r25, 0x01	; 1
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	63 e0       	ldi	r22, 0x03	; 3
    1ed6:	49 2f       	mov	r20, r25
    1ed8:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(D5_PORT , D5_PIN ,(((Copy_u8Data>>D_D5)&GetMusk))) ;
    1edc:	fe 01       	movw	r30, r28
    1ede:	eb 5a       	subi	r30, 0xAB	; 171
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	80 81       	ld	r24, Z
    1ee4:	82 95       	swap	r24
    1ee6:	86 95       	lsr	r24
    1ee8:	87 70       	andi	r24, 0x07	; 7
    1eea:	98 2f       	mov	r25, r24
    1eec:	91 70       	andi	r25, 0x01	; 1
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	61 e0       	ldi	r22, 0x01	; 1
    1ef2:	49 2f       	mov	r20, r25
    1ef4:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(D4_PORT , D4_PIN ,(((Copy_u8Data>>D_D4)&GetMusk))) ;
    1ef8:	fe 01       	movw	r30, r28
    1efa:	eb 5a       	subi	r30, 0xAB	; 171
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	80 81       	ld	r24, Z
    1f00:	82 95       	swap	r24
    1f02:	8f 70       	andi	r24, 0x0F	; 15
    1f04:	98 2f       	mov	r25, r24
    1f06:	91 70       	andi	r25, 0x01	; 1
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	62 e0       	ldi	r22, 0x02	; 2
    1f0c:	49 2f       	mov	r20, r25
    1f0e:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(D1_PORT , D1_PIN ,(((Copy_u8Data>>D_D1)&GetMusk)));
	DIO_enuSet_PinValue(D0_PORT , D0_PIN ,(((Copy_u8Data>>D_D0)&GetMusk)));


#elif	LCD_MODE == FOUR_BIT
	if(Copy_u8Data==Fun_Set_4b)
    1f12:	fe 01       	movw	r30, r28
    1f14:	eb 5a       	subi	r30, 0xAB	; 171
    1f16:	ff 4f       	sbci	r31, 0xFF	; 255
    1f18:	80 81       	ld	r24, Z
    1f1a:	88 32       	cpi	r24, 0x28	; 40
    1f1c:	09 f0       	breq	.+2      	; 0x1f20 <LCD_voidLatch+0xb2>
    1f1e:	79 c1       	rjmp	.+754    	; 0x2212 <LCD_voidLatch+0x3a4>
	{
		/* give enable high to start duration of pulse*/
		DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8HIGH);
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	67 e0       	ldi	r22, 0x07	; 7
    1f24:	41 e0       	ldi	r20, 0x01	; 1
    1f26:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	ef 5a       	subi	r30, 0xAF	; 175
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	a0 e2       	ldi	r26, 0x20	; 32
    1f36:	b1 e4       	ldi	r27, 0x41	; 65
    1f38:	80 83       	st	Z, r24
    1f3a:	91 83       	std	Z+1, r25	; 0x01
    1f3c:	a2 83       	std	Z+2, r26	; 0x02
    1f3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f40:	8e 01       	movw	r16, r28
    1f42:	03 5b       	subi	r16, 0xB3	; 179
    1f44:	1f 4f       	sbci	r17, 0xFF	; 255
    1f46:	fe 01       	movw	r30, r28
    1f48:	ef 5a       	subi	r30, 0xAF	; 175
    1f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4c:	60 81       	ld	r22, Z
    1f4e:	71 81       	ldd	r23, Z+1	; 0x01
    1f50:	82 81       	ldd	r24, Z+2	; 0x02
    1f52:	93 81       	ldd	r25, Z+3	; 0x03
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	4a e7       	ldi	r20, 0x7A	; 122
    1f5a:	53 e4       	ldi	r21, 0x43	; 67
    1f5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	f8 01       	movw	r30, r16
    1f66:	80 83       	st	Z, r24
    1f68:	91 83       	std	Z+1, r25	; 0x01
    1f6a:	a2 83       	std	Z+2, r26	; 0x02
    1f6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f6e:	fe 01       	movw	r30, r28
    1f70:	e3 5b       	subi	r30, 0xB3	; 179
    1f72:	ff 4f       	sbci	r31, 0xFF	; 255
    1f74:	60 81       	ld	r22, Z
    1f76:	71 81       	ldd	r23, Z+1	; 0x01
    1f78:	82 81       	ldd	r24, Z+2	; 0x02
    1f7a:	93 81       	ldd	r25, Z+3	; 0x03
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	40 e8       	ldi	r20, 0x80	; 128
    1f82:	5f e3       	ldi	r21, 0x3F	; 63
    1f84:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f88:	88 23       	and	r24, r24
    1f8a:	44 f4       	brge	.+16     	; 0x1f9c <LCD_voidLatch+0x12e>
		__ticks = 1;
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	e5 5b       	subi	r30, 0xB5	; 181
    1f90:	ff 4f       	sbci	r31, 0xFF	; 255
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	91 83       	std	Z+1, r25	; 0x01
    1f98:	80 83       	st	Z, r24
    1f9a:	64 c0       	rjmp	.+200    	; 0x2064 <LCD_voidLatch+0x1f6>
	else if (__tmp > 65535)
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	e3 5b       	subi	r30, 0xB3	; 179
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	60 81       	ld	r22, Z
    1fa4:	71 81       	ldd	r23, Z+1	; 0x01
    1fa6:	82 81       	ldd	r24, Z+2	; 0x02
    1fa8:	93 81       	ldd	r25, Z+3	; 0x03
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	3f ef       	ldi	r19, 0xFF	; 255
    1fae:	4f e7       	ldi	r20, 0x7F	; 127
    1fb0:	57 e4       	ldi	r21, 0x47	; 71
    1fb2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fb6:	18 16       	cp	r1, r24
    1fb8:	0c f0       	brlt	.+2      	; 0x1fbc <LCD_voidLatch+0x14e>
    1fba:	43 c0       	rjmp	.+134    	; 0x2042 <LCD_voidLatch+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	ef 5a       	subi	r30, 0xAF	; 175
    1fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc2:	60 81       	ld	r22, Z
    1fc4:	71 81       	ldd	r23, Z+1	; 0x01
    1fc6:	82 81       	ldd	r24, Z+2	; 0x02
    1fc8:	93 81       	ldd	r25, Z+3	; 0x03
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	40 e2       	ldi	r20, 0x20	; 32
    1fd0:	51 e4       	ldi	r21, 0x41	; 65
    1fd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	8e 01       	movw	r16, r28
    1fdc:	05 5b       	subi	r16, 0xB5	; 181
    1fde:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe0:	bc 01       	movw	r22, r24
    1fe2:	cd 01       	movw	r24, r26
    1fe4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	f8 01       	movw	r30, r16
    1fee:	91 83       	std	Z+1, r25	; 0x01
    1ff0:	80 83       	st	Z, r24
    1ff2:	1f c0       	rjmp	.+62     	; 0x2032 <LCD_voidLatch+0x1c4>
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	e7 5b       	subi	r30, 0xB7	; 183
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	89 e1       	ldi	r24, 0x19	; 25
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	91 83       	std	Z+1, r25	; 0x01
    2000:	80 83       	st	Z, r24
    2002:	fe 01       	movw	r30, r28
    2004:	e7 5b       	subi	r30, 0xB7	; 183
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	80 81       	ld	r24, Z
    200a:	91 81       	ldd	r25, Z+1	; 0x01
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	f1 f7       	brne	.-4      	; 0x200c <LCD_voidLatch+0x19e>
    2010:	fe 01       	movw	r30, r28
    2012:	e7 5b       	subi	r30, 0xB7	; 183
    2014:	ff 4f       	sbci	r31, 0xFF	; 255
    2016:	91 83       	std	Z+1, r25	; 0x01
    2018:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    201a:	de 01       	movw	r26, r28
    201c:	a5 5b       	subi	r26, 0xB5	; 181
    201e:	bf 4f       	sbci	r27, 0xFF	; 255
    2020:	fe 01       	movw	r30, r28
    2022:	e5 5b       	subi	r30, 0xB5	; 181
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	80 81       	ld	r24, Z
    2028:	91 81       	ldd	r25, Z+1	; 0x01
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	11 96       	adiw	r26, 0x01	; 1
    202e:	9c 93       	st	X, r25
    2030:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2032:	fe 01       	movw	r30, r28
    2034:	e5 5b       	subi	r30, 0xB5	; 181
    2036:	ff 4f       	sbci	r31, 0xFF	; 255
    2038:	80 81       	ld	r24, Z
    203a:	91 81       	ldd	r25, Z+1	; 0x01
    203c:	00 97       	sbiw	r24, 0x00	; 0
    203e:	d1 f6       	brne	.-76     	; 0x1ff4 <LCD_voidLatch+0x186>
    2040:	27 c0       	rjmp	.+78     	; 0x2090 <LCD_voidLatch+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2042:	8e 01       	movw	r16, r28
    2044:	05 5b       	subi	r16, 0xB5	; 181
    2046:	1f 4f       	sbci	r17, 0xFF	; 255
    2048:	fe 01       	movw	r30, r28
    204a:	e3 5b       	subi	r30, 0xB3	; 179
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	60 81       	ld	r22, Z
    2050:	71 81       	ldd	r23, Z+1	; 0x01
    2052:	82 81       	ldd	r24, Z+2	; 0x02
    2054:	93 81       	ldd	r25, Z+3	; 0x03
    2056:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	f8 01       	movw	r30, r16
    2060:	91 83       	std	Z+1, r25	; 0x01
    2062:	80 83       	st	Z, r24
    2064:	de 01       	movw	r26, r28
    2066:	a9 5b       	subi	r26, 0xB9	; 185
    2068:	bf 4f       	sbci	r27, 0xFF	; 255
    206a:	fe 01       	movw	r30, r28
    206c:	e5 5b       	subi	r30, 0xB5	; 181
    206e:	ff 4f       	sbci	r31, 0xFF	; 255
    2070:	80 81       	ld	r24, Z
    2072:	91 81       	ldd	r25, Z+1	; 0x01
    2074:	8d 93       	st	X+, r24
    2076:	9c 93       	st	X, r25
    2078:	fe 01       	movw	r30, r28
    207a:	e9 5b       	subi	r30, 0xB9	; 185
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	80 81       	ld	r24, Z
    2080:	91 81       	ldd	r25, Z+1	; 0x01
    2082:	01 97       	sbiw	r24, 0x01	; 1
    2084:	f1 f7       	brne	.-4      	; 0x2082 <LCD_voidLatch+0x214>
    2086:	fe 01       	movw	r30, r28
    2088:	e9 5b       	subi	r30, 0xB9	; 185
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	91 83       	std	Z+1, r25	; 0x01
    208e:	80 83       	st	Z, r24
		_delay_ms(10);
		/*give zero to end the pulse */
		DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8LOW);
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	67 e0       	ldi	r22, 0x07	; 7
    2094:	40 e0       	ldi	r20, 0x00	; 0
    2096:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
    209a:	fe 01       	movw	r30, r28
    209c:	ed 5b       	subi	r30, 0xBD	; 189
    209e:	ff 4f       	sbci	r31, 0xFF	; 255
    20a0:	80 e0       	ldi	r24, 0x00	; 0
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	a8 e4       	ldi	r26, 0x48	; 72
    20a6:	b2 e4       	ldi	r27, 0x42	; 66
    20a8:	80 83       	st	Z, r24
    20aa:	91 83       	std	Z+1, r25	; 0x01
    20ac:	a2 83       	std	Z+2, r26	; 0x02
    20ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b0:	8e 01       	movw	r16, r28
    20b2:	01 5c       	subi	r16, 0xC1	; 193
    20b4:	1f 4f       	sbci	r17, 0xFF	; 255
    20b6:	fe 01       	movw	r30, r28
    20b8:	ed 5b       	subi	r30, 0xBD	; 189
    20ba:	ff 4f       	sbci	r31, 0xFF	; 255
    20bc:	60 81       	ld	r22, Z
    20be:	71 81       	ldd	r23, Z+1	; 0x01
    20c0:	82 81       	ldd	r24, Z+2	; 0x02
    20c2:	93 81       	ldd	r25, Z+3	; 0x03
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	4a e7       	ldi	r20, 0x7A	; 122
    20ca:	53 e4       	ldi	r21, 0x43	; 67
    20cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	f8 01       	movw	r30, r16
    20d6:	80 83       	st	Z, r24
    20d8:	91 83       	std	Z+1, r25	; 0x01
    20da:	a2 83       	std	Z+2, r26	; 0x02
    20dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20de:	fe 01       	movw	r30, r28
    20e0:	ff 96       	adiw	r30, 0x3f	; 63
    20e2:	60 81       	ld	r22, Z
    20e4:	71 81       	ldd	r23, Z+1	; 0x01
    20e6:	82 81       	ldd	r24, Z+2	; 0x02
    20e8:	93 81       	ldd	r25, Z+3	; 0x03
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	40 e8       	ldi	r20, 0x80	; 128
    20f0:	5f e3       	ldi	r21, 0x3F	; 63
    20f2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20f6:	88 23       	and	r24, r24
    20f8:	2c f4       	brge	.+10     	; 0x2104 <LCD_voidLatch+0x296>
		__ticks = 1;
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	9e af       	std	Y+62, r25	; 0x3e
    2100:	8d af       	std	Y+61, r24	; 0x3d
    2102:	46 c0       	rjmp	.+140    	; 0x2190 <LCD_voidLatch+0x322>
	else if (__tmp > 65535)
    2104:	fe 01       	movw	r30, r28
    2106:	ff 96       	adiw	r30, 0x3f	; 63
    2108:	60 81       	ld	r22, Z
    210a:	71 81       	ldd	r23, Z+1	; 0x01
    210c:	82 81       	ldd	r24, Z+2	; 0x02
    210e:	93 81       	ldd	r25, Z+3	; 0x03
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	3f ef       	ldi	r19, 0xFF	; 255
    2114:	4f e7       	ldi	r20, 0x7F	; 127
    2116:	57 e4       	ldi	r21, 0x47	; 71
    2118:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    211c:	18 16       	cp	r1, r24
    211e:	64 f5       	brge	.+88     	; 0x2178 <LCD_voidLatch+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2120:	fe 01       	movw	r30, r28
    2122:	ed 5b       	subi	r30, 0xBD	; 189
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	60 81       	ld	r22, Z
    2128:	71 81       	ldd	r23, Z+1	; 0x01
    212a:	82 81       	ldd	r24, Z+2	; 0x02
    212c:	93 81       	ldd	r25, Z+3	; 0x03
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	40 e2       	ldi	r20, 0x20	; 32
    2134:	51 e4       	ldi	r21, 0x41	; 65
    2136:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	bc 01       	movw	r22, r24
    2140:	cd 01       	movw	r24, r26
    2142:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	9e af       	std	Y+62, r25	; 0x3e
    214c:	8d af       	std	Y+61, r24	; 0x3d
    214e:	0f c0       	rjmp	.+30     	; 0x216e <LCD_voidLatch+0x300>
    2150:	89 e1       	ldi	r24, 0x19	; 25
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	9c af       	std	Y+60, r25	; 0x3c
    2156:	8b af       	std	Y+59, r24	; 0x3b
    2158:	8b ad       	ldd	r24, Y+59	; 0x3b
    215a:	9c ad       	ldd	r25, Y+60	; 0x3c
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	f1 f7       	brne	.-4      	; 0x215c <LCD_voidLatch+0x2ee>
    2160:	9c af       	std	Y+60, r25	; 0x3c
    2162:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2164:	8d ad       	ldd	r24, Y+61	; 0x3d
    2166:	9e ad       	ldd	r25, Y+62	; 0x3e
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	9e af       	std	Y+62, r25	; 0x3e
    216c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2170:	9e ad       	ldd	r25, Y+62	; 0x3e
    2172:	00 97       	sbiw	r24, 0x00	; 0
    2174:	69 f7       	brne	.-38     	; 0x2150 <LCD_voidLatch+0x2e2>
    2176:	16 c0       	rjmp	.+44     	; 0x21a4 <LCD_voidLatch+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2178:	fe 01       	movw	r30, r28
    217a:	ff 96       	adiw	r30, 0x3f	; 63
    217c:	60 81       	ld	r22, Z
    217e:	71 81       	ldd	r23, Z+1	; 0x01
    2180:	82 81       	ldd	r24, Z+2	; 0x02
    2182:	93 81       	ldd	r25, Z+3	; 0x03
    2184:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	9e af       	std	Y+62, r25	; 0x3e
    218e:	8d af       	std	Y+61, r24	; 0x3d
    2190:	8d ad       	ldd	r24, Y+61	; 0x3d
    2192:	9e ad       	ldd	r25, Y+62	; 0x3e
    2194:	9a af       	std	Y+58, r25	; 0x3a
    2196:	89 af       	std	Y+57, r24	; 0x39
    2198:	89 ad       	ldd	r24, Y+57	; 0x39
    219a:	9a ad       	ldd	r25, Y+58	; 0x3a
    219c:	01 97       	sbiw	r24, 0x01	; 1
    219e:	f1 f7       	brne	.-4      	; 0x219c <LCD_voidLatch+0x32e>
    21a0:	9a af       	std	Y+58, r25	; 0x3a
    21a2:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(50);

		DIO_enuSet_PinValue(D7_PORT , D7_PIN ,(((Copy_u8Data>>D_D7)&GetMusk)));
    21a4:	fe 01       	movw	r30, r28
    21a6:	eb 5a       	subi	r30, 0xAB	; 171
    21a8:	ff 4f       	sbci	r31, 0xFF	; 255
    21aa:	80 81       	ld	r24, Z
    21ac:	98 2f       	mov	r25, r24
    21ae:	99 1f       	adc	r25, r25
    21b0:	99 27       	eor	r25, r25
    21b2:	99 1f       	adc	r25, r25
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	60 e0       	ldi	r22, 0x00	; 0
    21b8:	49 2f       	mov	r20, r25
    21ba:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
		DIO_enuSet_PinValue(D6_PORT , D6_PIN ,(((Copy_u8Data>>D_D6)&GetMusk))) ;
    21be:	fe 01       	movw	r30, r28
    21c0:	eb 5a       	subi	r30, 0xAB	; 171
    21c2:	ff 4f       	sbci	r31, 0xFF	; 255
    21c4:	80 81       	ld	r24, Z
    21c6:	82 95       	swap	r24
    21c8:	86 95       	lsr	r24
    21ca:	86 95       	lsr	r24
    21cc:	83 70       	andi	r24, 0x03	; 3
    21ce:	98 2f       	mov	r25, r24
    21d0:	91 70       	andi	r25, 0x01	; 1
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	63 e0       	ldi	r22, 0x03	; 3
    21d6:	49 2f       	mov	r20, r25
    21d8:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
		DIO_enuSet_PinValue(D5_PORT , D5_PIN ,(((Copy_u8Data>>D_D5)&GetMusk))) ;
    21dc:	fe 01       	movw	r30, r28
    21de:	eb 5a       	subi	r30, 0xAB	; 171
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	80 81       	ld	r24, Z
    21e4:	82 95       	swap	r24
    21e6:	86 95       	lsr	r24
    21e8:	87 70       	andi	r24, 0x07	; 7
    21ea:	98 2f       	mov	r25, r24
    21ec:	91 70       	andi	r25, 0x01	; 1
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	61 e0       	ldi	r22, 0x01	; 1
    21f2:	49 2f       	mov	r20, r25
    21f4:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
		DIO_enuSet_PinValue(D4_PORT , D4_PIN ,(((Copy_u8Data>>D_D4)&GetMusk))) ;
    21f8:	fe 01       	movw	r30, r28
    21fa:	eb 5a       	subi	r30, 0xAB	; 171
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	80 81       	ld	r24, Z
    2200:	82 95       	swap	r24
    2202:	8f 70       	andi	r24, 0x0F	; 15
    2204:	98 2f       	mov	r25, r24
    2206:	91 70       	andi	r25, 0x01	; 1
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	62 e0       	ldi	r22, 0x02	; 2
    220c:	49 2f       	mov	r20, r25
    220e:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
	}
	/* give enable high to start duration of pulse*/
	DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8HIGH);
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	67 e0       	ldi	r22, 0x07	; 7
    2216:	41 e0       	ldi	r20, 0x01	; 1
    2218:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	a0 e2       	ldi	r26, 0x20	; 32
    2222:	b1 e4       	ldi	r27, 0x41	; 65
    2224:	8d ab       	std	Y+53, r24	; 0x35
    2226:	9e ab       	std	Y+54, r25	; 0x36
    2228:	af ab       	std	Y+55, r26	; 0x37
    222a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    222c:	6d a9       	ldd	r22, Y+53	; 0x35
    222e:	7e a9       	ldd	r23, Y+54	; 0x36
    2230:	8f a9       	ldd	r24, Y+55	; 0x37
    2232:	98 ad       	ldd	r25, Y+56	; 0x38
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	4a e7       	ldi	r20, 0x7A	; 122
    223a:	53 e4       	ldi	r21, 0x43	; 67
    223c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	89 ab       	std	Y+49, r24	; 0x31
    2246:	9a ab       	std	Y+50, r25	; 0x32
    2248:	ab ab       	std	Y+51, r26	; 0x33
    224a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    224c:	69 a9       	ldd	r22, Y+49	; 0x31
    224e:	7a a9       	ldd	r23, Y+50	; 0x32
    2250:	8b a9       	ldd	r24, Y+51	; 0x33
    2252:	9c a9       	ldd	r25, Y+52	; 0x34
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e8       	ldi	r20, 0x80	; 128
    225a:	5f e3       	ldi	r21, 0x3F	; 63
    225c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2260:	88 23       	and	r24, r24
    2262:	2c f4       	brge	.+10     	; 0x226e <LCD_voidLatch+0x400>
		__ticks = 1;
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	98 ab       	std	Y+48, r25	; 0x30
    226a:	8f a7       	std	Y+47, r24	; 0x2f
    226c:	3f c0       	rjmp	.+126    	; 0x22ec <LCD_voidLatch+0x47e>
	else if (__tmp > 65535)
    226e:	69 a9       	ldd	r22, Y+49	; 0x31
    2270:	7a a9       	ldd	r23, Y+50	; 0x32
    2272:	8b a9       	ldd	r24, Y+51	; 0x33
    2274:	9c a9       	ldd	r25, Y+52	; 0x34
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	3f ef       	ldi	r19, 0xFF	; 255
    227a:	4f e7       	ldi	r20, 0x7F	; 127
    227c:	57 e4       	ldi	r21, 0x47	; 71
    227e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2282:	18 16       	cp	r1, r24
    2284:	4c f5       	brge	.+82     	; 0x22d8 <LCD_voidLatch+0x46a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2286:	6d a9       	ldd	r22, Y+53	; 0x35
    2288:	7e a9       	ldd	r23, Y+54	; 0x36
    228a:	8f a9       	ldd	r24, Y+55	; 0x37
    228c:	98 ad       	ldd	r25, Y+56	; 0x38
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e2       	ldi	r20, 0x20	; 32
    2294:	51 e4       	ldi	r21, 0x41	; 65
    2296:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	bc 01       	movw	r22, r24
    22a0:	cd 01       	movw	r24, r26
    22a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	98 ab       	std	Y+48, r25	; 0x30
    22ac:	8f a7       	std	Y+47, r24	; 0x2f
    22ae:	0f c0       	rjmp	.+30     	; 0x22ce <LCD_voidLatch+0x460>
    22b0:	89 e1       	ldi	r24, 0x19	; 25
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	9e a7       	std	Y+46, r25	; 0x2e
    22b6:	8d a7       	std	Y+45, r24	; 0x2d
    22b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    22ba:	9e a5       	ldd	r25, Y+46	; 0x2e
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	f1 f7       	brne	.-4      	; 0x22bc <LCD_voidLatch+0x44e>
    22c0:	9e a7       	std	Y+46, r25	; 0x2e
    22c2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    22c6:	98 a9       	ldd	r25, Y+48	; 0x30
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	98 ab       	std	Y+48, r25	; 0x30
    22cc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    22d0:	98 a9       	ldd	r25, Y+48	; 0x30
    22d2:	00 97       	sbiw	r24, 0x00	; 0
    22d4:	69 f7       	brne	.-38     	; 0x22b0 <LCD_voidLatch+0x442>
    22d6:	14 c0       	rjmp	.+40     	; 0x2300 <LCD_voidLatch+0x492>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d8:	69 a9       	ldd	r22, Y+49	; 0x31
    22da:	7a a9       	ldd	r23, Y+50	; 0x32
    22dc:	8b a9       	ldd	r24, Y+51	; 0x33
    22de:	9c a9       	ldd	r25, Y+52	; 0x34
    22e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	98 ab       	std	Y+48, r25	; 0x30
    22ea:	8f a7       	std	Y+47, r24	; 0x2f
    22ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    22ee:	98 a9       	ldd	r25, Y+48	; 0x30
    22f0:	9c a7       	std	Y+44, r25	; 0x2c
    22f2:	8b a7       	std	Y+43, r24	; 0x2b
    22f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    22f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	f1 f7       	brne	.-4      	; 0x22f8 <LCD_voidLatch+0x48a>
    22fc:	9c a7       	std	Y+44, r25	; 0x2c
    22fe:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	/*give zero to end the pulse */
	DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8LOW);
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	67 e0       	ldi	r22, 0x07	; 7
    2304:	40 e0       	ldi	r20, 0x00	; 0
    2306:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	a0 e2       	ldi	r26, 0x20	; 32
    2310:	b1 e4       	ldi	r27, 0x41	; 65
    2312:	8f a3       	std	Y+39, r24	; 0x27
    2314:	98 a7       	std	Y+40, r25	; 0x28
    2316:	a9 a7       	std	Y+41, r26	; 0x29
    2318:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    231a:	6f a1       	ldd	r22, Y+39	; 0x27
    231c:	78 a5       	ldd	r23, Y+40	; 0x28
    231e:	89 a5       	ldd	r24, Y+41	; 0x29
    2320:	9a a5       	ldd	r25, Y+42	; 0x2a
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	4a e7       	ldi	r20, 0x7A	; 122
    2328:	53 e4       	ldi	r21, 0x43	; 67
    232a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	8b a3       	std	Y+35, r24	; 0x23
    2334:	9c a3       	std	Y+36, r25	; 0x24
    2336:	ad a3       	std	Y+37, r26	; 0x25
    2338:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    233a:	6b a1       	ldd	r22, Y+35	; 0x23
    233c:	7c a1       	ldd	r23, Y+36	; 0x24
    233e:	8d a1       	ldd	r24, Y+37	; 0x25
    2340:	9e a1       	ldd	r25, Y+38	; 0x26
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	40 e8       	ldi	r20, 0x80	; 128
    2348:	5f e3       	ldi	r21, 0x3F	; 63
    234a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    234e:	88 23       	and	r24, r24
    2350:	2c f4       	brge	.+10     	; 0x235c <LCD_voidLatch+0x4ee>
		__ticks = 1;
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	9a a3       	std	Y+34, r25	; 0x22
    2358:	89 a3       	std	Y+33, r24	; 0x21
    235a:	3f c0       	rjmp	.+126    	; 0x23da <LCD_voidLatch+0x56c>
	else if (__tmp > 65535)
    235c:	6b a1       	ldd	r22, Y+35	; 0x23
    235e:	7c a1       	ldd	r23, Y+36	; 0x24
    2360:	8d a1       	ldd	r24, Y+37	; 0x25
    2362:	9e a1       	ldd	r25, Y+38	; 0x26
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	3f ef       	ldi	r19, 0xFF	; 255
    2368:	4f e7       	ldi	r20, 0x7F	; 127
    236a:	57 e4       	ldi	r21, 0x47	; 71
    236c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2370:	18 16       	cp	r1, r24
    2372:	4c f5       	brge	.+82     	; 0x23c6 <LCD_voidLatch+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2374:	6f a1       	ldd	r22, Y+39	; 0x27
    2376:	78 a5       	ldd	r23, Y+40	; 0x28
    2378:	89 a5       	ldd	r24, Y+41	; 0x29
    237a:	9a a5       	ldd	r25, Y+42	; 0x2a
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	40 e2       	ldi	r20, 0x20	; 32
    2382:	51 e4       	ldi	r21, 0x41	; 65
    2384:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	bc 01       	movw	r22, r24
    238e:	cd 01       	movw	r24, r26
    2390:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	9a a3       	std	Y+34, r25	; 0x22
    239a:	89 a3       	std	Y+33, r24	; 0x21
    239c:	0f c0       	rjmp	.+30     	; 0x23bc <LCD_voidLatch+0x54e>
    239e:	89 e1       	ldi	r24, 0x19	; 25
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	98 a3       	std	Y+32, r25	; 0x20
    23a4:	8f 8f       	std	Y+31, r24	; 0x1f
    23a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23a8:	98 a1       	ldd	r25, Y+32	; 0x20
    23aa:	01 97       	sbiw	r24, 0x01	; 1
    23ac:	f1 f7       	brne	.-4      	; 0x23aa <LCD_voidLatch+0x53c>
    23ae:	98 a3       	std	Y+32, r25	; 0x20
    23b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b2:	89 a1       	ldd	r24, Y+33	; 0x21
    23b4:	9a a1       	ldd	r25, Y+34	; 0x22
    23b6:	01 97       	sbiw	r24, 0x01	; 1
    23b8:	9a a3       	std	Y+34, r25	; 0x22
    23ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23bc:	89 a1       	ldd	r24, Y+33	; 0x21
    23be:	9a a1       	ldd	r25, Y+34	; 0x22
    23c0:	00 97       	sbiw	r24, 0x00	; 0
    23c2:	69 f7       	brne	.-38     	; 0x239e <LCD_voidLatch+0x530>
    23c4:	14 c0       	rjmp	.+40     	; 0x23ee <LCD_voidLatch+0x580>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c6:	6b a1       	ldd	r22, Y+35	; 0x23
    23c8:	7c a1       	ldd	r23, Y+36	; 0x24
    23ca:	8d a1       	ldd	r24, Y+37	; 0x25
    23cc:	9e a1       	ldd	r25, Y+38	; 0x26
    23ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	9a a3       	std	Y+34, r25	; 0x22
    23d8:	89 a3       	std	Y+33, r24	; 0x21
    23da:	89 a1       	ldd	r24, Y+33	; 0x21
    23dc:	9a a1       	ldd	r25, Y+34	; 0x22
    23de:	9e 8f       	std	Y+30, r25	; 0x1e
    23e0:	8d 8f       	std	Y+29, r24	; 0x1d
    23e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	f1 f7       	brne	.-4      	; 0x23e6 <LCD_voidLatch+0x578>
    23ea:	9e 8f       	std	Y+30, r25	; 0x1e
    23ec:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);

	DIO_enuSet_PinValue(D7_PORT , D7_PIN ,(((Copy_u8Data>>D_D3)&GetMusk)));
    23ee:	fe 01       	movw	r30, r28
    23f0:	eb 5a       	subi	r30, 0xAB	; 171
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	80 81       	ld	r24, Z
    23f6:	86 95       	lsr	r24
    23f8:	86 95       	lsr	r24
    23fa:	86 95       	lsr	r24
    23fc:	98 2f       	mov	r25, r24
    23fe:	91 70       	andi	r25, 0x01	; 1
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	60 e0       	ldi	r22, 0x00	; 0
    2404:	49 2f       	mov	r20, r25
    2406:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(D6_PORT , D6_PIN ,(((Copy_u8Data>>D_D2)&GetMusk))) ;
    240a:	fe 01       	movw	r30, r28
    240c:	eb 5a       	subi	r30, 0xAB	; 171
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	80 81       	ld	r24, Z
    2412:	86 95       	lsr	r24
    2414:	86 95       	lsr	r24
    2416:	98 2f       	mov	r25, r24
    2418:	91 70       	andi	r25, 0x01	; 1
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	63 e0       	ldi	r22, 0x03	; 3
    241e:	49 2f       	mov	r20, r25
    2420:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(D5_PORT , D5_PIN ,(((Copy_u8Data>>D_D1)&GetMusk))) ;
    2424:	fe 01       	movw	r30, r28
    2426:	eb 5a       	subi	r30, 0xAB	; 171
    2428:	ff 4f       	sbci	r31, 0xFF	; 255
    242a:	80 81       	ld	r24, Z
    242c:	86 95       	lsr	r24
    242e:	98 2f       	mov	r25, r24
    2430:	91 70       	andi	r25, 0x01	; 1
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	61 e0       	ldi	r22, 0x01	; 1
    2436:	49 2f       	mov	r20, r25
    2438:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(D4_PORT , D4_PIN ,(((Copy_u8Data>>D_D0)&GetMusk))) ;
    243c:	fe 01       	movw	r30, r28
    243e:	eb 5a       	subi	r30, 0xAB	; 171
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	80 81       	ld	r24, Z
    2444:	98 2f       	mov	r25, r24
    2446:	91 70       	andi	r25, 0x01	; 1
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	62 e0       	ldi	r22, 0x02	; 2
    244c:	49 2f       	mov	r20, r25
    244e:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
#endif

	/* give enable high to start duration of pulse*/
	DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8HIGH);
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	67 e0       	ldi	r22, 0x07	; 7
    2456:	41 e0       	ldi	r20, 0x01	; 1
    2458:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	a0 e2       	ldi	r26, 0x20	; 32
    2462:	b1 e4       	ldi	r27, 0x41	; 65
    2464:	89 8f       	std	Y+25, r24	; 0x19
    2466:	9a 8f       	std	Y+26, r25	; 0x1a
    2468:	ab 8f       	std	Y+27, r26	; 0x1b
    246a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    246c:	69 8d       	ldd	r22, Y+25	; 0x19
    246e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2470:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2472:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	4a e7       	ldi	r20, 0x7A	; 122
    247a:	53 e4       	ldi	r21, 0x43	; 67
    247c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	8d 8b       	std	Y+21, r24	; 0x15
    2486:	9e 8b       	std	Y+22, r25	; 0x16
    2488:	af 8b       	std	Y+23, r26	; 0x17
    248a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    248c:	6d 89       	ldd	r22, Y+21	; 0x15
    248e:	7e 89       	ldd	r23, Y+22	; 0x16
    2490:	8f 89       	ldd	r24, Y+23	; 0x17
    2492:	98 8d       	ldd	r25, Y+24	; 0x18
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	40 e8       	ldi	r20, 0x80	; 128
    249a:	5f e3       	ldi	r21, 0x3F	; 63
    249c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    24a0:	88 23       	and	r24, r24
    24a2:	2c f4       	brge	.+10     	; 0x24ae <LCD_voidLatch+0x640>
		__ticks = 1;
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	9c 8b       	std	Y+20, r25	; 0x14
    24aa:	8b 8b       	std	Y+19, r24	; 0x13
    24ac:	3f c0       	rjmp	.+126    	; 0x252c <LCD_voidLatch+0x6be>
	else if (__tmp > 65535)
    24ae:	6d 89       	ldd	r22, Y+21	; 0x15
    24b0:	7e 89       	ldd	r23, Y+22	; 0x16
    24b2:	8f 89       	ldd	r24, Y+23	; 0x17
    24b4:	98 8d       	ldd	r25, Y+24	; 0x18
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	3f ef       	ldi	r19, 0xFF	; 255
    24ba:	4f e7       	ldi	r20, 0x7F	; 127
    24bc:	57 e4       	ldi	r21, 0x47	; 71
    24be:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24c2:	18 16       	cp	r1, r24
    24c4:	4c f5       	brge	.+82     	; 0x2518 <LCD_voidLatch+0x6aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c6:	69 8d       	ldd	r22, Y+25	; 0x19
    24c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	40 e2       	ldi	r20, 0x20	; 32
    24d4:	51 e4       	ldi	r21, 0x41	; 65
    24d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	bc 01       	movw	r22, r24
    24e0:	cd 01       	movw	r24, r26
    24e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	9c 8b       	std	Y+20, r25	; 0x14
    24ec:	8b 8b       	std	Y+19, r24	; 0x13
    24ee:	0f c0       	rjmp	.+30     	; 0x250e <LCD_voidLatch+0x6a0>
    24f0:	89 e1       	ldi	r24, 0x19	; 25
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	9a 8b       	std	Y+18, r25	; 0x12
    24f6:	89 8b       	std	Y+17, r24	; 0x11
    24f8:	89 89       	ldd	r24, Y+17	; 0x11
    24fa:	9a 89       	ldd	r25, Y+18	; 0x12
    24fc:	01 97       	sbiw	r24, 0x01	; 1
    24fe:	f1 f7       	brne	.-4      	; 0x24fc <LCD_voidLatch+0x68e>
    2500:	9a 8b       	std	Y+18, r25	; 0x12
    2502:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2504:	8b 89       	ldd	r24, Y+19	; 0x13
    2506:	9c 89       	ldd	r25, Y+20	; 0x14
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	9c 8b       	std	Y+20, r25	; 0x14
    250c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    250e:	8b 89       	ldd	r24, Y+19	; 0x13
    2510:	9c 89       	ldd	r25, Y+20	; 0x14
    2512:	00 97       	sbiw	r24, 0x00	; 0
    2514:	69 f7       	brne	.-38     	; 0x24f0 <LCD_voidLatch+0x682>
    2516:	14 c0       	rjmp	.+40     	; 0x2540 <LCD_voidLatch+0x6d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2518:	6d 89       	ldd	r22, Y+21	; 0x15
    251a:	7e 89       	ldd	r23, Y+22	; 0x16
    251c:	8f 89       	ldd	r24, Y+23	; 0x17
    251e:	98 8d       	ldd	r25, Y+24	; 0x18
    2520:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	9c 8b       	std	Y+20, r25	; 0x14
    252a:	8b 8b       	std	Y+19, r24	; 0x13
    252c:	8b 89       	ldd	r24, Y+19	; 0x13
    252e:	9c 89       	ldd	r25, Y+20	; 0x14
    2530:	98 8b       	std	Y+16, r25	; 0x10
    2532:	8f 87       	std	Y+15, r24	; 0x0f
    2534:	8f 85       	ldd	r24, Y+15	; 0x0f
    2536:	98 89       	ldd	r25, Y+16	; 0x10
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	f1 f7       	brne	.-4      	; 0x2538 <LCD_voidLatch+0x6ca>
    253c:	98 8b       	std	Y+16, r25	; 0x10
    253e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	/*give zero to end the pulse */
	DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8LOW);
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	67 e0       	ldi	r22, 0x07	; 7
    2544:	40 e0       	ldi	r20, 0x00	; 0
    2546:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	a0 e2       	ldi	r26, 0x20	; 32
    2550:	b1 e4       	ldi	r27, 0x41	; 65
    2552:	8b 87       	std	Y+11, r24	; 0x0b
    2554:	9c 87       	std	Y+12, r25	; 0x0c
    2556:	ad 87       	std	Y+13, r26	; 0x0d
    2558:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    255a:	6b 85       	ldd	r22, Y+11	; 0x0b
    255c:	7c 85       	ldd	r23, Y+12	; 0x0c
    255e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2560:	9e 85       	ldd	r25, Y+14	; 0x0e
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	4a e7       	ldi	r20, 0x7A	; 122
    2568:	53 e4       	ldi	r21, 0x43	; 67
    256a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	8f 83       	std	Y+7, r24	; 0x07
    2574:	98 87       	std	Y+8, r25	; 0x08
    2576:	a9 87       	std	Y+9, r26	; 0x09
    2578:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    257a:	6f 81       	ldd	r22, Y+7	; 0x07
    257c:	78 85       	ldd	r23, Y+8	; 0x08
    257e:	89 85       	ldd	r24, Y+9	; 0x09
    2580:	9a 85       	ldd	r25, Y+10	; 0x0a
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	40 e8       	ldi	r20, 0x80	; 128
    2588:	5f e3       	ldi	r21, 0x3F	; 63
    258a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    258e:	88 23       	and	r24, r24
    2590:	2c f4       	brge	.+10     	; 0x259c <LCD_voidLatch+0x72e>
		__ticks = 1;
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	9e 83       	std	Y+6, r25	; 0x06
    2598:	8d 83       	std	Y+5, r24	; 0x05
    259a:	3f c0       	rjmp	.+126    	; 0x261a <LCD_voidLatch+0x7ac>
	else if (__tmp > 65535)
    259c:	6f 81       	ldd	r22, Y+7	; 0x07
    259e:	78 85       	ldd	r23, Y+8	; 0x08
    25a0:	89 85       	ldd	r24, Y+9	; 0x09
    25a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	3f ef       	ldi	r19, 0xFF	; 255
    25a8:	4f e7       	ldi	r20, 0x7F	; 127
    25aa:	57 e4       	ldi	r21, 0x47	; 71
    25ac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25b0:	18 16       	cp	r1, r24
    25b2:	4c f5       	brge	.+82     	; 0x2606 <LCD_voidLatch+0x798>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	40 e2       	ldi	r20, 0x20	; 32
    25c2:	51 e4       	ldi	r21, 0x41	; 65
    25c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	bc 01       	movw	r22, r24
    25ce:	cd 01       	movw	r24, r26
    25d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	9e 83       	std	Y+6, r25	; 0x06
    25da:	8d 83       	std	Y+5, r24	; 0x05
    25dc:	0f c0       	rjmp	.+30     	; 0x25fc <LCD_voidLatch+0x78e>
    25de:	89 e1       	ldi	r24, 0x19	; 25
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	9c 83       	std	Y+4, r25	; 0x04
    25e4:	8b 83       	std	Y+3, r24	; 0x03
    25e6:	8b 81       	ldd	r24, Y+3	; 0x03
    25e8:	9c 81       	ldd	r25, Y+4	; 0x04
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	f1 f7       	brne	.-4      	; 0x25ea <LCD_voidLatch+0x77c>
    25ee:	9c 83       	std	Y+4, r25	; 0x04
    25f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f2:	8d 81       	ldd	r24, Y+5	; 0x05
    25f4:	9e 81       	ldd	r25, Y+6	; 0x06
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	9e 83       	std	Y+6, r25	; 0x06
    25fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25fc:	8d 81       	ldd	r24, Y+5	; 0x05
    25fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2600:	00 97       	sbiw	r24, 0x00	; 0
    2602:	69 f7       	brne	.-38     	; 0x25de <LCD_voidLatch+0x770>
    2604:	14 c0       	rjmp	.+40     	; 0x262e <LCD_voidLatch+0x7c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2606:	6f 81       	ldd	r22, Y+7	; 0x07
    2608:	78 85       	ldd	r23, Y+8	; 0x08
    260a:	89 85       	ldd	r24, Y+9	; 0x09
    260c:	9a 85       	ldd	r25, Y+10	; 0x0a
    260e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	9e 83       	std	Y+6, r25	; 0x06
    2618:	8d 83       	std	Y+5, r24	; 0x05
    261a:	8d 81       	ldd	r24, Y+5	; 0x05
    261c:	9e 81       	ldd	r25, Y+6	; 0x06
    261e:	9a 83       	std	Y+2, r25	; 0x02
    2620:	89 83       	std	Y+1, r24	; 0x01
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	9a 81       	ldd	r25, Y+2	; 0x02
    2626:	01 97       	sbiw	r24, 0x01	; 1
    2628:	f1 f7       	brne	.-4      	; 0x2626 <LCD_voidLatch+0x7b8>
    262a:	9a 83       	std	Y+2, r25	; 0x02
    262c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);


}
    262e:	cb 5a       	subi	r28, 0xAB	; 171
    2630:	df 4f       	sbci	r29, 0xFF	; 255
    2632:	0f b6       	in	r0, 0x3f	; 63
    2634:	f8 94       	cli
    2636:	de bf       	out	0x3e, r29	; 62
    2638:	0f be       	out	0x3f, r0	; 63
    263a:	cd bf       	out	0x3d, r28	; 61
    263c:	cf 91       	pop	r28
    263e:	df 91       	pop	r29
    2640:	1f 91       	pop	r17
    2642:	0f 91       	pop	r16
    2644:	08 95       	ret

00002646 <LCD_enuDisplayCharacter>:
ES_t LCD_enuDisplayCharacter(u8 Copy_u8character)
{
    2646:	df 93       	push	r29
    2648:	cf 93       	push	r28
    264a:	00 d0       	rcall	.+0      	; 0x264c <LCD_enuDisplayCharacter+0x6>
    264c:	00 d0       	rcall	.+0      	; 0x264e <LCD_enuDisplayCharacter+0x8>
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_errorState=ES_NOK;
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	8a 83       	std	Y+2, r24	; 0x02
	DIO_enuSet_PinValue(RS_PORT , RS_PIN ,DIO_u8HIGH);
    2658:	80 e0       	ldi	r24, 0x00	; 0
    265a:	60 e0       	ldi	r22, 0x00	; 0
    265c:	41 e0       	ldi	r20, 0x01	; 1
    265e:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
	u8 Local_u8errorCheck=0;
    2662:	19 82       	std	Y+1, r1	; 0x01
	LCD_voidLatch( Copy_u8character );
    2664:	8b 81       	ldd	r24, Y+3	; 0x03
    2666:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <LCD_voidLatch>
	if(Local_u8errorCheck==1)
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	81 30       	cpi	r24, 0x01	; 1
    266e:	19 f4       	brne	.+6      	; 0x2676 <LCD_enuDisplayCharacter+0x30>
	{
		return Local_errorState;
    2670:	8a 81       	ldd	r24, Y+2	; 0x02
    2672:	8c 83       	std	Y+4, r24	; 0x04
    2674:	03 c0       	rjmp	.+6      	; 0x267c <LCD_enuDisplayCharacter+0x36>
	}
	else
	{
		Local_errorState=ES_OK;
    2676:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_errorState;
    2678:	8a 81       	ldd	r24, Y+2	; 0x02
    267a:	8c 83       	std	Y+4, r24	; 0x04
    267c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    267e:	0f 90       	pop	r0
    2680:	0f 90       	pop	r0
    2682:	0f 90       	pop	r0
    2684:	0f 90       	pop	r0
    2686:	cf 91       	pop	r28
    2688:	df 91       	pop	r29
    268a:	08 95       	ret

0000268c <LCD_enuSendCommond>:

ES_t LCD_enuSendCommond(u8 Copy_u8commond)
{
    268c:	df 93       	push	r29
    268e:	cf 93       	push	r28
    2690:	00 d0       	rcall	.+0      	; 0x2692 <LCD_enuSendCommond+0x6>
    2692:	00 d0       	rcall	.+0      	; 0x2694 <LCD_enuSendCommond+0x8>
    2694:	cd b7       	in	r28, 0x3d	; 61
    2696:	de b7       	in	r29, 0x3e	; 62
    2698:	8b 83       	std	Y+3, r24	; 0x03
	/* for check on error of functions */
	ES_t Local_errorState=ES_NOK;
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8errorCheck=0;
    269e:	19 82       	std	Y+1, r1	; 0x01

	/* set RS pin low for command */

	DIO_enuSet_PinValue(RS_PORT , RS_PIN ,DIO_u8LOW);
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	60 e0       	ldi	r22, 0x00	; 0
    26a4:	40 e0       	ldi	r20, 0x00	; 0
    26a6:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>

	LCD_voidLatch( Copy_u8commond  );
    26aa:	8b 81       	ldd	r24, Y+3	; 0x03
    26ac:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <LCD_voidLatch>

	if(Local_u8errorCheck==1)
    26b0:	89 81       	ldd	r24, Y+1	; 0x01
    26b2:	81 30       	cpi	r24, 0x01	; 1
    26b4:	19 f4       	brne	.+6      	; 0x26bc <LCD_enuSendCommond+0x30>
	{
		return Local_errorState;
    26b6:	8a 81       	ldd	r24, Y+2	; 0x02
    26b8:	8c 83       	std	Y+4, r24	; 0x04
    26ba:	03 c0       	rjmp	.+6      	; 0x26c2 <LCD_enuSendCommond+0x36>
	}
	else
	{
		Local_errorState=ES_OK;
    26bc:	1a 82       	std	Y+2, r1	; 0x02
	}


	return Local_errorState;
    26be:	8a 81       	ldd	r24, Y+2	; 0x02
    26c0:	8c 83       	std	Y+4, r24	; 0x04
    26c2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	0f 90       	pop	r0
    26cc:	cf 91       	pop	r28
    26ce:	df 91       	pop	r29
    26d0:	08 95       	ret

000026d2 <LCD_invidSendCommond>:

static inline void LCD_invidSendCommond(u8 Copy_u8commond)
{
    26d2:	df 93       	push	r29
    26d4:	cf 93       	push	r28
    26d6:	cd b7       	in	r28, 0x3d	; 61
    26d8:	de b7       	in	r29, 0x3e	; 62
    26da:	ab 97       	sbiw	r28, 0x2b	; 43
    26dc:	0f b6       	in	r0, 0x3f	; 63
    26de:	f8 94       	cli
    26e0:	de bf       	out	0x3e, r29	; 62
    26e2:	0f be       	out	0x3f, r0	; 63
    26e4:	cd bf       	out	0x3d, r28	; 61
    26e6:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_enuSet_PinValue(RS_PORT , RS_PIN ,DIO_u8LOW);
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	60 e0       	ldi	r22, 0x00	; 0
    26ec:	40 e0       	ldi	r20, 0x00	; 0
    26ee:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>

	DIO_enuSet_PinValue(RW_PORT , RW_PIN ,DIO_u8LOW);
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	65 e0       	ldi	r22, 0x05	; 5
    26f6:	40 e0       	ldi	r20, 0x00	; 0
    26f8:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>

	DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8LOW);
    26fc:	80 e0       	ldi	r24, 0x00	; 0
    26fe:	67 e0       	ldi	r22, 0x07	; 7
    2700:	40 e0       	ldi	r20, 0x00	; 0
    2702:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>

	DIO_enuSet_PinValue(D7_PORT , D7_PIN ,(((Copy_u8commond>>D_D7)&GetMusk)));
    2706:	8b a5       	ldd	r24, Y+43	; 0x2b
    2708:	98 2f       	mov	r25, r24
    270a:	99 1f       	adc	r25, r25
    270c:	99 27       	eor	r25, r25
    270e:	99 1f       	adc	r25, r25
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	60 e0       	ldi	r22, 0x00	; 0
    2714:	49 2f       	mov	r20, r25
    2716:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(D6_PORT , D6_PIN ,(((Copy_u8commond>>D_D6)&GetMusk)));
    271a:	8b a5       	ldd	r24, Y+43	; 0x2b
    271c:	82 95       	swap	r24
    271e:	86 95       	lsr	r24
    2720:	86 95       	lsr	r24
    2722:	83 70       	andi	r24, 0x03	; 3
    2724:	98 2f       	mov	r25, r24
    2726:	91 70       	andi	r25, 0x01	; 1
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	63 e0       	ldi	r22, 0x03	; 3
    272c:	49 2f       	mov	r20, r25
    272e:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(D5_PORT , D5_PIN ,(((Copy_u8commond>>D_D5)&GetMusk)));
    2732:	8b a5       	ldd	r24, Y+43	; 0x2b
    2734:	82 95       	swap	r24
    2736:	86 95       	lsr	r24
    2738:	87 70       	andi	r24, 0x07	; 7
    273a:	98 2f       	mov	r25, r24
    273c:	91 70       	andi	r25, 0x01	; 1
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	61 e0       	ldi	r22, 0x01	; 1
    2742:	49 2f       	mov	r20, r25
    2744:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(D4_PORT , D4_PIN ,(((Copy_u8commond>>D_D4)&GetMusk)));
    2748:	8b a5       	ldd	r24, Y+43	; 0x2b
    274a:	82 95       	swap	r24
    274c:	8f 70       	andi	r24, 0x0F	; 15
    274e:	98 2f       	mov	r25, r24
    2750:	91 70       	andi	r25, 0x01	; 1
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	62 e0       	ldi	r22, 0x02	; 2
    2756:	49 2f       	mov	r20, r25
    2758:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8HIGH);
	_delay_ms(10);

	DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8LOW);
#elif LCD_MODE==FOUR_BIT
	if(Copy_u8commond==Fun_Set_4b)
    275c:	8b a5       	ldd	r24, Y+43	; 0x2b
    275e:	88 32       	cpi	r24, 0x28	; 40
    2760:	09 f0       	breq	.+2      	; 0x2764 <LCD_invidSendCommond+0x92>
    2762:	a7 c0       	rjmp	.+334    	; 0x28b2 <LCD_invidSendCommond+0x1e0>
	{
		DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8HIGH);
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	67 e0       	ldi	r22, 0x07	; 7
    2768:	41 e0       	ldi	r20, 0x01	; 1
    276a:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	a0 e2       	ldi	r26, 0x20	; 32
    2774:	b1 e4       	ldi	r27, 0x41	; 65
    2776:	8f a3       	std	Y+39, r24	; 0x27
    2778:	98 a7       	std	Y+40, r25	; 0x28
    277a:	a9 a7       	std	Y+41, r26	; 0x29
    277c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    277e:	6f a1       	ldd	r22, Y+39	; 0x27
    2780:	78 a5       	ldd	r23, Y+40	; 0x28
    2782:	89 a5       	ldd	r24, Y+41	; 0x29
    2784:	9a a5       	ldd	r25, Y+42	; 0x2a
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	4a e7       	ldi	r20, 0x7A	; 122
    278c:	53 e4       	ldi	r21, 0x43	; 67
    278e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	8b a3       	std	Y+35, r24	; 0x23
    2798:	9c a3       	std	Y+36, r25	; 0x24
    279a:	ad a3       	std	Y+37, r26	; 0x25
    279c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    279e:	6b a1       	ldd	r22, Y+35	; 0x23
    27a0:	7c a1       	ldd	r23, Y+36	; 0x24
    27a2:	8d a1       	ldd	r24, Y+37	; 0x25
    27a4:	9e a1       	ldd	r25, Y+38	; 0x26
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	40 e8       	ldi	r20, 0x80	; 128
    27ac:	5f e3       	ldi	r21, 0x3F	; 63
    27ae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    27b2:	88 23       	and	r24, r24
    27b4:	2c f4       	brge	.+10     	; 0x27c0 <LCD_invidSendCommond+0xee>
		__ticks = 1;
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	9a a3       	std	Y+34, r25	; 0x22
    27bc:	89 a3       	std	Y+33, r24	; 0x21
    27be:	3f c0       	rjmp	.+126    	; 0x283e <LCD_invidSendCommond+0x16c>
	else if (__tmp > 65535)
    27c0:	6b a1       	ldd	r22, Y+35	; 0x23
    27c2:	7c a1       	ldd	r23, Y+36	; 0x24
    27c4:	8d a1       	ldd	r24, Y+37	; 0x25
    27c6:	9e a1       	ldd	r25, Y+38	; 0x26
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	3f ef       	ldi	r19, 0xFF	; 255
    27cc:	4f e7       	ldi	r20, 0x7F	; 127
    27ce:	57 e4       	ldi	r21, 0x47	; 71
    27d0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27d4:	18 16       	cp	r1, r24
    27d6:	4c f5       	brge	.+82     	; 0x282a <LCD_invidSendCommond+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d8:	6f a1       	ldd	r22, Y+39	; 0x27
    27da:	78 a5       	ldd	r23, Y+40	; 0x28
    27dc:	89 a5       	ldd	r24, Y+41	; 0x29
    27de:	9a a5       	ldd	r25, Y+42	; 0x2a
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	40 e2       	ldi	r20, 0x20	; 32
    27e6:	51 e4       	ldi	r21, 0x41	; 65
    27e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	bc 01       	movw	r22, r24
    27f2:	cd 01       	movw	r24, r26
    27f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27f8:	dc 01       	movw	r26, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	9a a3       	std	Y+34, r25	; 0x22
    27fe:	89 a3       	std	Y+33, r24	; 0x21
    2800:	0f c0       	rjmp	.+30     	; 0x2820 <LCD_invidSendCommond+0x14e>
    2802:	89 e1       	ldi	r24, 0x19	; 25
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	98 a3       	std	Y+32, r25	; 0x20
    2808:	8f 8f       	std	Y+31, r24	; 0x1f
    280a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    280c:	98 a1       	ldd	r25, Y+32	; 0x20
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	f1 f7       	brne	.-4      	; 0x280e <LCD_invidSendCommond+0x13c>
    2812:	98 a3       	std	Y+32, r25	; 0x20
    2814:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2816:	89 a1       	ldd	r24, Y+33	; 0x21
    2818:	9a a1       	ldd	r25, Y+34	; 0x22
    281a:	01 97       	sbiw	r24, 0x01	; 1
    281c:	9a a3       	std	Y+34, r25	; 0x22
    281e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2820:	89 a1       	ldd	r24, Y+33	; 0x21
    2822:	9a a1       	ldd	r25, Y+34	; 0x22
    2824:	00 97       	sbiw	r24, 0x00	; 0
    2826:	69 f7       	brne	.-38     	; 0x2802 <LCD_invidSendCommond+0x130>
    2828:	14 c0       	rjmp	.+40     	; 0x2852 <LCD_invidSendCommond+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    282a:	6b a1       	ldd	r22, Y+35	; 0x23
    282c:	7c a1       	ldd	r23, Y+36	; 0x24
    282e:	8d a1       	ldd	r24, Y+37	; 0x25
    2830:	9e a1       	ldd	r25, Y+38	; 0x26
    2832:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	9a a3       	std	Y+34, r25	; 0x22
    283c:	89 a3       	std	Y+33, r24	; 0x21
    283e:	89 a1       	ldd	r24, Y+33	; 0x21
    2840:	9a a1       	ldd	r25, Y+34	; 0x22
    2842:	9e 8f       	std	Y+30, r25	; 0x1e
    2844:	8d 8f       	std	Y+29, r24	; 0x1d
    2846:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2848:	9e 8d       	ldd	r25, Y+30	; 0x1e
    284a:	01 97       	sbiw	r24, 0x01	; 1
    284c:	f1 f7       	brne	.-4      	; 0x284a <LCD_invidSendCommond+0x178>
    284e:	9e 8f       	std	Y+30, r25	; 0x1e
    2850:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8LOW);
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	67 e0       	ldi	r22, 0x07	; 7
    2856:	40 e0       	ldi	r20, 0x00	; 0
    2858:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>

		DIO_enuSet_PinValue(D7_PORT , D7_PIN ,(((Copy_u8commond>>D_D7)&GetMusk)));
    285c:	8b a5       	ldd	r24, Y+43	; 0x2b
    285e:	98 2f       	mov	r25, r24
    2860:	99 1f       	adc	r25, r25
    2862:	99 27       	eor	r25, r25
    2864:	99 1f       	adc	r25, r25
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	60 e0       	ldi	r22, 0x00	; 0
    286a:	49 2f       	mov	r20, r25
    286c:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
		DIO_enuSet_PinValue(D6_PORT , D6_PIN ,(((Copy_u8commond>>D_D6)&GetMusk)));
    2870:	8b a5       	ldd	r24, Y+43	; 0x2b
    2872:	82 95       	swap	r24
    2874:	86 95       	lsr	r24
    2876:	86 95       	lsr	r24
    2878:	83 70       	andi	r24, 0x03	; 3
    287a:	98 2f       	mov	r25, r24
    287c:	91 70       	andi	r25, 0x01	; 1
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	63 e0       	ldi	r22, 0x03	; 3
    2882:	49 2f       	mov	r20, r25
    2884:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
		DIO_enuSet_PinValue(D5_PORT , D5_PIN ,(((Copy_u8commond>>D_D5)&GetMusk)));
    2888:	8b a5       	ldd	r24, Y+43	; 0x2b
    288a:	82 95       	swap	r24
    288c:	86 95       	lsr	r24
    288e:	87 70       	andi	r24, 0x07	; 7
    2890:	98 2f       	mov	r25, r24
    2892:	91 70       	andi	r25, 0x01	; 1
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	61 e0       	ldi	r22, 0x01	; 1
    2898:	49 2f       	mov	r20, r25
    289a:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
		DIO_enuSet_PinValue(D4_PORT , D4_PIN ,(((Copy_u8commond>>D_D4)&GetMusk)));
    289e:	8b a5       	ldd	r24, Y+43	; 0x2b
    28a0:	82 95       	swap	r24
    28a2:	8f 70       	andi	r24, 0x0F	; 15
    28a4:	98 2f       	mov	r25, r24
    28a6:	91 70       	andi	r25, 0x01	; 1
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	62 e0       	ldi	r22, 0x02	; 2
    28ac:	49 2f       	mov	r20, r25
    28ae:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
	}
	DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8HIGH);
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	67 e0       	ldi	r22, 0x07	; 7
    28b6:	41 e0       	ldi	r20, 0x01	; 1
    28b8:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	a0 e2       	ldi	r26, 0x20	; 32
    28c2:	b1 e4       	ldi	r27, 0x41	; 65
    28c4:	89 8f       	std	Y+25, r24	; 0x19
    28c6:	9a 8f       	std	Y+26, r25	; 0x1a
    28c8:	ab 8f       	std	Y+27, r26	; 0x1b
    28ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28cc:	69 8d       	ldd	r22, Y+25	; 0x19
    28ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	4a e7       	ldi	r20, 0x7A	; 122
    28da:	53 e4       	ldi	r21, 0x43	; 67
    28dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	8d 8b       	std	Y+21, r24	; 0x15
    28e6:	9e 8b       	std	Y+22, r25	; 0x16
    28e8:	af 8b       	std	Y+23, r26	; 0x17
    28ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28ec:	6d 89       	ldd	r22, Y+21	; 0x15
    28ee:	7e 89       	ldd	r23, Y+22	; 0x16
    28f0:	8f 89       	ldd	r24, Y+23	; 0x17
    28f2:	98 8d       	ldd	r25, Y+24	; 0x18
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	40 e8       	ldi	r20, 0x80	; 128
    28fa:	5f e3       	ldi	r21, 0x3F	; 63
    28fc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2900:	88 23       	and	r24, r24
    2902:	2c f4       	brge	.+10     	; 0x290e <LCD_invidSendCommond+0x23c>
		__ticks = 1;
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	9c 8b       	std	Y+20, r25	; 0x14
    290a:	8b 8b       	std	Y+19, r24	; 0x13
    290c:	3f c0       	rjmp	.+126    	; 0x298c <LCD_invidSendCommond+0x2ba>
	else if (__tmp > 65535)
    290e:	6d 89       	ldd	r22, Y+21	; 0x15
    2910:	7e 89       	ldd	r23, Y+22	; 0x16
    2912:	8f 89       	ldd	r24, Y+23	; 0x17
    2914:	98 8d       	ldd	r25, Y+24	; 0x18
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	3f ef       	ldi	r19, 0xFF	; 255
    291a:	4f e7       	ldi	r20, 0x7F	; 127
    291c:	57 e4       	ldi	r21, 0x47	; 71
    291e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2922:	18 16       	cp	r1, r24
    2924:	4c f5       	brge	.+82     	; 0x2978 <LCD_invidSendCommond+0x2a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2926:	69 8d       	ldd	r22, Y+25	; 0x19
    2928:	7a 8d       	ldd	r23, Y+26	; 0x1a
    292a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    292c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	40 e2       	ldi	r20, 0x20	; 32
    2934:	51 e4       	ldi	r21, 0x41	; 65
    2936:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	bc 01       	movw	r22, r24
    2940:	cd 01       	movw	r24, r26
    2942:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	9c 8b       	std	Y+20, r25	; 0x14
    294c:	8b 8b       	std	Y+19, r24	; 0x13
    294e:	0f c0       	rjmp	.+30     	; 0x296e <LCD_invidSendCommond+0x29c>
    2950:	89 e1       	ldi	r24, 0x19	; 25
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	9a 8b       	std	Y+18, r25	; 0x12
    2956:	89 8b       	std	Y+17, r24	; 0x11
    2958:	89 89       	ldd	r24, Y+17	; 0x11
    295a:	9a 89       	ldd	r25, Y+18	; 0x12
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	f1 f7       	brne	.-4      	; 0x295c <LCD_invidSendCommond+0x28a>
    2960:	9a 8b       	std	Y+18, r25	; 0x12
    2962:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2964:	8b 89       	ldd	r24, Y+19	; 0x13
    2966:	9c 89       	ldd	r25, Y+20	; 0x14
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	9c 8b       	std	Y+20, r25	; 0x14
    296c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    296e:	8b 89       	ldd	r24, Y+19	; 0x13
    2970:	9c 89       	ldd	r25, Y+20	; 0x14
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	69 f7       	brne	.-38     	; 0x2950 <LCD_invidSendCommond+0x27e>
    2976:	14 c0       	rjmp	.+40     	; 0x29a0 <LCD_invidSendCommond+0x2ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2978:	6d 89       	ldd	r22, Y+21	; 0x15
    297a:	7e 89       	ldd	r23, Y+22	; 0x16
    297c:	8f 89       	ldd	r24, Y+23	; 0x17
    297e:	98 8d       	ldd	r25, Y+24	; 0x18
    2980:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	9c 8b       	std	Y+20, r25	; 0x14
    298a:	8b 8b       	std	Y+19, r24	; 0x13
    298c:	8b 89       	ldd	r24, Y+19	; 0x13
    298e:	9c 89       	ldd	r25, Y+20	; 0x14
    2990:	98 8b       	std	Y+16, r25	; 0x10
    2992:	8f 87       	std	Y+15, r24	; 0x0f
    2994:	8f 85       	ldd	r24, Y+15	; 0x0f
    2996:	98 89       	ldd	r25, Y+16	; 0x10
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	f1 f7       	brne	.-4      	; 0x2998 <LCD_invidSendCommond+0x2c6>
    299c:	98 8b       	std	Y+16, r25	; 0x10
    299e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8LOW);
    29a0:	80 e0       	ldi	r24, 0x00	; 0
    29a2:	67 e0       	ldi	r22, 0x07	; 7
    29a4:	40 e0       	ldi	r20, 0x00	; 0
    29a6:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>

	DIO_enuSet_PinValue(D7_PORT , D7_PIN ,(((Copy_u8commond>>D_D3)&GetMusk)));
    29aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    29ac:	86 95       	lsr	r24
    29ae:	86 95       	lsr	r24
    29b0:	86 95       	lsr	r24
    29b2:	98 2f       	mov	r25, r24
    29b4:	91 70       	andi	r25, 0x01	; 1
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	60 e0       	ldi	r22, 0x00	; 0
    29ba:	49 2f       	mov	r20, r25
    29bc:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(D6_PORT , D6_PIN ,(((Copy_u8commond>>D_D2)&GetMusk)));
    29c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    29c2:	86 95       	lsr	r24
    29c4:	86 95       	lsr	r24
    29c6:	98 2f       	mov	r25, r24
    29c8:	91 70       	andi	r25, 0x01	; 1
    29ca:	80 e0       	ldi	r24, 0x00	; 0
    29cc:	63 e0       	ldi	r22, 0x03	; 3
    29ce:	49 2f       	mov	r20, r25
    29d0:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(D5_PORT , D5_PIN ,(((Copy_u8commond>>D_D1)&GetMusk)));
    29d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    29d6:	86 95       	lsr	r24
    29d8:	98 2f       	mov	r25, r24
    29da:	91 70       	andi	r25, 0x01	; 1
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	61 e0       	ldi	r22, 0x01	; 1
    29e0:	49 2f       	mov	r20, r25
    29e2:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
	DIO_enuSet_PinValue(D4_PORT , D4_PIN ,(((Copy_u8commond>>D_D0)&GetMusk)));
    29e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    29e8:	98 2f       	mov	r25, r24
    29ea:	91 70       	andi	r25, 0x01	; 1
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	62 e0       	ldi	r22, 0x02	; 2
    29f0:	49 2f       	mov	r20, r25
    29f2:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
#endif
	DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8HIGH);
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	67 e0       	ldi	r22, 0x07	; 7
    29fa:	41 e0       	ldi	r20, 0x01	; 1
    29fc:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	a0 e2       	ldi	r26, 0x20	; 32
    2a06:	b1 e4       	ldi	r27, 0x41	; 65
    2a08:	8b 87       	std	Y+11, r24	; 0x0b
    2a0a:	9c 87       	std	Y+12, r25	; 0x0c
    2a0c:	ad 87       	std	Y+13, r26	; 0x0d
    2a0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a10:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a12:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a14:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a16:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	4a e7       	ldi	r20, 0x7A	; 122
    2a1e:	53 e4       	ldi	r21, 0x43	; 67
    2a20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	8f 83       	std	Y+7, r24	; 0x07
    2a2a:	98 87       	std	Y+8, r25	; 0x08
    2a2c:	a9 87       	std	Y+9, r26	; 0x09
    2a2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a30:	6f 81       	ldd	r22, Y+7	; 0x07
    2a32:	78 85       	ldd	r23, Y+8	; 0x08
    2a34:	89 85       	ldd	r24, Y+9	; 0x09
    2a36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	40 e8       	ldi	r20, 0x80	; 128
    2a3e:	5f e3       	ldi	r21, 0x3F	; 63
    2a40:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a44:	88 23       	and	r24, r24
    2a46:	2c f4       	brge	.+10     	; 0x2a52 <LCD_invidSendCommond+0x380>
		__ticks = 1;
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	9e 83       	std	Y+6, r25	; 0x06
    2a4e:	8d 83       	std	Y+5, r24	; 0x05
    2a50:	3f c0       	rjmp	.+126    	; 0x2ad0 <LCD_invidSendCommond+0x3fe>
	else if (__tmp > 65535)
    2a52:	6f 81       	ldd	r22, Y+7	; 0x07
    2a54:	78 85       	ldd	r23, Y+8	; 0x08
    2a56:	89 85       	ldd	r24, Y+9	; 0x09
    2a58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	3f ef       	ldi	r19, 0xFF	; 255
    2a5e:	4f e7       	ldi	r20, 0x7F	; 127
    2a60:	57 e4       	ldi	r21, 0x47	; 71
    2a62:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a66:	18 16       	cp	r1, r24
    2a68:	4c f5       	brge	.+82     	; 0x2abc <LCD_invidSendCommond+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a70:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	40 e2       	ldi	r20, 0x20	; 32
    2a78:	51 e4       	ldi	r21, 0x41	; 65
    2a7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	bc 01       	movw	r22, r24
    2a84:	cd 01       	movw	r24, r26
    2a86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	9e 83       	std	Y+6, r25	; 0x06
    2a90:	8d 83       	std	Y+5, r24	; 0x05
    2a92:	0f c0       	rjmp	.+30     	; 0x2ab2 <LCD_invidSendCommond+0x3e0>
    2a94:	89 e1       	ldi	r24, 0x19	; 25
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	9c 83       	std	Y+4, r25	; 0x04
    2a9a:	8b 83       	std	Y+3, r24	; 0x03
    2a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa0:	01 97       	sbiw	r24, 0x01	; 1
    2aa2:	f1 f7       	brne	.-4      	; 0x2aa0 <LCD_invidSendCommond+0x3ce>
    2aa4:	9c 83       	std	Y+4, r25	; 0x04
    2aa6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aaa:	9e 81       	ldd	r25, Y+6	; 0x06
    2aac:	01 97       	sbiw	r24, 0x01	; 1
    2aae:	9e 83       	std	Y+6, r25	; 0x06
    2ab0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab6:	00 97       	sbiw	r24, 0x00	; 0
    2ab8:	69 f7       	brne	.-38     	; 0x2a94 <LCD_invidSendCommond+0x3c2>
    2aba:	14 c0       	rjmp	.+40     	; 0x2ae4 <LCD_invidSendCommond+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2abc:	6f 81       	ldd	r22, Y+7	; 0x07
    2abe:	78 85       	ldd	r23, Y+8	; 0x08
    2ac0:	89 85       	ldd	r24, Y+9	; 0x09
    2ac2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	9e 83       	std	Y+6, r25	; 0x06
    2ace:	8d 83       	std	Y+5, r24	; 0x05
    2ad0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad4:	9a 83       	std	Y+2, r25	; 0x02
    2ad6:	89 83       	std	Y+1, r24	; 0x01
    2ad8:	89 81       	ldd	r24, Y+1	; 0x01
    2ada:	9a 81       	ldd	r25, Y+2	; 0x02
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	f1 f7       	brne	.-4      	; 0x2adc <LCD_invidSendCommond+0x40a>
    2ae0:	9a 83       	std	Y+2, r25	; 0x02
    2ae2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSet_PinValue(EN_PORT , EN_PIN ,DIO_u8LOW);
    2ae4:	80 e0       	ldi	r24, 0x00	; 0
    2ae6:	67 e0       	ldi	r22, 0x07	; 7
    2ae8:	40 e0       	ldi	r20, 0x00	; 0
    2aea:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_enuSet_PinValue>
}
    2aee:	ab 96       	adiw	r28, 0x2b	; 43
    2af0:	0f b6       	in	r0, 0x3f	; 63
    2af2:	f8 94       	cli
    2af4:	de bf       	out	0x3e, r29	; 62
    2af6:	0f be       	out	0x3f, r0	; 63
    2af8:	cd bf       	out	0x3d, r28	; 61
    2afa:	cf 91       	pop	r28
    2afc:	df 91       	pop	r29
    2afe:	08 95       	ret

00002b00 <LCD_enuSendString>:

ES_t LCD_enuSendString(const char *Copy_pcString)
{
    2b00:	df 93       	push	r29
    2b02:	cf 93       	push	r28
    2b04:	00 d0       	rcall	.+0      	; 0x2b06 <LCD_enuSendString+0x6>
    2b06:	00 d0       	rcall	.+0      	; 0x2b08 <LCD_enuSendString+0x8>
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
    2b0c:	9c 83       	std	Y+4, r25	; 0x04
    2b0e:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	8a 83       	std	Y+2, r24	; 0x02
	if(Copy_pcString != NULL)
    2b14:	8b 81       	ldd	r24, Y+3	; 0x03
    2b16:	9c 81       	ldd	r25, Y+4	; 0x04
    2b18:	00 97       	sbiw	r24, 0x00	; 0
    2b1a:	09 f1       	breq	.+66     	; 0x2b5e <LCD_enuSendString+0x5e>
	{
		s8 Local_s8_Iter_String=0;
    2b1c:	19 82       	std	Y+1, r1	; 0x01
    2b1e:	11 c0       	rjmp	.+34     	; 0x2b42 <LCD_enuSendString+0x42>
		while(Copy_pcString[Local_s8_Iter_String]!= 0)
		{
			Local_enuErrorState=LCD_enuDisplayCharacter(Copy_pcString[Local_s8_Iter_String]);
    2b20:	89 81       	ldd	r24, Y+1	; 0x01
    2b22:	28 2f       	mov	r18, r24
    2b24:	33 27       	eor	r19, r19
    2b26:	27 fd       	sbrc	r18, 7
    2b28:	30 95       	com	r19
    2b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2e:	fc 01       	movw	r30, r24
    2b30:	e2 0f       	add	r30, r18
    2b32:	f3 1f       	adc	r31, r19
    2b34:	80 81       	ld	r24, Z
    2b36:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_enuDisplayCharacter>
    2b3a:	8a 83       	std	Y+2, r24	; 0x02
			Local_s8_Iter_String++;
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
    2b3e:	8f 5f       	subi	r24, 0xFF	; 255
    2b40:	89 83       	std	Y+1, r24	; 0x01
{
	ES_t Local_enuErrorState=ES_NOK;
	if(Copy_pcString != NULL)
	{
		s8 Local_s8_Iter_String=0;
		while(Copy_pcString[Local_s8_Iter_String]!= 0)
    2b42:	89 81       	ldd	r24, Y+1	; 0x01
    2b44:	28 2f       	mov	r18, r24
    2b46:	33 27       	eor	r19, r19
    2b48:	27 fd       	sbrc	r18, 7
    2b4a:	30 95       	com	r19
    2b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b50:	fc 01       	movw	r30, r24
    2b52:	e2 0f       	add	r30, r18
    2b54:	f3 1f       	adc	r31, r19
    2b56:	80 81       	ld	r24, Z
    2b58:	88 23       	and	r24, r24
    2b5a:	11 f7       	brne	.-60     	; 0x2b20 <LCD_enuSendString+0x20>
    2b5c:	02 c0       	rjmp	.+4      	; 0x2b62 <LCD_enuSendString+0x62>
			Local_s8_Iter_String++;
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    2b5e:	82 e0       	ldi	r24, 0x02	; 2
    2b60:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_enuErrorState;
    2b62:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2b64:	0f 90       	pop	r0
    2b66:	0f 90       	pop	r0
    2b68:	0f 90       	pop	r0
    2b6a:	0f 90       	pop	r0
    2b6c:	cf 91       	pop	r28
    2b6e:	df 91       	pop	r29
    2b70:	08 95       	ret

00002b72 <LCD_voidGotoXY>:
void LCD_voidGotoXY(u8 Copy_u8X_Pos , u8 Copy_u8Y_Pos)
{
    2b72:	df 93       	push	r29
    2b74:	cf 93       	push	r28
    2b76:	00 d0       	rcall	.+0      	; 0x2b78 <LCD_voidGotoXY+0x6>
    2b78:	0f 92       	push	r0
    2b7a:	cd b7       	in	r28, 0x3d	; 61
    2b7c:	de b7       	in	r29, 0x3e	; 62
    2b7e:	8a 83       	std	Y+2, r24	; 0x02
    2b80:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8Address;
	if(Copy_u8X_Pos == 0)
    2b82:	8a 81       	ldd	r24, Y+2	; 0x02
    2b84:	88 23       	and	r24, r24
    2b86:	19 f4       	brne	.+6      	; 0x2b8e <LCD_voidGotoXY+0x1c>
	{
		Local_u8Address=Copy_u8Y_Pos;
    2b88:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8a:	89 83       	std	Y+1, r24	; 0x01
    2b8c:	06 c0       	rjmp	.+12     	; 0x2b9a <LCD_voidGotoXY+0x28>
	}
	else if(Copy_u8X_Pos == 1)
    2b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b90:	81 30       	cpi	r24, 0x01	; 1
    2b92:	19 f4       	brne	.+6      	; 0x2b9a <LCD_voidGotoXY+0x28>
	{
		Local_u8Address=Copy_u8Y_Pos + 0x40;
    2b94:	8b 81       	ldd	r24, Y+3	; 0x03
    2b96:	80 5c       	subi	r24, 0xC0	; 192
    2b98:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_enuSendCommond(0x80 |Local_u8Address);
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
    2b9c:	80 68       	ori	r24, 0x80	; 128
    2b9e:	0e 94 46 13 	call	0x268c	; 0x268c <LCD_enuSendCommond>

}
    2ba2:	0f 90       	pop	r0
    2ba4:	0f 90       	pop	r0
    2ba6:	0f 90       	pop	r0
    2ba8:	cf 91       	pop	r28
    2baa:	df 91       	pop	r29
    2bac:	08 95       	ret

00002bae <LCD_voidDisplaySpecialCharacter>:
void LCD_voidDisplaySpecialCharacter(u8 *Copy_pau8Array_Data , u8 Copy_u8Block_number ,u8 Copy_u8Xpos , u8 Copy_u8Ypos)
{
    2bae:	df 93       	push	r29
    2bb0:	cf 93       	push	r28
    2bb2:	cd b7       	in	r28, 0x3d	; 61
    2bb4:	de b7       	in	r29, 0x3e	; 62
    2bb6:	27 97       	sbiw	r28, 0x07	; 7
    2bb8:	0f b6       	in	r0, 0x3f	; 63
    2bba:	f8 94       	cli
    2bbc:	de bf       	out	0x3e, r29	; 62
    2bbe:	0f be       	out	0x3f, r0	; 63
    2bc0:	cd bf       	out	0x3d, r28	; 61
    2bc2:	9c 83       	std	Y+4, r25	; 0x04
    2bc4:	8b 83       	std	Y+3, r24	; 0x03
    2bc6:	6d 83       	std	Y+5, r22	; 0x05
    2bc8:	4e 83       	std	Y+6, r20	; 0x06
    2bca:	2f 83       	std	Y+7, r18	; 0x07
	/*Calculate   CGRAM  Address */
	u8 Local_u8CGRAM_Address=Copy_u8Block_number*8;
    2bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2bce:	88 2f       	mov	r24, r24
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	88 0f       	add	r24, r24
    2bd4:	99 1f       	adc	r25, r25
    2bd6:	88 0f       	add	r24, r24
    2bd8:	99 1f       	adc	r25, r25
    2bda:	88 0f       	add	r24, r24
    2bdc:	99 1f       	adc	r25, r25
    2bde:	8a 83       	std	Y+2, r24	; 0x02

	/* Send address CGROM command to Lcd ,With setting bit 6 , clearing bit 7 */
	LCD_enuSendCommond(Local_u8CGRAM_Address+64);
    2be0:	8a 81       	ldd	r24, Y+2	; 0x02
    2be2:	80 5c       	subi	r24, 0xC0	; 192
    2be4:	0e 94 46 13 	call	0x268c	; 0x268c <LCD_enuSendCommond>

	/* Counter to block to loop of array character*/
	u8 Local_u8Block_Counter=0;
    2be8:	19 82       	std	Y+1, r1	; 0x01

	/* Write the pattern in CGRam*/
	for(Local_u8Block_Counter = 0 ; Local_u8Block_Counter <8 ; Local_u8Block_Counter ++)
    2bea:	19 82       	std	Y+1, r1	; 0x01
    2bec:	0e c0       	rjmp	.+28     	; 0x2c0a <LCD_voidDisplaySpecialCharacter+0x5c>
	{
		LCD_enuDisplayCharacter(Copy_pau8Array_Data[Local_u8Block_Counter]);
    2bee:	89 81       	ldd	r24, Y+1	; 0x01
    2bf0:	28 2f       	mov	r18, r24
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	e2 0f       	add	r30, r18
    2bfc:	f3 1f       	adc	r31, r19
    2bfe:	80 81       	ld	r24, Z
    2c00:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_enuDisplayCharacter>

	/* Counter to block to loop of array character*/
	u8 Local_u8Block_Counter=0;

	/* Write the pattern in CGRam*/
	for(Local_u8Block_Counter = 0 ; Local_u8Block_Counter <8 ; Local_u8Block_Counter ++)
    2c04:	89 81       	ldd	r24, Y+1	; 0x01
    2c06:	8f 5f       	subi	r24, 0xFF	; 255
    2c08:	89 83       	std	Y+1, r24	; 0x01
    2c0a:	89 81       	ldd	r24, Y+1	; 0x01
    2c0c:	88 30       	cpi	r24, 0x08	; 8
    2c0e:	78 f3       	brcs	.-34     	; 0x2bee <LCD_voidDisplaySpecialCharacter+0x40>
	{
		LCD_enuDisplayCharacter(Copy_pau8Array_Data[Local_u8Block_Counter]);
	}

	/*Go to DDRAM to display the pattern */
	LCD_voidGotoXY(Copy_u8Xpos,Copy_u8Ypos);
    2c10:	8e 81       	ldd	r24, Y+6	; 0x06
    2c12:	6f 81       	ldd	r22, Y+7	; 0x07
    2c14:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <LCD_voidGotoXY>

	/*Display the pattern  Written in CGRam*/
	LCD_enuDisplayCharacter(Copy_u8Block_number);
    2c18:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1a:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_enuDisplayCharacter>
}
    2c1e:	27 96       	adiw	r28, 0x07	; 7
    2c20:	0f b6       	in	r0, 0x3f	; 63
    2c22:	f8 94       	cli
    2c24:	de bf       	out	0x3e, r29	; 62
    2c26:	0f be       	out	0x3f, r0	; 63
    2c28:	cd bf       	out	0x3d, r28	; 61
    2c2a:	cf 91       	pop	r28
    2c2c:	df 91       	pop	r29
    2c2e:	08 95       	ret

00002c30 <LCD_voidDisplayIntegerNum>:


void LCD_voidDisplayIntegerNum(s32 Copy_s32Num)
{
    2c30:	df 93       	push	r29
    2c32:	cf 93       	push	r28
    2c34:	cd b7       	in	r28, 0x3d	; 61
    2c36:	de b7       	in	r29, 0x3e	; 62
    2c38:	a7 97       	sbiw	r28, 0x27	; 39
    2c3a:	0f b6       	in	r0, 0x3f	; 63
    2c3c:	f8 94       	cli
    2c3e:	de bf       	out	0x3e, r29	; 62
    2c40:	0f be       	out	0x3f, r0	; 63
    2c42:	cd bf       	out	0x3d, r28	; 61
    2c44:	6c a3       	std	Y+36, r22	; 0x24
    2c46:	7d a3       	std	Y+37, r23	; 0x25
    2c48:	8e a3       	std	Y+38, r24	; 0x26
    2c4a:	9f a3       	std	Y+39, r25	; 0x27
	if(Copy_s32Num!=0)
    2c4c:	8c a1       	ldd	r24, Y+36	; 0x24
    2c4e:	9d a1       	ldd	r25, Y+37	; 0x25
    2c50:	ae a1       	ldd	r26, Y+38	; 0x26
    2c52:	bf a1       	ldd	r27, Y+39	; 0x27
    2c54:	00 97       	sbiw	r24, 0x00	; 0
    2c56:	a1 05       	cpc	r26, r1
    2c58:	b1 05       	cpc	r27, r1
    2c5a:	09 f4       	brne	.+2      	; 0x2c5e <LCD_voidDisplayIntegerNum+0x2e>
    2c5c:	61 c0       	rjmp	.+194    	; 0x2d20 <LCD_voidDisplayIntegerNum+0xf0>
	{
		if(Copy_s32Num<0)
    2c5e:	8c a1       	ldd	r24, Y+36	; 0x24
    2c60:	9d a1       	ldd	r25, Y+37	; 0x25
    2c62:	ae a1       	ldd	r26, Y+38	; 0x26
    2c64:	bf a1       	ldd	r27, Y+39	; 0x27
    2c66:	bb 23       	and	r27, r27
    2c68:	94 f4       	brge	.+36     	; 0x2c8e <LCD_voidDisplayIntegerNum+0x5e>
		{
			Copy_s32Num*=-1;
    2c6a:	8c a1       	ldd	r24, Y+36	; 0x24
    2c6c:	9d a1       	ldd	r25, Y+37	; 0x25
    2c6e:	ae a1       	ldd	r26, Y+38	; 0x26
    2c70:	bf a1       	ldd	r27, Y+39	; 0x27
    2c72:	b0 95       	com	r27
    2c74:	a0 95       	com	r26
    2c76:	90 95       	com	r25
    2c78:	81 95       	neg	r24
    2c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c7c:	af 4f       	sbci	r26, 0xFF	; 255
    2c7e:	bf 4f       	sbci	r27, 0xFF	; 255
    2c80:	8c a3       	std	Y+36, r24	; 0x24
    2c82:	9d a3       	std	Y+37, r25	; 0x25
    2c84:	ae a3       	std	Y+38, r26	; 0x26
    2c86:	bf a3       	std	Y+39, r27	; 0x27
			LCD_enuDisplayCharacter('-');
    2c88:	8d e2       	ldi	r24, 0x2D	; 45
    2c8a:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_enuDisplayCharacter>

		}
		s8 Local_u8A_numbers[33];
		s8 *Local_u8pa_catchNumber=&Local_u8A_numbers[32];
    2c8e:	ce 01       	movw	r24, r28
    2c90:	03 96       	adiw	r24, 0x03	; 3
    2c92:	80 96       	adiw	r24, 0x20	; 32
    2c94:	9a 83       	std	Y+2, r25	; 0x02
    2c96:	89 83       	std	Y+1, r24	; 0x01
		*Local_u8pa_catchNumber='\0';
    2c98:	e9 81       	ldd	r30, Y+1	; 0x01
    2c9a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c9c:	10 82       	st	Z, r1
		Local_u8pa_catchNumber--;
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca2:	01 97       	sbiw	r24, 0x01	; 1
    2ca4:	9a 83       	std	Y+2, r25	; 0x02
    2ca6:	89 83       	std	Y+1, r24	; 0x01
    2ca8:	29 c0       	rjmp	.+82     	; 0x2cfc <LCD_voidDisplayIntegerNum+0xcc>
		while(Copy_s32Num)
		{
			*Local_u8pa_catchNumber=(Copy_s32Num % 10 )+48;/*to convert number to string */
    2caa:	8c a1       	ldd	r24, Y+36	; 0x24
    2cac:	9d a1       	ldd	r25, Y+37	; 0x25
    2cae:	ae a1       	ldd	r26, Y+38	; 0x26
    2cb0:	bf a1       	ldd	r27, Y+39	; 0x27
    2cb2:	2a e0       	ldi	r18, 0x0A	; 10
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	40 e0       	ldi	r20, 0x00	; 0
    2cb8:	50 e0       	ldi	r21, 0x00	; 0
    2cba:	bc 01       	movw	r22, r24
    2cbc:	cd 01       	movw	r24, r26
    2cbe:	0e 94 89 18 	call	0x3112	; 0x3112 <__divmodsi4>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	80 5d       	subi	r24, 0xD0	; 208
    2cc8:	e9 81       	ldd	r30, Y+1	; 0x01
    2cca:	fa 81       	ldd	r31, Y+2	; 0x02
    2ccc:	80 83       	st	Z, r24
			Local_u8pa_catchNumber--;
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd2:	01 97       	sbiw	r24, 0x01	; 1
    2cd4:	9a 83       	std	Y+2, r25	; 0x02
    2cd6:	89 83       	std	Y+1, r24	; 0x01
			Copy_s32Num /=10;
    2cd8:	8c a1       	ldd	r24, Y+36	; 0x24
    2cda:	9d a1       	ldd	r25, Y+37	; 0x25
    2cdc:	ae a1       	ldd	r26, Y+38	; 0x26
    2cde:	bf a1       	ldd	r27, Y+39	; 0x27
    2ce0:	2a e0       	ldi	r18, 0x0A	; 10
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	40 e0       	ldi	r20, 0x00	; 0
    2ce6:	50 e0       	ldi	r21, 0x00	; 0
    2ce8:	bc 01       	movw	r22, r24
    2cea:	cd 01       	movw	r24, r26
    2cec:	0e 94 89 18 	call	0x3112	; 0x3112 <__divmodsi4>
    2cf0:	da 01       	movw	r26, r20
    2cf2:	c9 01       	movw	r24, r18
    2cf4:	8c a3       	std	Y+36, r24	; 0x24
    2cf6:	9d a3       	std	Y+37, r25	; 0x25
    2cf8:	ae a3       	std	Y+38, r26	; 0x26
    2cfa:	bf a3       	std	Y+39, r27	; 0x27
		}
		s8 Local_u8A_numbers[33];
		s8 *Local_u8pa_catchNumber=&Local_u8A_numbers[32];
		*Local_u8pa_catchNumber='\0';
		Local_u8pa_catchNumber--;
		while(Copy_s32Num)
    2cfc:	8c a1       	ldd	r24, Y+36	; 0x24
    2cfe:	9d a1       	ldd	r25, Y+37	; 0x25
    2d00:	ae a1       	ldd	r26, Y+38	; 0x26
    2d02:	bf a1       	ldd	r27, Y+39	; 0x27
    2d04:	00 97       	sbiw	r24, 0x00	; 0
    2d06:	a1 05       	cpc	r26, r1
    2d08:	b1 05       	cpc	r27, r1
    2d0a:	79 f6       	brne	.-98     	; 0x2caa <LCD_voidDisplayIntegerNum+0x7a>
		{
			*Local_u8pa_catchNumber=(Copy_s32Num % 10 )+48;/*to convert number to string */
			Local_u8pa_catchNumber--;
			Copy_s32Num /=10;
		}
		Local_u8pa_catchNumber++;
    2d0c:	89 81       	ldd	r24, Y+1	; 0x01
    2d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d10:	01 96       	adiw	r24, 0x01	; 1
    2d12:	9a 83       	std	Y+2, r25	; 0x02
    2d14:	89 83       	std	Y+1, r24	; 0x01
		LCD_enuSendString(Local_u8pa_catchNumber);
    2d16:	89 81       	ldd	r24, Y+1	; 0x01
    2d18:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1a:	0e 94 80 15 	call	0x2b00	; 0x2b00 <LCD_enuSendString>
    2d1e:	04 c0       	rjmp	.+8      	; 0x2d28 <LCD_voidDisplayIntegerNum+0xf8>
	}

	else
	{
		LCD_enuSendString("0");
    2d20:	80 e6       	ldi	r24, 0x60	; 96
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	0e 94 80 15 	call	0x2b00	; 0x2b00 <LCD_enuSendString>
	}
}
    2d28:	a7 96       	adiw	r28, 0x27	; 39
    2d2a:	0f b6       	in	r0, 0x3f	; 63
    2d2c:	f8 94       	cli
    2d2e:	de bf       	out	0x3e, r29	; 62
    2d30:	0f be       	out	0x3f, r0	; 63
    2d32:	cd bf       	out	0x3d, r28	; 61
    2d34:	cf 91       	pop	r28
    2d36:	df 91       	pop	r29
    2d38:	08 95       	ret

00002d3a <LCD_voidClearDisplay>:
void LCD_voidClearDisplay(void)
{
    2d3a:	df 93       	push	r29
    2d3c:	cf 93       	push	r28
    2d3e:	cd b7       	in	r28, 0x3d	; 61
    2d40:	de b7       	in	r29, 0x3e	; 62
	LCD_enuSendCommond(Clear_Display);
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	0e 94 46 13 	call	0x268c	; 0x268c <LCD_enuSendCommond>
}
    2d48:	cf 91       	pop	r28
    2d4a:	df 91       	pop	r29
    2d4c:	08 95       	ret

00002d4e <LCD_voidGotoSecondLine>:

void LCD_voidGotoSecondLine(void)
{
    2d4e:	df 93       	push	r29
    2d50:	cf 93       	push	r28
    2d52:	cd b7       	in	r28, 0x3d	; 61
    2d54:	de b7       	in	r29, 0x3e	; 62
	LCD_voidGotoXY(1,0);
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	60 e0       	ldi	r22, 0x00	; 0
    2d5a:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <LCD_voidGotoXY>
}
    2d5e:	cf 91       	pop	r28
    2d60:	df 91       	pop	r29
    2d62:	08 95       	ret

00002d64 <LCD_voidDisplayNumberIn4Digit>:
void LCD_voidDisplayNumberIn4Digit(u16 Copy_u16Number)
{
    2d64:	df 93       	push	r29
    2d66:	cf 93       	push	r28
    2d68:	00 d0       	rcall	.+0      	; 0x2d6a <LCD_voidDisplayNumberIn4Digit+0x6>
    2d6a:	cd b7       	in	r28, 0x3d	; 61
    2d6c:	de b7       	in	r29, 0x3e	; 62
    2d6e:	9a 83       	std	Y+2, r25	; 0x02
    2d70:	89 83       	std	Y+1, r24	; 0x01
	LCD_enuDisplayCharacter(((Copy_u16Number%10000)/1000)+'0');
    2d72:	89 81       	ldd	r24, Y+1	; 0x01
    2d74:	9a 81       	ldd	r25, Y+2	; 0x02
    2d76:	20 e1       	ldi	r18, 0x10	; 16
    2d78:	37 e2       	ldi	r19, 0x27	; 39
    2d7a:	b9 01       	movw	r22, r18
    2d7c:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__udivmodhi4>
    2d80:	28 ee       	ldi	r18, 0xE8	; 232
    2d82:	33 e0       	ldi	r19, 0x03	; 3
    2d84:	b9 01       	movw	r22, r18
    2d86:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__udivmodhi4>
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	80 5d       	subi	r24, 0xD0	; 208
    2d8e:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_enuDisplayCharacter>
	LCD_enuDisplayCharacter(((Copy_u16Number%1000)/100)+'0');
    2d92:	89 81       	ldd	r24, Y+1	; 0x01
    2d94:	9a 81       	ldd	r25, Y+2	; 0x02
    2d96:	28 ee       	ldi	r18, 0xE8	; 232
    2d98:	33 e0       	ldi	r19, 0x03	; 3
    2d9a:	b9 01       	movw	r22, r18
    2d9c:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__udivmodhi4>
    2da0:	24 e6       	ldi	r18, 0x64	; 100
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	b9 01       	movw	r22, r18
    2da6:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__udivmodhi4>
    2daa:	cb 01       	movw	r24, r22
    2dac:	80 5d       	subi	r24, 0xD0	; 208
    2dae:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_enuDisplayCharacter>
	LCD_enuDisplayCharacter(((Copy_u16Number%100)/10)+'0');
    2db2:	89 81       	ldd	r24, Y+1	; 0x01
    2db4:	9a 81       	ldd	r25, Y+2	; 0x02
    2db6:	24 e6       	ldi	r18, 0x64	; 100
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	b9 01       	movw	r22, r18
    2dbc:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__udivmodhi4>
    2dc0:	2a e0       	ldi	r18, 0x0A	; 10
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	b9 01       	movw	r22, r18
    2dc6:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__udivmodhi4>
    2dca:	cb 01       	movw	r24, r22
    2dcc:	80 5d       	subi	r24, 0xD0	; 208
    2dce:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_enuDisplayCharacter>
	LCD_enuDisplayCharacter(((Copy_u16Number%10)/1)+'0');
    2dd2:	89 81       	ldd	r24, Y+1	; 0x01
    2dd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd6:	2a e0       	ldi	r18, 0x0A	; 10
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	b9 01       	movw	r22, r18
    2ddc:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__udivmodhi4>
    2de0:	80 5d       	subi	r24, 0xD0	; 208
    2de2:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_enuDisplayCharacter>
}
    2de6:	0f 90       	pop	r0
    2de8:	0f 90       	pop	r0
    2dea:	cf 91       	pop	r28
    2dec:	df 91       	pop	r29
    2dee:	08 95       	ret

00002df0 <main>:
#include "Keypad_int.h"
#include "LCD_int.h"
#include "APP.h"
#include <util/delay.h>
int main()
 {
    2df0:	df 93       	push	r29
    2df2:	cf 93       	push	r28
    2df4:	cd b7       	in	r28, 0x3d	; 61
    2df6:	de b7       	in	r29, 0x3e	; 62
    2df8:	6b 97       	sbiw	r28, 0x1b	; 27
    2dfa:	0f b6       	in	r0, 0x3f	; 63
    2dfc:	f8 94       	cli
    2dfe:	de bf       	out	0x3e, r29	; 62
    2e00:	0f be       	out	0x3f, r0	; 63
    2e02:	cd bf       	out	0x3d, r28	; 61
	DIO_enuInit();
    2e04:	0e 94 cd 05 	call	0xb9a	; 0xb9a <DIO_enuInit>
	LCD_enuInit();
    2e08:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <LCD_enuInit>
	Keypad_enuInit();
    2e0c:	0e 94 4e 0a 	call	0x149c	; 0x149c <Keypad_enuInit>

	u8 Local_u8key=0;
    2e10:	19 8e       	std	Y+25, r1	; 0x19
	u8 *Local_u8pkey=&Local_u8key;
    2e12:	ce 01       	movw	r24, r28
    2e14:	49 96       	adiw	r24, 0x19	; 25
    2e16:	98 8f       	std	Y+24, r25	; 0x18
    2e18:	8f 8b       	std	Y+23, r24	; 0x17
	s16 Local_u16NumOne=0,Local_u16NumTwo=0;
    2e1a:	1e 8a       	std	Y+22, r1	; 0x16
    2e1c:	1d 8a       	std	Y+21, r1	; 0x15
    2e1e:	1c 8a       	std	Y+20, r1	; 0x14
    2e20:	1b 8a       	std	Y+19, r1	; 0x13
	char operand;
	s16 Local_s16Result=0;
    2e22:	19 8a       	std	Y+17, r1	; 0x11
    2e24:	18 8a       	std	Y+16, r1	; 0x10


	u8 Local_u8Iter=0;
    2e26:	1f 86       	std	Y+15, r1	; 0x0f
	while(1)
	{

		do
		{
			Keypad_enuGetPressedKey(Local_u8pkey);
    2e28:	8f 89       	ldd	r24, Y+23	; 0x17
    2e2a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e2c:	0e 94 ab 0a 	call	0x1556	; 0x1556 <Keypad_enuGetPressedKey>
			Local_u8key=*Local_u8pkey;
    2e30:	ef 89       	ldd	r30, Y+23	; 0x17
    2e32:	f8 8d       	ldd	r31, Y+24	; 0x18
    2e34:	80 81       	ld	r24, Z
    2e36:	89 8f       	std	Y+25, r24	; 0x19

		}while(Local_u8key == 0xff);
    2e38:	89 8d       	ldd	r24, Y+25	; 0x19
    2e3a:	8f 3f       	cpi	r24, 0xFF	; 255
    2e3c:	a9 f3       	breq	.-22     	; 0x2e28 <main+0x38>



		if(Local_u8IsDigit(Local_u8key))
    2e3e:	89 8d       	ldd	r24, Y+25	; 0x19
    2e40:	0e 94 9b 05 	call	0xb36	; 0xb36 <Local_u8IsDigit>
    2e44:	88 23       	and	r24, r24
    2e46:	e1 f1       	breq	.+120    	; 0x2ec0 <main+0xd0>
		{
			LCD_voidDisplayIntegerNum(Local_u8key-48);
    2e48:	89 8d       	ldd	r24, Y+25	; 0x19
    2e4a:	88 2f       	mov	r24, r24
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	c0 97       	sbiw	r24, 0x30	; 48
    2e50:	aa 27       	eor	r26, r26
    2e52:	97 fd       	sbrc	r25, 7
    2e54:	a0 95       	com	r26
    2e56:	ba 2f       	mov	r27, r26
    2e58:	bc 01       	movw	r22, r24
    2e5a:	cd 01       	movw	r24, r26
    2e5c:	0e 94 18 16 	call	0x2c30	; 0x2c30 <LCD_voidDisplayIntegerNum>
			if(Local_u8Iter==0)
    2e60:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e62:	88 23       	and	r24, r24
    2e64:	a9 f4       	brne	.+42     	; 0x2e90 <main+0xa0>
			{
				Local_u16NumOne=Local_u16NumOne*10+(Local_u8key-48);
    2e66:	8d 89       	ldd	r24, Y+21	; 0x15
    2e68:	9e 89       	ldd	r25, Y+22	; 0x16
    2e6a:	9c 01       	movw	r18, r24
    2e6c:	22 0f       	add	r18, r18
    2e6e:	33 1f       	adc	r19, r19
    2e70:	c9 01       	movw	r24, r18
    2e72:	88 0f       	add	r24, r24
    2e74:	99 1f       	adc	r25, r25
    2e76:	88 0f       	add	r24, r24
    2e78:	99 1f       	adc	r25, r25
    2e7a:	28 0f       	add	r18, r24
    2e7c:	39 1f       	adc	r19, r25
    2e7e:	89 8d       	ldd	r24, Y+25	; 0x19
    2e80:	88 2f       	mov	r24, r24
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	c0 97       	sbiw	r24, 0x30	; 48
    2e86:	82 0f       	add	r24, r18
    2e88:	93 1f       	adc	r25, r19
    2e8a:	9e 8b       	std	Y+22, r25	; 0x16
    2e8c:	8d 8b       	std	Y+21, r24	; 0x15
    2e8e:	cc cf       	rjmp	.-104    	; 0x2e28 <main+0x38>

			}
			else if(Local_u8Iter!=0)
    2e90:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e92:	88 23       	and	r24, r24
    2e94:	49 f2       	breq	.-110    	; 0x2e28 <main+0x38>
			{
				Local_u16NumTwo=+Local_u16NumTwo*10+(Local_u8key-48);
    2e96:	8b 89       	ldd	r24, Y+19	; 0x13
    2e98:	9c 89       	ldd	r25, Y+20	; 0x14
    2e9a:	9c 01       	movw	r18, r24
    2e9c:	22 0f       	add	r18, r18
    2e9e:	33 1f       	adc	r19, r19
    2ea0:	c9 01       	movw	r24, r18
    2ea2:	88 0f       	add	r24, r24
    2ea4:	99 1f       	adc	r25, r25
    2ea6:	88 0f       	add	r24, r24
    2ea8:	99 1f       	adc	r25, r25
    2eaa:	28 0f       	add	r18, r24
    2eac:	39 1f       	adc	r19, r25
    2eae:	89 8d       	ldd	r24, Y+25	; 0x19
    2eb0:	88 2f       	mov	r24, r24
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	c0 97       	sbiw	r24, 0x30	; 48
    2eb6:	82 0f       	add	r24, r18
    2eb8:	93 1f       	adc	r25, r19
    2eba:	9c 8b       	std	Y+20, r25	; 0x14
    2ebc:	8b 8b       	std	Y+19, r24	; 0x13
    2ebe:	b4 cf       	rjmp	.-152    	; 0x2e28 <main+0x38>

			}

		}
		else if(Local_u8IsOperand(Local_u8key))
    2ec0:	89 8d       	ldd	r24, Y+25	; 0x19
    2ec2:	0e 94 b1 05 	call	0xb62	; 0xb62 <Local_u8IsOperand>
    2ec6:	88 23       	and	r24, r24
    2ec8:	49 f0       	breq	.+18     	; 0x2edc <main+0xec>
		{
			LCD_enuDisplayCharacter(Local_u8key);
    2eca:	89 8d       	ldd	r24, Y+25	; 0x19
    2ecc:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_enuDisplayCharacter>
			operand=Local_u8key;
    2ed0:	89 8d       	ldd	r24, Y+25	; 0x19
    2ed2:	8a 8b       	std	Y+18, r24	; 0x12
			++Local_u8Iter;
    2ed4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ed6:	8f 5f       	subi	r24, 0xFF	; 255
    2ed8:	8f 87       	std	Y+15, r24	; 0x0f
    2eda:	a6 cf       	rjmp	.-180    	; 0x2e28 <main+0x38>
		}
		else if(Local_u8key == '=')
    2edc:	89 8d       	ldd	r24, Y+25	; 0x19
    2ede:	8d 33       	cpi	r24, 0x3D	; 61
    2ee0:	09 f0       	breq	.+2      	; 0x2ee4 <main+0xf4>
    2ee2:	e9 c0       	rjmp	.+466    	; 0x30b6 <main+0x2c6>
		{

			LCD_voidClearDisplay();
    2ee4:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <LCD_voidClearDisplay>
			LCD_voidGotoXY(0,0);
    2ee8:	80 e0       	ldi	r24, 0x00	; 0
    2eea:	60 e0       	ldi	r22, 0x00	; 0
    2eec:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <LCD_voidGotoXY>
			switch(operand)
    2ef0:	8a 89       	ldd	r24, Y+18	; 0x12
    2ef2:	28 2f       	mov	r18, r24
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	3b 8f       	std	Y+27, r19	; 0x1b
    2ef8:	2a 8f       	std	Y+26, r18	; 0x1a
    2efa:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2efc:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2efe:	4b 32       	cpi	r20, 0x2B	; 43
    2f00:	51 05       	cpc	r21, r1
    2f02:	b9 f0       	breq	.+46     	; 0x2f32 <main+0x142>
    2f04:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f06:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2f08:	8c 32       	cpi	r24, 0x2C	; 44
    2f0a:	91 05       	cpc	r25, r1
    2f0c:	3c f4       	brge	.+14     	; 0x2f1c <main+0x12c>
    2f0e:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2f10:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2f12:	2a 32       	cpi	r18, 0x2A	; 42
    2f14:	31 05       	cpc	r19, r1
    2f16:	09 f4       	brne	.+2      	; 0x2f1a <main+0x12a>
    2f18:	a8 c0       	rjmp	.+336    	; 0x306a <main+0x27a>
    2f1a:	b5 c0       	rjmp	.+362    	; 0x3086 <main+0x296>
    2f1c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2f1e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2f20:	4d 32       	cpi	r20, 0x2D	; 45
    2f22:	51 05       	cpc	r21, r1
    2f24:	79 f0       	breq	.+30     	; 0x2f44 <main+0x154>
    2f26:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f28:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2f2a:	8f 32       	cpi	r24, 0x2F	; 47
    2f2c:	91 05       	cpc	r25, r1
    2f2e:	99 f0       	breq	.+38     	; 0x2f56 <main+0x166>
    2f30:	aa c0       	rjmp	.+340    	; 0x3086 <main+0x296>
			{
			case'+':
				Local_s16Result=(Local_u16NumOne + Local_u16NumTwo);
    2f32:	8d 89       	ldd	r24, Y+21	; 0x15
    2f34:	9e 89       	ldd	r25, Y+22	; 0x16
    2f36:	2b 89       	ldd	r18, Y+19	; 0x13
    2f38:	3c 89       	ldd	r19, Y+20	; 0x14
    2f3a:	82 0f       	add	r24, r18
    2f3c:	93 1f       	adc	r25, r19
    2f3e:	99 8b       	std	Y+17, r25	; 0x11
    2f40:	88 8b       	std	Y+16, r24	; 0x10
    2f42:	a1 c0       	rjmp	.+322    	; 0x3086 <main+0x296>
				break;
			case'-':
				Local_s16Result=((Local_u16NumOne - Local_u16NumTwo));
    2f44:	8d 89       	ldd	r24, Y+21	; 0x15
    2f46:	9e 89       	ldd	r25, Y+22	; 0x16
    2f48:	2b 89       	ldd	r18, Y+19	; 0x13
    2f4a:	3c 89       	ldd	r19, Y+20	; 0x14
    2f4c:	82 1b       	sub	r24, r18
    2f4e:	93 0b       	sbc	r25, r19
    2f50:	99 8b       	std	Y+17, r25	; 0x11
    2f52:	88 8b       	std	Y+16, r24	; 0x10
    2f54:	98 c0       	rjmp	.+304    	; 0x3086 <main+0x296>
				break;
			case'/':
				if(Local_u16NumTwo==0){
    2f56:	8b 89       	ldd	r24, Y+19	; 0x13
    2f58:	9c 89       	ldd	r25, Y+20	; 0x14
    2f5a:	00 97       	sbiw	r24, 0x00	; 0
    2f5c:	09 f0       	breq	.+2      	; 0x2f60 <main+0x170>
    2f5e:	7a c0       	rjmp	.+244    	; 0x3054 <main+0x264>
					LCD_enuSendString("ERROR !!");
    2f60:	82 e6       	ldi	r24, 0x62	; 98
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	0e 94 80 15 	call	0x2b00	; 0x2b00 <LCD_enuSendString>
    2f68:	80 e0       	ldi	r24, 0x00	; 0
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	a0 ea       	ldi	r26, 0xA0	; 160
    2f6e:	b1 e4       	ldi	r27, 0x41	; 65
    2f70:	8b 87       	std	Y+11, r24	; 0x0b
    2f72:	9c 87       	std	Y+12, r25	; 0x0c
    2f74:	ad 87       	std	Y+13, r26	; 0x0d
    2f76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	4a e7       	ldi	r20, 0x7A	; 122
    2f86:	53 e4       	ldi	r21, 0x43	; 67
    2f88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	8f 83       	std	Y+7, r24	; 0x07
    2f92:	98 87       	std	Y+8, r25	; 0x08
    2f94:	a9 87       	std	Y+9, r26	; 0x09
    2f96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f98:	6f 81       	ldd	r22, Y+7	; 0x07
    2f9a:	78 85       	ldd	r23, Y+8	; 0x08
    2f9c:	89 85       	ldd	r24, Y+9	; 0x09
    2f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	40 e8       	ldi	r20, 0x80	; 128
    2fa6:	5f e3       	ldi	r21, 0x3F	; 63
    2fa8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2fac:	88 23       	and	r24, r24
    2fae:	2c f4       	brge	.+10     	; 0x2fba <main+0x1ca>
		__ticks = 1;
    2fb0:	81 e0       	ldi	r24, 0x01	; 1
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	9e 83       	std	Y+6, r25	; 0x06
    2fb6:	8d 83       	std	Y+5, r24	; 0x05
    2fb8:	3f c0       	rjmp	.+126    	; 0x3038 <main+0x248>
	else if (__tmp > 65535)
    2fba:	6f 81       	ldd	r22, Y+7	; 0x07
    2fbc:	78 85       	ldd	r23, Y+8	; 0x08
    2fbe:	89 85       	ldd	r24, Y+9	; 0x09
    2fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	3f ef       	ldi	r19, 0xFF	; 255
    2fc6:	4f e7       	ldi	r20, 0x7F	; 127
    2fc8:	57 e4       	ldi	r21, 0x47	; 71
    2fca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2fce:	18 16       	cp	r1, r24
    2fd0:	4c f5       	brge	.+82     	; 0x3024 <main+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	40 e2       	ldi	r20, 0x20	; 32
    2fe0:	51 e4       	ldi	r21, 0x41	; 65
    2fe2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fe6:	dc 01       	movw	r26, r24
    2fe8:	cb 01       	movw	r24, r22
    2fea:	bc 01       	movw	r22, r24
    2fec:	cd 01       	movw	r24, r26
    2fee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ff2:	dc 01       	movw	r26, r24
    2ff4:	cb 01       	movw	r24, r22
    2ff6:	9e 83       	std	Y+6, r25	; 0x06
    2ff8:	8d 83       	std	Y+5, r24	; 0x05
    2ffa:	0f c0       	rjmp	.+30     	; 0x301a <main+0x22a>
    2ffc:	89 e1       	ldi	r24, 0x19	; 25
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	9c 83       	std	Y+4, r25	; 0x04
    3002:	8b 83       	std	Y+3, r24	; 0x03
    3004:	8b 81       	ldd	r24, Y+3	; 0x03
    3006:	9c 81       	ldd	r25, Y+4	; 0x04
    3008:	01 97       	sbiw	r24, 0x01	; 1
    300a:	f1 f7       	brne	.-4      	; 0x3008 <main+0x218>
    300c:	9c 83       	std	Y+4, r25	; 0x04
    300e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3010:	8d 81       	ldd	r24, Y+5	; 0x05
    3012:	9e 81       	ldd	r25, Y+6	; 0x06
    3014:	01 97       	sbiw	r24, 0x01	; 1
    3016:	9e 83       	std	Y+6, r25	; 0x06
    3018:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    301a:	8d 81       	ldd	r24, Y+5	; 0x05
    301c:	9e 81       	ldd	r25, Y+6	; 0x06
    301e:	00 97       	sbiw	r24, 0x00	; 0
    3020:	69 f7       	brne	.-38     	; 0x2ffc <main+0x20c>
    3022:	14 c0       	rjmp	.+40     	; 0x304c <main+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3024:	6f 81       	ldd	r22, Y+7	; 0x07
    3026:	78 85       	ldd	r23, Y+8	; 0x08
    3028:	89 85       	ldd	r24, Y+9	; 0x09
    302a:	9a 85       	ldd	r25, Y+10	; 0x0a
    302c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3030:	dc 01       	movw	r26, r24
    3032:	cb 01       	movw	r24, r22
    3034:	9e 83       	std	Y+6, r25	; 0x06
    3036:	8d 83       	std	Y+5, r24	; 0x05
    3038:	8d 81       	ldd	r24, Y+5	; 0x05
    303a:	9e 81       	ldd	r25, Y+6	; 0x06
    303c:	9a 83       	std	Y+2, r25	; 0x02
    303e:	89 83       	std	Y+1, r24	; 0x01
    3040:	89 81       	ldd	r24, Y+1	; 0x01
    3042:	9a 81       	ldd	r25, Y+2	; 0x02
    3044:	01 97       	sbiw	r24, 0x01	; 1
    3046:	f1 f7       	brne	.-4      	; 0x3044 <main+0x254>
    3048:	9a 83       	std	Y+2, r25	; 0x02
    304a:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(20);
					LCD_voidClearDisplay();
    304c:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <LCD_voidClearDisplay>

					Local_u8Iter=0;
    3050:	1f 86       	std	Y+15, r1	; 0x0f
    3052:	19 c0       	rjmp	.+50     	; 0x3086 <main+0x296>
				}
				else
				{
					Local_s16Result=((Local_u16NumOne / Local_u16NumTwo));
    3054:	8d 89       	ldd	r24, Y+21	; 0x15
    3056:	9e 89       	ldd	r25, Y+22	; 0x16
    3058:	2b 89       	ldd	r18, Y+19	; 0x13
    305a:	3c 89       	ldd	r19, Y+20	; 0x14
    305c:	b9 01       	movw	r22, r18
    305e:	0e 94 76 18 	call	0x30ec	; 0x30ec <__divmodhi4>
    3062:	cb 01       	movw	r24, r22
    3064:	99 8b       	std	Y+17, r25	; 0x11
    3066:	88 8b       	std	Y+16, r24	; 0x10
    3068:	0e c0       	rjmp	.+28     	; 0x3086 <main+0x296>
				}
				break;
			case'*':
				Local_s16Result=((Local_u16NumOne * Local_u16NumTwo));
    306a:	8d 89       	ldd	r24, Y+21	; 0x15
    306c:	9e 89       	ldd	r25, Y+22	; 0x16
    306e:	2b 89       	ldd	r18, Y+19	; 0x13
    3070:	3c 89       	ldd	r19, Y+20	; 0x14
    3072:	ac 01       	movw	r20, r24
    3074:	42 9f       	mul	r20, r18
    3076:	c0 01       	movw	r24, r0
    3078:	43 9f       	mul	r20, r19
    307a:	90 0d       	add	r25, r0
    307c:	52 9f       	mul	r21, r18
    307e:	90 0d       	add	r25, r0
    3080:	11 24       	eor	r1, r1
    3082:	99 8b       	std	Y+17, r25	; 0x11
    3084:	88 8b       	std	Y+16, r24	; 0x10
				break;
			}
			if(Local_u16NumTwo!=0)
    3086:	8b 89       	ldd	r24, Y+19	; 0x13
    3088:	9c 89       	ldd	r25, Y+20	; 0x14
    308a:	00 97       	sbiw	r24, 0x00	; 0
    308c:	51 f0       	breq	.+20     	; 0x30a2 <main+0x2b2>
			{
			LCD_voidDisplayIntegerNum(Local_s16Result);
    308e:	88 89       	ldd	r24, Y+16	; 0x10
    3090:	99 89       	ldd	r25, Y+17	; 0x11
    3092:	aa 27       	eor	r26, r26
    3094:	97 fd       	sbrc	r25, 7
    3096:	a0 95       	com	r26
    3098:	ba 2f       	mov	r27, r26
    309a:	bc 01       	movw	r22, r24
    309c:	cd 01       	movw	r24, r26
    309e:	0e 94 18 16 	call	0x2c30	; 0x2c30 <LCD_voidDisplayIntegerNum>
			}

			Local_u16NumOne=Local_s16Result;
    30a2:	88 89       	ldd	r24, Y+16	; 0x10
    30a4:	99 89       	ldd	r25, Y+17	; 0x11
    30a6:	9e 8b       	std	Y+22, r25	; 0x16
    30a8:	8d 8b       	std	Y+21, r24	; 0x15
			Local_s16Result=0;
    30aa:	19 8a       	std	Y+17, r1	; 0x11
    30ac:	18 8a       	std	Y+16, r1	; 0x10
			Local_u16NumTwo=0;
    30ae:	1c 8a       	std	Y+20, r1	; 0x14
    30b0:	1b 8a       	std	Y+19, r1	; 0x13
			operand=0;
    30b2:	1a 8a       	std	Y+18, r1	; 0x12
    30b4:	b9 ce       	rjmp	.-654    	; 0x2e28 <main+0x38>
		}
		else if(Local_u8key=='c')
    30b6:	89 8d       	ldd	r24, Y+25	; 0x19
    30b8:	83 36       	cpi	r24, 0x63	; 99
    30ba:	09 f0       	breq	.+2      	; 0x30be <main+0x2ce>
    30bc:	b5 ce       	rjmp	.-662    	; 0x2e28 <main+0x38>
		{
			LCD_voidClearDisplay();
    30be:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <LCD_voidClearDisplay>
    30c2:	b2 ce       	rjmp	.-668    	; 0x2e28 <main+0x38>

000030c4 <__udivmodhi4>:
    30c4:	aa 1b       	sub	r26, r26
    30c6:	bb 1b       	sub	r27, r27
    30c8:	51 e1       	ldi	r21, 0x11	; 17
    30ca:	07 c0       	rjmp	.+14     	; 0x30da <__udivmodhi4_ep>

000030cc <__udivmodhi4_loop>:
    30cc:	aa 1f       	adc	r26, r26
    30ce:	bb 1f       	adc	r27, r27
    30d0:	a6 17       	cp	r26, r22
    30d2:	b7 07       	cpc	r27, r23
    30d4:	10 f0       	brcs	.+4      	; 0x30da <__udivmodhi4_ep>
    30d6:	a6 1b       	sub	r26, r22
    30d8:	b7 0b       	sbc	r27, r23

000030da <__udivmodhi4_ep>:
    30da:	88 1f       	adc	r24, r24
    30dc:	99 1f       	adc	r25, r25
    30de:	5a 95       	dec	r21
    30e0:	a9 f7       	brne	.-22     	; 0x30cc <__udivmodhi4_loop>
    30e2:	80 95       	com	r24
    30e4:	90 95       	com	r25
    30e6:	bc 01       	movw	r22, r24
    30e8:	cd 01       	movw	r24, r26
    30ea:	08 95       	ret

000030ec <__divmodhi4>:
    30ec:	97 fb       	bst	r25, 7
    30ee:	09 2e       	mov	r0, r25
    30f0:	07 26       	eor	r0, r23
    30f2:	0a d0       	rcall	.+20     	; 0x3108 <__divmodhi4_neg1>
    30f4:	77 fd       	sbrc	r23, 7
    30f6:	04 d0       	rcall	.+8      	; 0x3100 <__divmodhi4_neg2>
    30f8:	e5 df       	rcall	.-54     	; 0x30c4 <__udivmodhi4>
    30fa:	06 d0       	rcall	.+12     	; 0x3108 <__divmodhi4_neg1>
    30fc:	00 20       	and	r0, r0
    30fe:	1a f4       	brpl	.+6      	; 0x3106 <__divmodhi4_exit>

00003100 <__divmodhi4_neg2>:
    3100:	70 95       	com	r23
    3102:	61 95       	neg	r22
    3104:	7f 4f       	sbci	r23, 0xFF	; 255

00003106 <__divmodhi4_exit>:
    3106:	08 95       	ret

00003108 <__divmodhi4_neg1>:
    3108:	f6 f7       	brtc	.-4      	; 0x3106 <__divmodhi4_exit>
    310a:	90 95       	com	r25
    310c:	81 95       	neg	r24
    310e:	9f 4f       	sbci	r25, 0xFF	; 255
    3110:	08 95       	ret

00003112 <__divmodsi4>:
    3112:	97 fb       	bst	r25, 7
    3114:	09 2e       	mov	r0, r25
    3116:	05 26       	eor	r0, r21
    3118:	0e d0       	rcall	.+28     	; 0x3136 <__divmodsi4_neg1>
    311a:	57 fd       	sbrc	r21, 7
    311c:	04 d0       	rcall	.+8      	; 0x3126 <__divmodsi4_neg2>
    311e:	14 d0       	rcall	.+40     	; 0x3148 <__udivmodsi4>
    3120:	0a d0       	rcall	.+20     	; 0x3136 <__divmodsi4_neg1>
    3122:	00 1c       	adc	r0, r0
    3124:	38 f4       	brcc	.+14     	; 0x3134 <__divmodsi4_exit>

00003126 <__divmodsi4_neg2>:
    3126:	50 95       	com	r21
    3128:	40 95       	com	r20
    312a:	30 95       	com	r19
    312c:	21 95       	neg	r18
    312e:	3f 4f       	sbci	r19, 0xFF	; 255
    3130:	4f 4f       	sbci	r20, 0xFF	; 255
    3132:	5f 4f       	sbci	r21, 0xFF	; 255

00003134 <__divmodsi4_exit>:
    3134:	08 95       	ret

00003136 <__divmodsi4_neg1>:
    3136:	f6 f7       	brtc	.-4      	; 0x3134 <__divmodsi4_exit>
    3138:	90 95       	com	r25
    313a:	80 95       	com	r24
    313c:	70 95       	com	r23
    313e:	61 95       	neg	r22
    3140:	7f 4f       	sbci	r23, 0xFF	; 255
    3142:	8f 4f       	sbci	r24, 0xFF	; 255
    3144:	9f 4f       	sbci	r25, 0xFF	; 255
    3146:	08 95       	ret

00003148 <__udivmodsi4>:
    3148:	a1 e2       	ldi	r26, 0x21	; 33
    314a:	1a 2e       	mov	r1, r26
    314c:	aa 1b       	sub	r26, r26
    314e:	bb 1b       	sub	r27, r27
    3150:	fd 01       	movw	r30, r26
    3152:	0d c0       	rjmp	.+26     	; 0x316e <__udivmodsi4_ep>

00003154 <__udivmodsi4_loop>:
    3154:	aa 1f       	adc	r26, r26
    3156:	bb 1f       	adc	r27, r27
    3158:	ee 1f       	adc	r30, r30
    315a:	ff 1f       	adc	r31, r31
    315c:	a2 17       	cp	r26, r18
    315e:	b3 07       	cpc	r27, r19
    3160:	e4 07       	cpc	r30, r20
    3162:	f5 07       	cpc	r31, r21
    3164:	20 f0       	brcs	.+8      	; 0x316e <__udivmodsi4_ep>
    3166:	a2 1b       	sub	r26, r18
    3168:	b3 0b       	sbc	r27, r19
    316a:	e4 0b       	sbc	r30, r20
    316c:	f5 0b       	sbc	r31, r21

0000316e <__udivmodsi4_ep>:
    316e:	66 1f       	adc	r22, r22
    3170:	77 1f       	adc	r23, r23
    3172:	88 1f       	adc	r24, r24
    3174:	99 1f       	adc	r25, r25
    3176:	1a 94       	dec	r1
    3178:	69 f7       	brne	.-38     	; 0x3154 <__udivmodsi4_loop>
    317a:	60 95       	com	r22
    317c:	70 95       	com	r23
    317e:	80 95       	com	r24
    3180:	90 95       	com	r25
    3182:	9b 01       	movw	r18, r22
    3184:	ac 01       	movw	r20, r24
    3186:	bd 01       	movw	r22, r26
    3188:	cf 01       	movw	r24, r30
    318a:	08 95       	ret

0000318c <__prologue_saves__>:
    318c:	2f 92       	push	r2
    318e:	3f 92       	push	r3
    3190:	4f 92       	push	r4
    3192:	5f 92       	push	r5
    3194:	6f 92       	push	r6
    3196:	7f 92       	push	r7
    3198:	8f 92       	push	r8
    319a:	9f 92       	push	r9
    319c:	af 92       	push	r10
    319e:	bf 92       	push	r11
    31a0:	cf 92       	push	r12
    31a2:	df 92       	push	r13
    31a4:	ef 92       	push	r14
    31a6:	ff 92       	push	r15
    31a8:	0f 93       	push	r16
    31aa:	1f 93       	push	r17
    31ac:	cf 93       	push	r28
    31ae:	df 93       	push	r29
    31b0:	cd b7       	in	r28, 0x3d	; 61
    31b2:	de b7       	in	r29, 0x3e	; 62
    31b4:	ca 1b       	sub	r28, r26
    31b6:	db 0b       	sbc	r29, r27
    31b8:	0f b6       	in	r0, 0x3f	; 63
    31ba:	f8 94       	cli
    31bc:	de bf       	out	0x3e, r29	; 62
    31be:	0f be       	out	0x3f, r0	; 63
    31c0:	cd bf       	out	0x3d, r28	; 61
    31c2:	09 94       	ijmp

000031c4 <__epilogue_restores__>:
    31c4:	2a 88       	ldd	r2, Y+18	; 0x12
    31c6:	39 88       	ldd	r3, Y+17	; 0x11
    31c8:	48 88       	ldd	r4, Y+16	; 0x10
    31ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    31cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    31ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    31d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    31d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    31d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    31d6:	b9 84       	ldd	r11, Y+9	; 0x09
    31d8:	c8 84       	ldd	r12, Y+8	; 0x08
    31da:	df 80       	ldd	r13, Y+7	; 0x07
    31dc:	ee 80       	ldd	r14, Y+6	; 0x06
    31de:	fd 80       	ldd	r15, Y+5	; 0x05
    31e0:	0c 81       	ldd	r16, Y+4	; 0x04
    31e2:	1b 81       	ldd	r17, Y+3	; 0x03
    31e4:	aa 81       	ldd	r26, Y+2	; 0x02
    31e6:	b9 81       	ldd	r27, Y+1	; 0x01
    31e8:	ce 0f       	add	r28, r30
    31ea:	d1 1d       	adc	r29, r1
    31ec:	0f b6       	in	r0, 0x3f	; 63
    31ee:	f8 94       	cli
    31f0:	de bf       	out	0x3e, r29	; 62
    31f2:	0f be       	out	0x3f, r0	; 63
    31f4:	cd bf       	out	0x3d, r28	; 61
    31f6:	ed 01       	movw	r28, r26
    31f8:	08 95       	ret

000031fa <_exit>:
    31fa:	f8 94       	cli

000031fc <__stop_program>:
    31fc:	ff cf       	rjmp	.-2      	; 0x31fc <__stop_program>
